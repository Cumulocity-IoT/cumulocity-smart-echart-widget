{"version":3,"sources":["../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../projects/gp-smart-echart-widget/src/lib/util/extractValueFromJSON.util.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/model/config.modal.ts","../../../../projects/gp-smart-echart-widget/src/lib/smart-chart-config/smart-chart-config.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.module.ts","../../../../projects/gp-smart-echart-widget/src/lib/preview-image.ts"],"names":["GpSmartEchartWidgetService","http","this","httpHeaders","HttpHeaders","Content-Type","Accept","options","headers","token","append","prototype","getAPIData","apiUrl","console","log","get","Injectable","args","providedIn","HttpClient","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","create","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","extractValueFromJSON","keyArr","parent","obj","keysArray","Array","isArray","resultArray","keysArray_1","keysArray_1_1","keys","split","parentRef","idx","toString","join","GpSmartEchartWidgetComponent","chartService","realTimeService","fetchClient","chartOption","allSubscriptions","realtime","deviceId","isDatahubPostCall","ngOnInit","dataFromUser","userInput","createChart","reloadData","chartDom","document","getElementById","myChart","echarts","init","showLoading","showApiInput","_a","toPromise","serviceData","_c","showDatahubInput","sqlReqObject","sql","sqlQuery","limit","format","fetch","JSON","stringify","method","response","_b","json","hideLoading","aggrList","resultDimension","getResultDimesions","groupBy","dimensions","encodeData","datasetId","columns","data","type","getDatasetDimensions","yDimensions","xDimensions","yAxisName","xAxisName","yAxisDimension","getFormattedName","xAxisDimension","indexOf","getEncodeData","dataset","id","source","title","text","tooltip","trigger","axisPointer","confine","xAxis","name","nameLocation","nameGap","scale","getXAxisType","yAxis","getYAxisType","grid","left","top","right","bottom","containLabel","legend","icon","width","formatter","a","slice","replace","str","toUpperCase","trim","dataZoom","showZoomFeature","sliderZoom","toolbox","feature","show","saveAsImage","restore","series","yAxisIndex","pieSlicenName","pieSliceValue","angleAxis","startAngle","radiusAxis","min","polar","radarDimensions","seriesData","getRadarSeriesData","indexOfXDimension","indicatorData","radar","indicator","registerTransform","simpleTransform","aggregate","listName","fromDatasetId","transform","config","resultDimensions","print","selected","detail","getPieChartSeriesData","map","item","getPolarChartSeriesData","xAxisObject","yAxisObject","layout","getScatterChartSeriesData","boxZoom","getHorizontalSeriesData","textStyle","overflow","orient","getSeriesData","input","getChartType","coordinateSystem","showSymbol","encode","radius","angle","showLabel","emphasis","symbolSize","scatterSymbolSize","x","xAxisDimensions","xAxisData","focus","itemStyle","shadowOffsetX","shadowColor","yAxisDimensions","yAxisData","dimensionRecord_1","reduce","acc","dimension","forEach","key","values","result1","stack","getStackName","smooth","smoothLine","areaStyle","area","convradius","roseValue","sliceStyle","undefined","pieBorderWidth","pieBorderRadius","borderColor","borderWidth","borderRadius","roseType","avoidLabelOverlap","position","labelLine","shadowBlur","pieSliceName","itemName","xAxisDimensions_1","this_1","yAxisDimensions_1","this_2","currentResult","_this","dimensionRecord","indexes","index","element","createObject","dataDim","arr","dimen","yAxisDimensions_2","this_3","dimensionArr","stackData","dimensionName","stackValues","stackName","list","groupby","changedNamesForResult","from","aggrDimesnion","aggrMethod","val","xAxisIndex","minSpan","height","xAxisDimensions_2","this_4","Component","selector","template","Realtime","FetchClient","Input","Stack","AggregateData","chartValues","chartType","chartLayout","yAxisType","disabled","xAxisType","legendType","aggregateMethod","SmartChartConfigComponent","flag","dataSource","dataSourceValue","addStack","stackList","aggrArr","chartData","isGroupByInAggregate","isAggrAdded","configData","EventEmitter","aggregationMethods","stackAdded","deleteStackValue","splice","updateStack","addAnotherStack","addAnotherAggregate","deleteAggrValue","aggr","onSelection","filter","chartLayoutData","onLayoutSelection","_e","_f","_g","_h","_j","_k","_l","_m","dataSourceSelection","SubmitData","emit","Output","description","previewImage","component","configComponent","ng1","noDeviceTarget","noNewWidgets","deviceTargetNotRequired","groupsSelectable","NgModule","declarations","imports","CoreModule","NgxEchartsModule","forRoot","echarts__namespace","schemas","CUSTOM_ELEMENTS_SCHEMA","providers","provide","HOOK_COMPONENTS","multi","useValue","Éµ0","exports","entryComponents"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GpSmartEchartWidgetService {\r\n\r\n  private httpHeaders: HttpHeaders = new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    \r\n  });\r\n  \r\n  private options = {\r\n    headers: this.httpHeaders,\r\n    // params: new HttpParams().append('resolveIds', '' + true).append('tenantId', 'RACM')\r\n  }\r\n  token = 'bmVlcnUuYXJvcmFAc29mdHdhcmVhZy5jb206TWFuYWdlQDA5ODc=';\r\n  constructor(private http: HttpClient) { \r\n    this.httpHeaders.append(\"Authorization\", \"Bearer \" + this.token);\r\n  }\r\n  \r\n  public getAPIData(apiUrl): Observable<any>{\r\n    console.log('options',this.options);\r\n    // if(apiUrl.indexOf('smart-equipment.eu-latest.cumulocity.com')!=-1){\r\n    //   return this.http.get(apiUrl,this.options);\r\n    // } else {\r\n    return this.http.get(apiUrl);\r\n    // }\r\n\r\n    // const response = await this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n\r\n    // const data = await response.json();\r\n    // return this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","function isObject(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n}\r\nexport function extractValueFromJSON(keyArr: Array<string> | string, parent: Record<string, any>) {\r\n    let keysArray = Array.isArray(keyArr) ? keyArr : [keyArr];\r\n    let resultArray = [];\r\n    \r\n    for (let keyStr of keysArray) {\r\n        const keys = keyStr.split('.');\r\n        let parentRef = parent;\r\n        \r\n        if(keys.length === 1){\r\n            resultArray.push(parentRef[keys[0]]);\r\n        } else {\r\n            let result;\r\n            for (let idx = 0; idx < keys.length; idx++) {\r\n                const key = keys[idx];\r\n                result = parentRef[key];\r\n                if (isObject(result)) {\r\n                    parentRef = result;\r\n                } else if (idx < keys.length - 1) {\r\n                }\r\n            }\r\n            resultArray.push(result);\r\n        }    \r\n        \r\n    }\r\n    if(keysArray.length > 1){\r\n        return resultArray.join(' ');\r\n    } \r\n    return resultArray[0];\r\n}\r\n\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport * as echarts from 'echarts';\r\nimport { EChartsOption } from 'echarts';\r\nimport { ChartConfig } from './model/config.modal';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport { map } from 'rxjs/operators';\r\nimport * as simpleTransform from 'echarts-simple-transform';\r\nimport {\r\n  FetchClient,\r\n  Realtime,\r\n} from '@c8y/client';\r\nimport { extractValueFromJSON } from './util/extractValueFromJSON.util';\r\n@Component({\r\n  selector: 'lib-gp-smart-echart-widget',\r\n  templateUrl: './gp-smart-echart-widget.component.html',\r\n  styles: ['gp-smart-echart-widget.component.css']\r\n})\r\nexport class GpSmartEchartWidgetComponent implements OnInit {\r\n  @Input() config: ChartConfig;\r\n  // @Input() config: ChartConfig = {\r\n  //   xAxisDimension: \"PhoneSales\",\r\n  //   apiUrl: \"https://democenter.gateway.webmethodscloud.com/gateway/ConnectedStoreAPIs/1.0/ConnectedStoreAPIs/getQuarterlySales\",\r\n  //   legend: {\r\n  //     \"icon\": \"diamond\",\r\n  //     \"top\": \"10%\",\r\n  //     \"type\": \"scroll\"\r\n  //   },\r\n  //   listName: \"SalesData\",\r\n  //   title: \"TEST\",\r\n  //   dataSource: \"API\",\r\n  //   type: \"bar\",\r\n  //   layout: \"simpleBar\",\r\n  //   xAxis: \"category\",\r\n  //   yAxis: \"value\",\r\n  //   yAxisDimension: \"QuarterSales\",\r\n  //   radius: [],\r\n  //   stackList: [],\r\n  //   aggrList: [],\r\n  //   stack: '',\r\n  //   aggrArr: [],\r\n  //   addStack: false\r\n  // };\r\n  serviceData;\r\n  seriesData;\r\n  chartData;\r\n  userInput;\r\n  chartOption: EChartsOption = {};\r\n  protected allSubscriptions: any = [];\r\n  realtime = true;\r\n  deviceId = '';\r\n  isDatahubPostCall = false;\r\n  constructor(private chartService: GpSmartEchartWidgetService,\r\n    private realTimeService: Realtime, private fetchClient: FetchClient) { }\r\n  ngOnInit(): void {\r\n    // this.createChart(this.config);\r\n    // this.createChart();\r\n  }\r\n  dataFromUser(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }// end of dataFromUser()\r\n  //create variables for all ChartConfig like value type, apidata from url etc to store the data from user\r\n  // create chart\r\n  reloadData(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }\r\n  //createChart function is used to create chart with the help of echart library\r\n  async createChart(userInput?: ChartConfig) {\r\n    let chartDom = document.getElementById('chart-container');\r\n    let myChart = echarts.init(chartDom);\r\n    myChart.showLoading();\r\n    // let d = this.realtTimeMeasurements(6889031);\r\n    // const response = await this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n    if (userInput.showApiInput) {\r\n      \r\n      this.serviceData = await this.chartService.getAPIData(userInput.apiUrl).toPromise();\r\n    } else if (userInput.showDatahubInput) {\r\n\r\n      const sqlReqObject = {\r\n        \"sql\": userInput.sqlQuery,\r\n        \"limit\": 100,\r\n        \"format\": \"PANDAS\"\r\n      };\r\n      const response = await this.fetchClient.fetch(userInput.apiUrl, {\r\n        body: JSON.stringify(sqlReqObject),\r\n        method: 'POST'\r\n      })\r\n      this.serviceData = await response.json();\r\n      this.isDatahubPostCall = true;\r\n    } else {\r\n      console.log('No Datasource selected')\r\n    }\r\n    if (this.serviceData) {\r\n      console.log('data from API', this.serviceData);\r\n      console.log('datahub post', this.isDatahubPostCall)\r\n      // }\r\n      // this.chartService.getAPIData(userInput.apiUrl).subscribe((response) => {\r\n      myChart.hideLoading();\r\n      // this.serviceData = response;\r\n      // this.serviceData = data;\r\n      console.log('userInput', userInput);\r\n      if (userInput.aggrList.length === 0 && !this.isDatahubPostCall) {\r\n        //calls for API without Aggregation\r\n        if (userInput.type === 'pie') {\r\n          this.seriesData = this.getPieChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              show: false,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n            },\r\n            yAxis: {\r\n              type: 'value',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log('pie without aggr', this.chartOption)\r\n        }\r\n        // End of piechart for API\r\n        else if (userInput.type === 'polar') {\r\n          this.seriesData = this.getPolarChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            polar: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          // console.log(\"NORMAL POLAR CHart Option \", this.chartOption)\r\n        }\r\n        // End of Polar CHart for API\r\n        else if (userInput.type === 'scatter') {\r\n          let xAxisObject, yAxisObject;\r\n          if (userInput.layout === 'horizontalScatter') {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.yAxisDimension];\r\n              }),\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          } else {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          }\r\n          this.seriesData = this.getScatterChartSeriesData(userInput);\r\n\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: xAxisObject,\r\n            yAxis: yAxisObject,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            legend:{\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            series: this.seriesData\r\n          }\r\n          console.log('scatter option', this.chartOption)\r\n        } //End of Scatter Chart for API\r\n        else if (userInput.type === 'radar') {\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          this.chartOption = {\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            radar: {\r\n              indicator: this.serviceData[userInput.listName].map(function (item) {\r\n                return { name: item[userInput.xAxisDimension] };\r\n              }),\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log(this.chartOption)\r\n        } // End of Radar CHart for API\r\n        else if ((userInput.type === 'line' || userInput.type === 'bar') && (userInput.layout != 'simpleHorizontalBar' && userInput.layout != 'stackedHorizontalBar')) {\r\n          this.seriesData = this.getSeriesData(userInput);\r\n          let xAxisName,yAxisName;\r\n          if(userInput.xAxisDimension.split(',').length>1){\r\n            xAxisName = ''\r\n          }else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length>1){\r\n            yAxisName = ''\r\n          }else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput),\r\n              name:xAxisName\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name:yAxisName\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          };\r\n          console.log('Simple bar or line', this.chartOption)\r\n        }\r\n        // End of Simple Line,Simple Bar,Stacked Line And Stacked Bar for API\r\n        else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n          console.log('horizontal chart chosen!!', userInput.aggrList.length);\r\n          let xAxisName,yAxisName;\r\n          if(userInput.xAxisDimension.split(',').length>1){\r\n            xAxisName = ''\r\n          }else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length>1){\r\n            yAxisName = ''\r\n          }else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.seriesData = this.getHorizontalSeriesData(userInput);\r\n          this.chartOption =\r\n          {\r\n            title: {\r\n              text: userInput.title,\r\n              left: 'center',\r\n              textStyle: {\r\n                overflow: 'truncate',\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              show: true,\r\n              icon: userInput.legend.icon,\r\n              orient: 'horizontal',\r\n              top: '10%',\r\n              formatter: function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                return a;\r\n              },\r\n              type: 'scroll',\r\n              // userInput.legend.orient,\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            xAxis: {\r\n              name: xAxisName,\r\n              // nameLocation: 'middle',\r\n              // nameGap: 50,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              // nameLocation: 'middle',\r\n              // nameGap: 150,\r\n              type: this.getYAxisType(userInput),\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                const val = extractValueFromJSON(userInput.yAxisDimension, item);\r\n                return val;\r\n              }),\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n          };\r\n          console.log('horizontal chart options', this.chartOption)\r\n        }\r\n        // End of Horizontal Bar & Stacked Horizontal Bar\r\n      } // End of API calls with JSON Response without Aggregation\r\n      else if (userInput.aggrList.length === 0 && this.isDatahubPostCall) {\r\n        // calls for Datahub without Aggregation\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        console.log('resultDeimenions', resultDimension)\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = null;\r\n        // Format of Data from datahub is \r\n        // Result:[\r\n        //   \"columns\":['colA','colB',...,'colN'],\r\n        //   \"data\":[\r\n        //     [\"A1\",\"B1\",...,\"N1\"],\r\n        //     [\"A2\",\"B2\",...,\"N2\"],\r\n        //     ...,\r\n        //     [\"AN\",\"BN\",...,\"NN\"]\r\n        //   ]\r\n        // ]\r\n        // source of Dataset should be [[columns],[datarows]]\r\n        this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        //End of Response Data extraction\r\n        console.log('Extracted Service Data', this.serviceData);\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions, xDimensions;\r\n          let yAxisName='',xAxisName='';\r\n\r\n          // if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: userInput.xAxisDimension,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              //   axisLine: {\r\n              //     onZero: false // This is important, so x axis can start from non-zero number\r\n              // },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          console.log('encode data', encodeData);\r\n          console.log('datahub bar without aggregation', this.chartOption);\r\n        } // End of Bar,Line Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'scatter') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          let xAxisName='',yAxisName='';\r\n          if(userInput.xAxisDimension.split(',').length > 1){\r\n            xAxisName = '';\r\n          } else{\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length > 1){\r\n            yAxisName = '';\r\n          \r\n          }else{\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n              // data: this.serviceData[userInput.listName].map(function (item) {\r\n              //   return item[userInput.xAxisDimension];\r\n              // }),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          console.log('scatter option transformation', this.chartOption)\r\n        } //End of Scatter Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'pie') {\r\n          dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: \"item\",\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n        } // End of Pie chart without Aggregation for Datahub\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions, xDimensions;\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            // legend: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            \r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n\r\n            polar: {},\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          // console.log(\"Aggregate POLAR CHart Option \", this.chartOption)\r\n        }  // End of Polar Chart Without Aggregation for Datahub\r\n        else if (userInput.type === 'radar') {\r\n          dimensions = [...userInput.radarDimensions];\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          let indexOfXDimension = this.serviceData[0].indexOf(userInput.xAxisDimension);\r\n          let indicatorData = [];\r\n          for (let i = 1; i < this.serviceData.length; i++) {\r\n            indicatorData.push({ name: this.serviceData[i][indexOfXDimension] });\r\n          }\r\n          // encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            radar: {\r\n              indicator: indicatorData\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log('datahub radar without aggregation', this.chartOption)\r\n        } // End of Radar Chart without Aggregation for Datahub\r\n      } // ENd of Datahub Calls Response without Aggregation\r\n      else if (userInput.aggrList.length > 0) {\r\n        // calls for API & Datahub with Aggregation\r\n        echarts.registerTransform(simpleTransform.aggregate);\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        console.log('resultDeimenions', resultDimension)\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = '_aggregate';\r\n        // Extract the service data based on the response type of wthere call is made to Datahub or Other API\r\n        if (this.isDatahubPostCall) {\r\n          // Format of Data from datahub is \r\n          // Result:[\r\n          //   \"columns\":['colA','colB',...,'colN'],\r\n          //   \"data\":[\r\n          //     [\"A1\",\"B1\",...,\"N1\"],\r\n          //     [\"A2\",\"B2\",...,\"N2\"],\r\n          //     ...,\r\n          //     [\"AN\",\"BN\",...,\"NN\"]\r\n          //   ]\r\n          // ]\r\n          // source of Dataset should be [[columns],[datarows]]\r\n          this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        } else {\r\n          // Format of Data from APi calls is JSON object with key,value\r\n          // Result: [\r\n          //   {\r\n          //     \"key1\": \"val1\",\r\n          //     \"key2\": \"val2\",\r\n          //   },\r\n          //   {\r\n          //     \"key1\": \"val1.1\",\r\n          //     \"key2\": \"val2.1\",\r\n          //   }\r\n          // ]\r\n          this.serviceData = this.serviceData[userInput.listName];\r\n        } //End of Response Data extraction\r\n        console.log('Extracted Service Data', this.serviceData)\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          // dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions, xDimensions;\r\n          let xAxisName='',yAxisName='';\r\n\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name: yAxisName\r\n              //   axisLine: {\r\n              //     onZero: false // This is important, so x axis can start from non-zero number\r\n              // },import { element } from 'protractor';\r\n\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          console.log('encode data', encodeData);\r\n          console.log('aggregate bar', this.chartOption);\r\n        } //End of Bar,Line Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'scatter') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = this.getDatasetDimensions(userInput);\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          let xAxisName='',yAxisName='';\r\n          if(userInput.xAxisDimension.split(',').length > 1){\r\n            xAxisName = '';\r\n          } else{\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length > 1){\r\n            yAxisName = '';\r\n          \r\n          }else{\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          }\r\n \r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions: resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n              // data: this.serviceData[userInput.listName].map(function (item) {\r\n              //   return item[userInput.xAxisDimension];\r\n              // }),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          console.log('scatter option transformation', this.chartOption)\r\n        } //End of Scatter Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'pie') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: \"item\",\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n           \r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n        } //End of Pie Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions, xDimensions;\r\n\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            // legend: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          // console.log(\"Aggregate POLAR CHart Option \", this.chartOption)\r\n        }  // End of Polar Chart with Aggregation for datahub and API\r\n        // else if (userInput.type === 'radar') {\r\n        //   // this code will not work as Apache does not support aggregation with radar\r\n        //   if (this.isDatahubPostCall) {\r\n        //     dimensions = null;\r\n        //   } else {\r\n        //     dimensions = [...userInput.radarDimensions];\r\n\r\n        //   }\r\n\r\n        //   encodeData = this.getEncodeData(userInput, datasetId);\r\n        //   this.chartOption = {\r\n        //     dataset: [\r\n        //       {\r\n        //         id: 'raw_data',\r\n        //         dimensions: dimensions,\r\n        //         source: this.serviceData\r\n        //       },\r\n        //       {\r\n        //         id: '_aggregate',\r\n        //         fromDatasetId: 'raw_data',\r\n        //         transform: [\r\n        //           {\r\n        //             type: 'ecSimpleTransform:aggregate',\r\n        //             config: {\r\n        //               resultDimensions:\r\n        //                 resultDimension,\r\n        //               groupBy: userInput.groupBy\r\n        //             },\r\n        //             print: true\r\n        //           }\r\n        //         ]\r\n        //       }\r\n        //     ],\r\n        //     legend: {\r\n        //       icon: userInput.legend.icon,\r\n        //       width: 330,\r\n        //       type: 'scroll'\r\n        //     },\r\n        //     tooltip: {\r\n        //       trigger: 'item',\r\n        //     },\r\n        //     radar: {\r\n        //       indicator: this.serviceData[userInput.listName].map(function (item) {\r\n        //         return { name: item[userInput.xAxisDimension] };\r\n        //       }),\r\n        //     },\r\n        //     series: this.seriesData,\r\n        //     toolbox: {\r\n        //       feature: {\r\n        //         saveAsImage: {}\r\n        //       }\r\n        //     }\r\n        //   }\r\n        // } // End of Radar Chart with Aggregation for datahub and API\r\n      }  // End of calls for API & Datahub with Aggregation\r\n      // End of chartOptions\r\n      // })\r\n    } // End of IF condition checking whether variable serviceData has some data or not\r\n  }\r\n  getXAxisType(input) {\r\n    return input.xAxis;\r\n  }\r\n  getYAxisType(input) {\r\n    return input.yAxis;\r\n  }\r\n  getChartType(input) {\r\n    return input.type;\r\n  }\r\n  getFormattedName(input) {\r\n    let test = input.split('.').slice(-1);\r\n    let a = test[0].replace(/([A-Z])/g, ' $1')\r\n      // uppercase the first character\r\n      .replace(/^./, function (str) { return str.toUpperCase(); })\r\n    return a.trim();\r\n  }\r\n  getEncodeData(userInput, datasetId?, xDimensions?, yDimensions?) {\r\n    if (userInput.type === \"polar\") {\r\n      return [{\r\n        coordinateSystem: 'polar',\r\n        name: userInput.xAxisDimension,\r\n        type: userInput.layout,\r\n        showSymbol: true,\r\n        encode: {\r\n          radius: userInput.yAxisDimension,\r\n          angle: userInput.xAxisDimension,\r\n          tooltip: [userInput.yAxisDimension, userInput.xAxisDimension]\r\n        },\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n      }]\r\n    }\r\n    else if (userInput.type === 'scatter') {\r\n      if (userInput.layout === 'horizontalScatter') {\r\n        if (userInput.xAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            // name: userInput.xAxisDimension,\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId: datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n          }]\r\n        } else {\r\n          const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n          let xAxisData = [];\r\n          for (let i in xAxisDimensions) {\r\n            xAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId: datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: xAxisDimensions[i],\r\n                tooltip: [xAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          }\r\n          return xAxisData;\r\n        }// End of else part of XAxisDimension\r\n      } else {\r\n        if (userInput.yAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId: datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }]\r\n        } else {\r\n          const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n          let yAxisData = [];\r\n          for (let i in yAxisDimensions) {\r\n            yAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId: datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: yAxisDimensions[i],\r\n                tooltip: [yAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          }\r\n          return yAxisData;\r\n        }// End of else part of YAxisDimension\r\n      }\r\n\r\n      // return [{\r\n      //   // name: userInput.xAxisDimension,\r\n      //   type: userInput.type,\r\n      //   symbolSize: userInput.scatterSymbolSize,\r\n      //   datasetId: datasetId,\r\n      //   encode: {\r\n      //     y: userInput.yAxisDimension,\r\n      //     x: userInput.xAxisDimension,\r\n      //     tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n      //   },\r\n      // }]\r\n    }\r\n    else if (userInput.type === 'radar') {\r\n      const dimensions = userInput.radarDimensions.split(',');\r\n      const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n        acc[dimension] = [];\r\n        return acc;\r\n      }, {});\r\n      this.serviceData[userInput.listName].map(function (item) {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n      let resultARR = Object.values(dimensionRecord)\r\n      const result1 = Object.keys(dimensionRecord).map(key => ({\r\n        name: key,\r\n        value: dimensionRecord[key]\r\n      }));\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n    else if (userInput.type === \"bar\" && (userInput.layout === 'simpleBar' || userInput.layout === 'stackedBar')) {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          // stack:'a',\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let yAxisData = [];\r\n        for (let i in yDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            stack: this.getStackName(userInput.stack, yDimensions[i]),\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"bar\" && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          // stack:'a',\r\n          name: xDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let xAxisData = [];\r\n        for (let i in xDimensions) {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            stack: this.getStackName(userInput.stack, xDimensions[i]),\r\n            name: xDimensions[i],\r\n            encode: {\r\n              x: xDimensions[i],\r\n              y: yDimensions\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return xAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"line\") {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area,\r\n          // stack:'a',\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let yAxisData = [];\r\n        for (let i in yDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            smooth: userInput.smoothLine,\r\n            areaStyle: userInput.area,\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"pie\") {\r\n      let convradius = userInput.radius.split(',');\r\n      let roseValue = ''; let sliceStyle;\r\n      if (userInput.layout === 'roseMode') {\r\n        roseValue = 'rose';\r\n      }\r\n      if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {};\r\n      } else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius\r\n        }\r\n      } else {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius,\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      }\r\n      return [{\r\n        type: userInput.type,\r\n        datasetId: datasetId,\r\n        radius: convradius,\r\n        roseType: roseValue,\r\n        avoidLabelOverlap: false,\r\n        label: {\r\n          show: false,\r\n          position: 'center',\r\n        },\r\n        labelLine: {\r\n          show: false\r\n        },\r\n        itemStyle: sliceStyle,\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        },\r\n        name: userInput.pieSliceName,\r\n        encode: {\r\n          itemName: [userInput.pieSlicenName],\r\n          value: userInput.pieSliceValue\r\n        }\r\n      }];\r\n    }\r\n  }\r\n  // getScatterChartSeriesData function is used to create series data for scatter chart\r\n  getScatterChartSeriesData(userInput) {\r\n    // const result = [];\r\n    // this.serviceData[userInput.listName].map(function (item) {\r\n    //   const currentResult = [];\r\n    //   currentResult.push(item[userInput.xAxisDimension]);\r\n    //   currentResult.push(item[userInput.yAxisDimension]);\r\n    //   result.push(currentResult);\r\n    // });\r\n    if (userInput.layout === 'horizontalScatter') {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          // data: result,\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[userInput.xAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n        let xAxisData = [];\r\n        for (let i in xAxisDimensions) {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            // data: result,\r\n            data: this.serviceData[userInput.listName].map(function (item) {\r\n              return item[xAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }\r\n        return xAxisData;\r\n      }// End of else part of XAxisDimension\r\n    } else {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          // data: result,\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[userInput.yAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n        let yAxisData = [];\r\n        for (let i in yAxisDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            // data: result,\r\n            data: this.serviceData[userInput.listName].map(function (item) {\r\n              return item[yAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }\r\n        return yAxisData;\r\n      }// End of else part of YAxisDimension\r\n    }\r\n\r\n  }\r\n  // getPolarChartSeriesData function is used to create series data for polar chart\r\n  getPolarChartSeriesData(userInput) {\r\n    const result = [];\r\n    this.serviceData[userInput.listName].map(function (item) {\r\n      const currentResult = [];\r\n      currentResult.push(item[userInput.xAxisDimension]);\r\n      currentResult.push(item[userInput.yAxisDimension]);\r\n      result.push(currentResult);\r\n    });\r\n    return [{\r\n      coordinateSystem: 'polar',\r\n      name: userInput.xAxisDimension,\r\n      type: userInput.layout,\r\n      showSymbol: true,\r\n      data: result,\r\n      label: {\r\n        show: userInput.showLabel\r\n      },\r\n      emphasis: {\r\n        label: {\r\n          show: true\r\n        },\r\n      },\r\n    }]\r\n  }\r\n  // getRadarSeriesData function is used to get the data from service and store it in seriesData variable\r\n  getRadarSeriesData(userInput) {\r\n    const dimensions = userInput.radarDimensions.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    console.log('dimensions', dimensions);\r\n\r\n    if (userInput.listName in this.serviceData) {\r\n      this.serviceData[userInput.listName].map(function (item) {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      let indexes = dimensions.map((v, index) => {\r\n        let val = v;\r\n        return { key: val, value: this.serviceData[0].indexOf(v) };\r\n      });\r\n      for (let i = 1; i < this.serviceData.length; i++) {\r\n        indexes.forEach(element => {\r\n          dimensionRecord[element.key].push(this.serviceData[i][element.value]);\r\n        });\r\n      }\r\n    }\r\n\r\n    // let resultARR = Object.values(dimensionRecord)\r\n    const result1 = Object.keys(dimensionRecord).map(key => ({\r\n      name: key,\r\n      value: dimensionRecord[key]\r\n    }));\r\n    if (userInput.listName in this.serviceData) {\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    } else {\r\n      return [{\r\n        // name: userInput.,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n\r\n  }\r\n\r\n\r\n  createObject(dataDim, arr, dimen) {\r\n    const dimensions = dimen.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    let indexes = dimensions.map((v, index) => {\r\n      let val = v;\r\n      return { key: val, value: dataDim.indexOf(v) };\r\n    });\r\n\r\n    arr.map(function (item, index) {\r\n      console.log('item ', item, '   index ', index);\r\n      indexes.keys.forEach(element => {\r\n        dimensionRecord[element.key].push(item[element.value]);\r\n      });\r\n    });\r\n  }\r\n\r\n  //getPieChartSeriesData function is used to create series data for pie chart\r\n  getPieChartSeriesData(userInput) {\r\n    //convert comma separated string userInput.radius to array\r\n    let convradius = userInput.radius.split(',');\r\n    let roseValue = ''; let sliceStyle;\r\n    if (userInput.layout === 'roseMode') {\r\n      roseValue = 'rose';\r\n    }\r\n    if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {}\r\n    }\r\n    else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius\r\n      }\r\n    } else {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius,\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    }\r\n    return [{\r\n      name: userInput.listName,\r\n      type: 'pie',\r\n      radius: convradius,\r\n      roseType: roseValue,\r\n      avoidLabelOverlap: false,\r\n      label: {\r\n        show: true,\r\n        position: 'center',\r\n      },\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      itemStyle:sliceStyle,\r\n      emphasis: {\r\n        // label: {\r\n        //   show: true,\r\n        //   fontSize: '30',\r\n        //   fontWeight: 'bold'\r\n        // }\r\n        itemStyle: {\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 0,\r\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      },\r\n      data: this.serviceData[userInput.listName].map(function (item) {\r\n        //take val from userinput.pieslice value and return it\r\n        const val = item[userInput.pieSliceValue];\r\n        let nam;\r\n        if (userInput.pieSliceValue === userInput.pieSlicenName) {\r\n          nam = userInput.pieSlicenName;\r\n        } else {\r\n          nam = item[userInput.pieSlicenName]\r\n        }\r\n        return {\r\n          value: val,\r\n          name: nam\r\n        }\r\n      }),\r\n    }]\r\n  }\r\n  //getseriesdata recieves userinput and returns seriesdata\r\n  //seriesdata is an array of objects\r\n  getSeriesData(userInput) {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: userInput.listName,\r\n        // data as servicedata's userInput.listName from userinput yaxis dimension without using map function\r\n        data: this.serviceData[userInput.listName].map(function (item) {\r\n          return item[userInput.yAxisDimension];\r\n        }),\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n      let yAxisData = [];\r\n      for (let i in yAxisDimensions) {\r\n        yAxisData[i] = {\r\n          name: yAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stack, yAxisDimensions[i]),\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[yAxisDimensions[i]];\r\n          }),\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      } //end of for block\r\n      return yAxisData;\r\n    }\r\n  }\r\n  // Gets the dimensions for dataset\r\n  getDatasetDimensions(userInput) {\r\n    let yDimensions, xDimensions, dimensionArr = [];\r\n    // if (userInput.type === 'bar' || userInput.type === 'line') {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      yDimensions = userInput.yAxisDimension;\r\n      dimensionArr.push(yDimensions);\r\n    } else {\r\n      yDimensions = userInput.yAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...yDimensions];\r\n    }\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      xDimensions = userInput.xAxisDimension;\r\n      dimensionArr.push(xDimensions);\r\n    } else {\r\n      xDimensions = userInput.xAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...xDimensions];\r\n    }\r\n    return dimensionArr;\r\n  }\r\n  // if stackdata is empty then return dimensionName\r\n  // else if stackdata is not empty then check if dimensionName is present in stackdata\r\n  // if present then return stackname\r\n  // else return dimensionName\r\n  getStackName(stackData, dimensionName) {\r\n    let result = '';\r\n    for (let x in stackData) {\r\n      let values = stackData[x].stackValues.split(',');\r\n      for (let i in values) {\r\n        if (values[i] === dimensionName) {\r\n          result = stackData[x].stackName;\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //Get the dimensions and method array for aggregation\r\n  // List comes from aggregate config and conatins both method and dimension name\r\n  //We also need group by to be included as a dimension but without a method\r\n  getResultDimesions(list, groupby) {\r\n    const changedNamesForResult = list.map(({\r\n      aggrDimesnion: from,\r\n      aggrMethod: method\r\n    }) => ({\r\n      from,\r\n      method\r\n    }));\r\n    changedNamesForResult.push({ from: groupby });\r\n    return changedNamesForResult;\r\n  }\r\n  // Method for showing the Slider/Pinch Zoom\r\n  showZoomFeature(val) {\r\n    if (val) {\r\n      return [\r\n        {\r\n          type: 'inside',\r\n          xAxisIndex: 0,\r\n          minSpan: 5\r\n        },\r\n        {\r\n          type: 'slider',\r\n          xAxisIndex: 0,\r\n          minSpan: 5,\r\n          show: true,\r\n          height: 20,\r\n          top: '90%',\r\n        }\r\n      ]\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n  // Get data for horizontal Bar chart\r\n  getHorizontalSeriesData(userInput) {\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: userInput.listName,\r\n        data: this.serviceData[userInput.listName].map(function (item) {\r\n          const val = extractValueFromJSON(userInput.xAxisDimension, item);\r\n          return val;\r\n        }),\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          focus: 'series',\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n      let xAxisData = [];\r\n      for (let i in xAxisDimensions) {\r\n        xAxisData[i] = {\r\n          name: xAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stack, xAxisDimensions[i]),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            // focus:'series',\r\n            label: {\r\n              show: true\r\n            },\r\n          },\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            // return item[yAxisDimensions[i]];\r\n            const val = extractValueFromJSON(xAxisDimensions[i], item);\r\n            return val;\r\n          }),\r\n          // markPoint: {\r\n          //   data: [\r\n          //     { type: 'max', name: 'Max' },\r\n          //     { type: 'min', name: 'Min' }\r\n          //   ]\r\n          // },\r\n          // markLine: {\r\n          //   data: [{ type: 'average', name: 'Avg' }]\r\n          // }\r\n          // ,\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      } //end of for block\r\n      return xAxisData;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport interface ChartConfig {\r\n    radius: string[];\r\n    tooltip?: Tooltip;\r\n    legend?: Legend;\r\n    toolbox?: Toolbox;\r\n    title?: string | '',\r\n    type?: string | '',\r\n    layout?: string | '',\r\n    dataSource?: string | '',\r\n    dataSourceValue?: string | '',\r\n    xAxis?: string | '',\r\n    xAxisDimension?: string | '',\r\n    yAxis?: string | '',\r\n    yAxisDimension: string | '',\r\n    apiUrl?: string | '',\r\n    sqlQuery?:string |'',\r\n    smoothLine?: boolean,\r\n    area?: any | '',\r\n    stackList: Stack[],\r\n    aggrList: AggregateData[],\r\n    stack: Stack[] | string,\r\n    aggrArr: AggregateData[],\r\n    roseType?: string | '',\r\n    showLabel?: boolean,\r\n    dateFormat?:string;\r\n    itemStyle?: ItemStyle,\r\n    emphasis?:Emphasis;\r\n    sliderZoom?:boolean|'';\r\n    boxZoom?:boolean;\r\n    pieSlicenName?:string | '';\r\n    pieSliceValue?:string | '';\r\n    radarShape?:string | '';\r\n    radarIndicator?:string | '';\r\n    radarDimensions?:string | '';\r\n    showApiInput?: boolean;\r\n    showDatahubInput?:boolean;\r\n    addStack: boolean,\r\n    listName:string|'';\r\n    groupBy?:string | '';\r\n    xAxisName?:string | '';\r\n    yAxisName?:string | '';\r\n    scatterSymbolSize?:string;\r\n    pieBorderWidth?:number|0;\r\n    pieBorderRadius?:number|0;\r\n}\r\n\r\nexport class Emphasis{\r\n    label?:Label;\r\n}\r\nexport class Label{\r\n    show?:boolean;\r\n}\r\nexport class ItemStyle{\r\n    borderRadius?:number;\r\n}\r\nexport class YAxis{\r\n    ytype?: string;//'value','category','time','log'\r\n    name?:string;//name of axis\r\n    position?: string;//left or right\r\n}\r\nexport class Tooltip {\r\n    show?: boolean | '';\r\n    trigger?: string | ''; //'axis' for line or bar chart,'item' for scatter or pie chart\r\n    triggerOn?: string | '';\r\n    borderColor?: string | '';\r\n    borderWidth?: string | '';\r\n    order?: string | '';//values can be 'seriesAsc','seriesDesc','valueAsc','valueDesc'\r\n}\r\n\r\n// To show symbol,color and name of series\r\nexport class Legend {\r\n    show?: boolean | '';\r\n    type?: string | '';//'plain' is default,'scroll' when many options are in legend\r\n    orient?: string | '';//'horizontal' or  'vertical'\r\n    icon?: string | '';//shape of legend ; values can be 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'\r\n    selector?: boolean | '';//to show a select all button for legends or not\r\n    top?: string | '';\r\n    width?: Number | '';\r\n\r\n}\r\n\r\nexport class Toolbox {\r\n    show?: boolean | '';\r\n    orient?: string | '';//'horizontal' or  'vertical'\r\n    feature?: Feature;//'plain' is default,'scroll' when many options are in legend\r\n}\r\n\r\nexport class Stack{\r\n    stackName: string;\r\n    stackValues:string;\r\n}\r\n\r\nexport class AggregateData{\r\n    aggrDimesnion: string;\r\n    aggrMethod:string;\r\n}\r\n\r\nexport class Feature {\r\n    saveAsImage?: any | '';\r\n    magicType?: any | '';\r\n    dataZoom?: any | '';\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, Pipe } from '@angular/core';\r\nimport { config } from 'process';\r\nimport { AggregateData, ChartConfig, Stack } from '../model/config.modal';\r\nconst chartValues = {\r\n  chartType: [\r\n\r\n    {\r\n      id: 'bar',\r\n      value: 'Bar Chart'\r\n    },\r\n    {\r\n      id: 'line',\r\n      value: 'Line Chart',\r\n    },\r\n    {\r\n      id: 'pie',\r\n      value: 'Pie Chart'\r\n    },\r\n    {\r\n      id: 'radar',\r\n      value: 'Radar Chart'\r\n    },\r\n    {\r\n      id: 'polar',\r\n      value: 'Polar chart'\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      value: 'Scatter Chart'\r\n    }\r\n  ],\r\n  chartLayout: [\r\n    {\r\n      id: 'line',\r\n      layout: [\r\n        {\r\n          id: 'simple',\r\n          value: 'Simple Line Chart'\r\n        },\r\n        {\r\n          id: 'stacked',\r\n          value: 'Stacked Line Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'polar',\r\n      layout: [\r\n        {\r\n          id: 'line',\r\n          value: 'Line'\r\n        },\r\n        {\r\n          id: 'bar',\r\n          value: 'Bar'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'bar',\r\n      layout: [\r\n        {\r\n          id: 'simpleBar',\r\n          value: 'Simple Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedBar',\r\n          value: 'Stacked Bar Chart'\r\n        },\r\n        {\r\n          id: 'simpleHorizontalBar',\r\n          value: 'Simple Horizontal Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedHorizontalBar',\r\n          value: 'Stacked Horizontal Bar Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'pie',\r\n      layout: [\r\n        {\r\n          id: 'simplePie',\r\n          value: 'Simple Pie Chart'\r\n        },\r\n        {\r\n          id: 'roseMode',\r\n          value: 'Rose Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      layout: [\r\n        {\r\n          id: 'simpleScatter',\r\n          value: 'Simple Scatter Chart'\r\n        },\r\n        {\r\n          id: 'horizontalScatter',\r\n          value: 'Horizontal Scatter Chart'\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  yAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  \r\n  xAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  legendType: [\r\n    {\r\n      icon: 'circle',\r\n      value: 'Circle'\r\n    },\r\n    {\r\n      icon: 'rect',\r\n      value: 'Rectangle'\r\n    },\r\n    {\r\n      icon: 'roundRect',\r\n      value: 'Round Rectangle'\r\n    },\r\n    {\r\n      icon: 'triangle',\r\n      value: 'Triangle'\r\n    },\r\n    {\r\n      icon: 'diamond',\r\n      value: 'Diamond'\r\n    },\r\n    {\r\n      icon: 'arrow',\r\n      value: 'Arrow'\r\n    }\r\n  ],\r\n  aggregateMethod: [\r\n    {\r\n      id: 'sum',\r\n      value: 'Sum'\r\n    },\r\n    {\r\n      id: 'count',\r\n      value: 'Count'\r\n    },\r\n    {\r\n      id: 'Q1',\r\n      value: 'Q1'\r\n    },\r\n    {\r\n      id: 'median',\r\n      value: 'Q2 / Median'\r\n    },\r\n    {\r\n      id: 'Q3',\r\n      value: 'Q3'\r\n    },\r\n    {\r\n      id: 'first',\r\n      value: 'First'\r\n    },\r\n    {\r\n      id: 'average',\r\n      value: 'Average'\r\n    },\r\n    {\r\n      id: 'min',\r\n      value: 'Min'\r\n    },\r\n    {\r\n      id: 'max',\r\n      value: 'Max'\r\n    },\r\n  ],\r\n  listName: '',\r\n}\r\n@Component({\r\n  selector: 'app-smart-chart-config',\r\n  templateUrl: './smart-chart-config.component.html',\r\n  styleUrls: ['./smart-chart-config.component.css']\r\n})\r\n\r\n\r\nexport class SmartChartConfigComponent implements OnInit {\r\n  flag = false;\r\n  @Input() config: ChartConfig = {\r\n    listName: '',\r\n    title: 'DATA CHART',\r\n    pieSlicenName: 'Date',\r\n    pieSliceValue: 'PhoneSales',\r\n    type: '',\r\n    layout: '',\r\n    dataSource: '',\r\n    dataSourceValue: '',\r\n    xAxis: '',\r\n    yAxis: '',\r\n    smoothLine: false,\r\n    apiUrl: '',\r\n    area: false,\r\n    yAxisDimension: 'QuarterSales',\r\n    radarDimensions: 'count,costOfRepair',\r\n    addStack: false,\r\n    showApiInput: false,\r\n    stack: [],\r\n    stackList: Stack[''],\r\n    aggrArr: [],\r\n    aggrList: AggregateData[''],\r\n    // groupBy: '',\r\n    legend: {\r\n      icon: '',\r\n      width: 330,\r\n      type: 'scroll'\r\n    },\r\n    radius: []\r\n  };\r\n\r\n  // @Input() config: ChartConfig = {\r\n  //   listName: '',\r\n  //   title: 'DATA CHART',\r\n  //   pieSlicenName: '',\r\n  //   pieSliceValue: '',\r\n  //   type: '',\r\n  //   layout: '',\r\n  //   dataSource: '',\r\n  //   dataSourceValue: '',\r\n  //   xAxis: '',\r\n  //   yAxis: '',\r\n  //   smoothLine: false,\r\n  //   apiUrl: '',\r\n  //   area: false,\r\n  //   yAxisDimension: 'Temperature',\r\n  //   radarDimensions: '',\r\n  //   addStack: false,\r\n  //   showApiInput: false,\r\n  //   showDatahubInput: false,\r\n  //   stack: [],\r\n  //   stackList: Stack[''],\r\n  //   aggrArr:[],\r\n  //   aggrList: AggregateData[''],\r\n  //   // groupBy: '',\r\n  //   legend: {\r\n  //     icon: '',\r\n  //     width: 330,\r\n  //     type: 'scroll'\r\n  //   },\r\n  //   radius: []\r\n  // };\r\n\r\n\r\n  //create output decorator to emit data\r\n\r\n  chartData = chartValues;\r\n  chartLayoutData;\r\n  aggregationMethods;\r\n\r\n  isGroupByInAggregate = false;\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.aggregationMethods = chartValues.aggregateMethod;\r\n\r\n    this.config.xAxis = 'Date';\r\n    this.config.xAxis = 'value';\r\n\r\n    this.config.xAxisDimension = 'PhoneSales';\r\n    this.config.yAxisDimension = 'QuarterSales';\r\n\r\n    this.config.apiUrl = 'https://democenter.gateway.webmethodscloud.com/gateway/ConnectedStoreAPIs/1.0/ConnectedStoreAPIs/getQuarterlySales';\r\n    this.config.legend = {\r\n      icon: 'diamond',\r\n      top: '10%',\r\n      type: 'scroll'\r\n    }\r\n    this.config.listName = 'SalesData';\r\n    this.config.aggrList = [];\r\n    // this.config.xAxisDimension = 'time';\r\n    // this.config.yAxisDimension = 'c8y_Temperature.T.value';\r\n    // this.config.sqlQuery = 'select * from t664142085Space.temperature';\r\n    // this.config.apiUrl = 'service/datahub/sql?version=v1';\r\n    // this.config.legend = {\r\n    //   icon: 'diamond',\r\n    //   top: '10%',\r\n    //   type: 'scroll'\r\n    // }\r\n    // this.config.listName = 'rows';\r\n    // this.config.aggrList = [];\r\n\r\n  }\r\n\r\n\r\n  //add another stack to the stackList\r\n  //if stackList is empty, add total to the stackList\r\n  //if stackList is not empty, add another stack to the stackList\r\n  stackAdded(stack) {\r\n    this.config.stackList = [];\r\n    if (stack) {\r\n      this.config.stackList.push(new Stack());\r\n      this.config.stackList.push(new Stack());\r\n    } else {\r\n      this.config.stackList.length = 0;\r\n    }\r\n  }\r\n\r\n  deleteStackValue(stack, index) {\r\n    this.config.stackList.splice(index, 1);\r\n  }\r\n  \r\n  //updateStack is called when the user changes the type of chart\r\n  //updateStack is called when the user changes the layout of the chart\r\n  //updateStack is called when the user changes the data source of the chart\r\n  updateStack() {\r\n    if (this.config.apiUrl) {\r\n      if (this.config.type === 'bar') {\r\n        if (this.config.layout === 'stackedBar') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n      if (this.config.type === 'line') {\r\n        if (this.config.layout === 'stackedLine') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addAnotherStack() {\r\n    this.config.stackList.push(new Stack());\r\n  }\r\n  isAggrAdded = false;\r\n  addAnotherAggregate() {\r\n    this.isAggrAdded = true;\r\n    this.config.aggrList.push(new AggregateData());\r\n  }\r\n\r\n  deleteAggrValue(aggr, index) {\r\n    this.config.aggrList.splice(index, 1);\r\n    if (this.config.aggrList.length === 0) {\r\n      this.isAggrAdded = false;\r\n    }\r\n  }\r\n  onSelection(value) {\r\n    this.chartData.chartLayout.filter(val => {\r\n      if (value === val.id) {\r\n        this.chartLayoutData = val.layout;\r\n      }\r\n    })\r\n    this.config.addStack = false;\r\n    \r\n  }\r\n  onLayoutSelection(value) {\r\n    if(value==='simpleBar' || value==='stackedBar'|| value==='simple'||value===\"stacked\" ||value==='simpleScatter'){\r\n      for(let val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n      for(let val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n    }else if(value==='simpleHorizontalBar' || value==='stackedHorizontalBar' || value ==='horizontalScatter'){\r\n      for(let val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n      for(let val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  dataSourceSelection(value) {\r\n    if (value === 'API') {\r\n      this.config.showApiInput = true;\r\n      this.config.showDatahubInput = false;\r\n\r\n    } else if (value === 'datahub') {\r\n      this.config.showDatahubInput = true;\r\n      this.config.showApiInput = false;\r\n\r\n    } else {\r\n      this.config.showApiInput = false;\r\n      this.config.showDatahubInput = false;\r\n    }\r\n  }\r\n  @Output() configData: EventEmitter<any> = new EventEmitter();\r\n\r\n  // if onSelection, onLayoutSelection, dataSourceSelection is called, then submit data and emit config\r\n  SubmitData() {\r\n    // console.log('config', this.config);\r\n\r\n    this.config.aggrList.filter(element => {\r\n      if (element.aggrDimesnion === this.config.groupBy) {\r\n        this.isGroupByInAggregate = true;\r\n      } else {\r\n        this.isGroupByInAggregate = false;\r\n      }\r\n    });\r\n    if (this.config.area === true) {\r\n      this.config.area = {};\r\n    }else {\r\n      this.config.area = null;\r\n    }\r\n    if (!this.isGroupByInAggregate) {\r\n      this.configData.emit(this.config);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CUSTOM_ELEMENTS_SCHEMA, InjectionToken, NgModule } from '@angular/core';\r\nimport { BootstrapComponent, CommonModule, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';\r\nimport { GpSmartEchartWidgetComponent } from './gp-smart-echart-widget.component';\r\nimport * as preview from './preview-image';\r\nimport { NgxEchartsModule } from 'ngx-echarts';\r\nimport { SmartChartConfigComponent } from './smart-chart-config/smart-chart-config.component';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport * as echarts from 'echarts';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  imports: [\r\n    CoreModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts\r\n    }),\r\n  ],\r\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\r\n  providers: [\r\n    GpSmartEchartWidgetService,\r\n    {\r\n        provide:  HOOK_COMPONENTS,\r\n        multi: true,\r\n        useValue: {\r\n            id: 'smart.echart',\r\n            label: 'Smart eChart',\r\n            description: 'linechart derived from api data',\r\n            previewImage: preview.previewImage,\r\n            component: GpSmartEchartWidgetComponent,\r\n            configComponent: SmartChartConfigComponent,\r\n            data : {\r\n                ng1 : {\r\n                    options: { noDeviceTarget: false,\r\n                    noNewWidgets: false,\r\n                    deviceTargetNotRequired: true,\r\n                    groupsSelectable: true\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }],\r\n  exports: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  entryComponents: [GpSmartEchartWidgetComponent,SmartChartConfigComponent]\r\n})\r\nexport class GpSmartEchartWidgetModule { }\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const previewImage = '';"]}