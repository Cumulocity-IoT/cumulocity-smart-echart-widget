{"version":3,"sources":["../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../projects/gp-smart-echart-widget/src/lib/util/extractValueFromJSON.util.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/model/config.modal.ts","../../../../projects/gp-smart-echart-widget/src/lib/smart-chart-config/smart-chart-config.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.module.ts","../../../../projects/gp-smart-echart-widget/src/lib/preview-image.ts"],"names":["GpSmartEchartWidgetService","http","this","prototype","getAPIData","apiUrl","get","Injectable","args","providedIn","HttpClient","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","create","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","extractValueFromJSON","keyArr","parent","obj","keysArray","Array","isArray","resultArray","keysArray_1","keysArray_1_1","keys","split","parentRef","idx","toString","join","GpSmartEchartWidgetComponent","chartService","realTimeService","fetchClient","chartOption","allSubscriptions","realtime","deviceId","isDatahubPostCall","ngOnInit","chartDiv","mapDivRef","nativeElement","createChart","config","dataFromUser","userInput","reloadData","myChart","echarts","init","showLoading","showApiInput","_a","toPromise","serviceData","_c","showDatahubInput","sqlReqObject","sql","sqlQuery","limit","format","fetch","JSON","stringify","method","response","_b","json","isDevMode","console","log","hideLoading","aggrList","resultDimension","getResultDimesions","groupBy","dimensions","encodeData","datasetId","columns","data","type","getDatasetDimensions","yDimensions","xDimensions","yAxisName","xAxisName","yAxisDimension","getFormattedName","xAxisDimension","indexOf","getEncodeData","dataset","id","source","title","text","left","tooltip","trigger","axisPointer","confine","xAxis","name","nameLocation","nameGap","scale","getXAxisType","yAxis","getYAxisType","grid","top","right","bottom","containLabel","legend","icon","width","formatter","a","slice","replace","str","toUpperCase","trim","dataZoom","showZoomFeature","sliderZoom","toolbox","feature","show","saveAsImage","restore","series","yAxisIndex","pieSlicenName","pieSliceValue","angleAxis","startAngle","radiusAxis","min","polar","radarDimensions","seriesData","getRadarSeriesData","indexOfXDimension","indicatorData","radar","indicator","radius","registerTransform","simpleTransform","aggregate","listName","fromDatasetId","transform","resultDimensions","print","selected","detail","getPieChartSeriesData","map","item","getPolarChartSeriesData","xAxisObject","yAxisObject","layout","getScatterChartSeriesData","boxZoom","getHorizontalSeriesData","textStyle","overflow","orient","getSeriesData","input","getChartType","_this","coordinateSystem","showSymbol","encode","angle","showLabel","emphasis","symbolSize","scatterSymbolSize","x","xAxisDimensions_1","xAxisData_1","forEach","focus","itemStyle","shadowOffsetX","shadowColor","yAxisDimensions_1","yAxisData_1","dimensionRecord_1","reduce","acc","dimension","key","values","result1","yAxisData_2","array","stack","getStackName","xAxisData_2","foreach","smooth","smoothLine","areaStyle","area","yAxisData_3","convradius","roseValue","sliceStyle","undefined","pieBorderWidth","pieBorderRadius","borderColor","borderWidth","borderRadius","roseType","avoidLabelOverlap","position","labelLine","shadowBlur","pieSliceName","itemName","xAxisDimensions_2","xAxisData_3","yAxisDimensions_2","yAxisData_4","currentResult","dimensionRecord","indexes","index","element","createObject","dataDim","arr","dimen","yAxisDimensions_3","yAxisData_5","yAxisDimensions","dimensionArr","stackData","dimensionName","stackValues","stackName","list","groupby","changedNamesForResult","from","aggrDimesnion","aggrMethod","val","xAxisIndex","minSpan","height","xAxisDimensions_3","xAxisData_4","xAxisDimensions","Component","selector","template","Realtime","FetchClient","ViewChild","static","Input","Stack","AggregateData","chartValues","chartType","chartLayout","yAxisType","disabled","xAxisType","legendType","aggregateMethod","SmartChartConfigComponent","flag","dataSource","dataSourceValue","addStack","stackList","aggrArr","chartData","isGroupByInAggregate","isAggrAdded","configData","EventEmitter","aggregationMethods","stackAdded","deleteStackValue","splice","updateStack","addAnotherStack","addAnotherAggregate","deleteAggrValue","aggr","onSelection","filter","chartLayoutData","onLayoutSelection","_e","_f","_g","_h","_j","_k","_l","_m","dataSourceSelection","SubmitData","emit","Output","description","previewImage","component","configComponent","ng1","options","noDeviceTarget","noNewWidgets","deviceTargetNotRequired","groupsSelectable","NgModule","declarations","imports","CoreModule","NgxEchartsModule","forRoot","echarts__namespace","schemas","CUSTOM_ELEMENTS_SCHEMA","providers","provide","HOOK_COMPONENTS","multi","useValue","Éµ0","exports","entryComponents"],"mappings":"+hCAwBE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,SAEbD,EAAAG,UAAAC,WAAA,SAAWC,GAChB,OAAOH,KAAKD,KAAKK,IAAID,kJAPxBE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLC,EAAAA,uBCoDOC,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,oBAItDO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAO1C,OAAUgC,EACvJ,SAASM,EAAKK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOb,OACH,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,OAAIe,EAAG,GAAKf,EAAS,SAAOC,EAAID,EAAU,SAAMC,EAAEgB,KAAKjB,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAEgB,KAAKjB,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEb,QACzB2B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEhB,MAAO2B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIW,MAAOf,EAAEG,KAAKY,MAAO,SACxC,QACI,KAAMjB,EAAIE,EAAEG,MAAML,EAAIA,EAAEkB,OAAS,GAAKlB,EAAEA,EAAEkB,OAAS,KAAkB,IAAVJ,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIa,KAAKL,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIW,MAChBf,EAAEG,KAAKY,MAAO,SAEtBH,EAAKjB,EAAKmB,KAAKrC,EAASuB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,UAAeD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE3B,MAAO2B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BL,CAAK,CAACwB,EAAGC,MAyBhCO,OAAOC,gBAYpBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXd,QAAyBA,OAAOC,SAAUc,EAAID,GAAKD,EAAEC,GAAIE,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAET,KAAKO,GACrB,GAAIA,GAAyB,iBAAbA,EAAEL,OAAqB,MAAO,CAC1C7B,KAAM,WAEF,OADIkC,GAAKG,GAAKH,EAAEL,SAAQK,OAAI,GACrB,CAAEpC,MAAOoC,GAAKA,EAAEG,KAAMjC,MAAO8B,KAG5C,MAAM,IAAIR,UAAUS,EAAI,0BAA4B,4CAGxCG,EAAOJ,EAAGX,GACtB,IAAIa,EAAsB,mBAAXf,QAAyBa,EAAEb,OAAOC,UACjD,IAAKc,EAAG,OAAOF,EACf,IAAmBK,EAAYtC,EAA3BoC,EAAID,EAAET,KAAKO,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANjB,GAAgBA,KAAM,MAAQgB,EAAIF,EAAErC,QAAQI,MAAMoC,EAAGV,KAAKS,EAAEzC,OAExE,MAAO2C,GAASxC,EAAI,CAAEwC,MAAOA,WAEzB,IACQF,IAAMA,EAAEnC,OAASgC,EAAIC,EAAU,SAAID,EAAET,KAAKU,WAExC,GAAIpC,EAAG,MAAMA,EAAEwC,OAE7B,OAAOD,WAIKE,IACZ,IAAK,IAAIF,EAAK,GAAIH,EAAI,EAAGA,EAAIM,UAAUd,OAAQQ,IAC3CG,EAAKA,EAAGI,OAAON,EAAOK,UAAUN,KACpC,OAAOG,EAyDcT,OAAOC,gBC7LhBa,EAAqBC,EAAgCC,WAHnDC,EAIRC,EAAYC,MAAMC,QAAQL,GAAUA,EAAS,CAACA,GAC9CM,EAAc,OACpB,IAAqB,IAAAC,EAAApB,EAAAgB,GAASK,EAAAD,EAAArD,QAAAsD,EAAAlD,KAAAkD,EAAAD,EAAArD,OAAE,CAA3B,IACKuD,EADOD,EAAAxD,MACO0D,MAAM,KACtBC,EAAYV,EAChB,GAAoB,IAAhBQ,EAAK1B,OACLuB,EAAYtB,KAAK2B,EAAUF,EAAK,SAC7B,CAEH,IADA,IAAIpD,OAAM,EACDuD,EAAM,EAAGA,EAAMH,EAAK1B,OAAQ6B,IAAO,CAExCvD,EAASsD,EADGF,EAAKG,IAdfV,EAgBW7C,EAfsB,oBAAxC4B,OAAOlD,UAAU8E,SAAShC,KAAKqB,GAgBtBS,EAAYtD,EACCoD,EAAK1B,OAG1BuB,EAAYtB,KAAK3B,sGAGzB,OAAI8C,EAAUpB,OAAS,EACZuB,EAAYQ,KAAK,KAErBR,EAAY,oBCGrB,SAAAS,EAAoBC,EACVC,EAAmCC,GADzBpF,KAAAkF,aAAAA,EACVlF,KAAAmF,gBAAAA,EAAmCnF,KAAAoF,YAAAA,EAP7CpF,KAAAqF,YAA6B,GACnBrF,KAAAsF,iBAAwB,GAClCtF,KAAAuF,UAAW,EACXvF,KAAAwF,SAAW,GAEXxF,KAAAyF,mBAAoB,SAGpBR,EAAAhF,UAAAyF,SAAA,WACE1F,KAAK2F,SAAW3F,KAAK4F,UAAUC,cAC/B7F,KAAK8F,YAAY9F,KAAK+F,SAGxBd,EAAAhF,UAAA+F,aAAA,SAAaC,GACXjG,KAAK8F,YAAYG,IAInBhB,EAAAhF,UAAAiG,WAAA,SAAWD,GACTjG,KAAK8F,YAAYG,IAGbhB,EAAAhF,UAAA6F,YAAA,SAAYG,4IAGVE,EAAUC,EAAQC,KAAKrG,KAAK2F,WAC1BW,cACJL,EAAUM,cACZC,EAAAxG,KAAmB,CAAA,EAAMA,KAAKkF,aAAahF,WAAW+F,EAAU9F,QAAQsG,cADtE,CAAA,EAAA,iBACFD,EAAKE,YAAcC,EAAAxE,2BACV8D,EAAUW,kBACbC,EAAe,CACnBC,IAAKb,EAAUc,SACfC,MAAO,IACPC,OAAQ,UAEO,CAAA,EAAMjH,KAAKoF,YAAY8B,MAAMjB,EAAU9F,OAAQ,CAC9DyB,KAAMuF,KAAKC,UAAUP,GACrBQ,OAAQ,WARD,CAAA,EAAA,UAUU,OAJbC,EAAWX,EAAAxE,OAIjBoF,EAAAvH,KAAmB,CAAA,EAAMsH,EAASE,sBAAlCD,EAAKb,YAAcC,EAAAxE,OACnBnC,KAAKyF,mBAAoB,eAErBgC,EAAAA,aAAeC,QAAQC,IAAI,2CAEjC,GAAI3H,KAAK0G,YAEP,GADAP,EAAQyB,cAC0B,IAA9B3B,EAAU4B,SAAS5E,QAAiBjD,KAAKyF,kBA6XxC,GAAkC,IAA9BQ,EAAU4B,SAAS5E,QAAgBjD,KAAKyF,mBAmB/C,GAjBMqC,EAAkB9H,KAAK+H,mBAAmB9B,EAAU4B,SAAU5B,EAAU+B,SAC1EC,EAAa,GACbC,OAAU,EACRC,EAAY,KAYlBnI,KAAK0G,YAAW5C,EAAA,CAAI9D,KAAK0G,YAAY0B,SAAYpI,KAAK0G,YAAY2B,MAE3C,QAAnBpC,EAAUqC,MAAqC,SAAnBrC,EAAUqC,KACxCL,EAAajI,KAAKuI,qBAAqBtC,GACnCuC,OAAW,EAAMC,OAAW,EAC5BC,EAAY,GAAQC,EAAY,GACe,IAA/C1C,EAAU2C,eAAehE,MAAM,KAAK3B,QACtCuF,EAAcvC,EAAU2C,eACxBX,EAAW/E,KAAKsF,GAChBE,EAAY1I,KAAK6I,iBAAiB5C,EAAU2C,kBAE5CJ,EAAcvC,EAAU2C,eAAehE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeO,GAChCE,EAAY,IAEqC,IAA/CzC,EAAU6C,eAAelE,MAAM,KAAK3B,QACtCwF,EAAcxC,EAAU6C,eACxBb,EAAW/E,KAAKuF,GAChBE,EAAY3I,KAAK6I,iBAAiB5C,EAAU6C,kBAE5CL,EAAcxC,EAAU6C,eAAelE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeQ,GAChCE,EAAY,KAEiC,IAA3CV,EAAWc,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,SAE5BE,EAAalI,KAAKgJ,cAAc/C,EAAWkC,EAAWM,EAAaD,GACnExI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJC,OAAQnJ,KAAK0G,cAGjB0C,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,SAERoB,SAAS,GAEXC,MAAO,CACLC,KAAM3D,EAAU6C,eAChBe,aAAc,SACdC,QAAS,GACTC,OAAO,EACPzB,KAAMtI,KAAKgK,aAAa/D,IAE1BgE,MAAO,CACL3B,KAAMtI,KAAKkK,aAAajE,IAE1BkE,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXM,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCC,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,MAAM,GAERC,YAAa,GACbC,QAAS,KAGbC,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,mDAAoD3H,KAAKqF,kBAErF,GAAuB,YAAnBY,EAAUqC,MAE8B,KAD/CL,EAAajI,KAAKuI,qBAAqBtC,IACxB8C,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,SAExBW,EAAY,GAAQD,EAAY,GAElCC,EADE1C,EAAU6C,eAAelE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU6C,gBAG5CJ,EADEzC,EAAU2C,eAAehE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU2C,gBAE9CV,EAAalI,KAAKgJ,cAAc/C,EAAWkC,GAC3CnI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJC,OAAQnJ,KAAK0G,cAGjB0C,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPa,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXjB,MAAO,CACLC,KAAMjB,EACNkB,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKgK,aAAa/D,IAE1BgE,MAAO,CACLL,KAAMlB,EACNmB,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKkK,aAAajE,IAE1BsD,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,SAERoB,SAAS,GAEXwB,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCC,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,MAAM,EACNI,WAAY,QAEdF,QAAS,GACTD,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,gDAAiD3H,KAAKqF,kBAElF,GAAuB,QAAnBY,EAAUqC,KACjBL,EAAa,CAAChC,EAAU2F,cAAe3F,EAAU4F,eACjD3D,EAAalI,KAAKgJ,cAAc/C,EAAWkC,GAC3CnI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJC,OAAQnJ,KAAK0G,cAGjB0C,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTE,SAAS,GAEXS,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MAAOd,KAAM,OAClBhB,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXS,QAAS,CACPC,QAAS,CACPE,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,4CAA6C3H,KAAKqF,kBAE9E,GAAuB,UAAnBY,EAAUqC,KACbE,OAAW,EAAMC,OAAW,EACmB,IAA/CxC,EAAU2C,eAAehE,MAAM,KAAK3B,QACtCuF,EAAcvC,EAAU2C,eACxBX,EAAW/E,KAAKsF,KAEhBA,EAAcvC,EAAU2C,eAAehE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeO,IAEiB,IAA/CvC,EAAU6C,eAAelE,MAAM,KAAK3B,QACtCwF,EAAcxC,EAAU6C,eACxBb,EAAW/E,KAAKuF,KAEhBA,EAAcxC,EAAU6C,eAAelE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeQ,KAEa,IAA3CR,EAAWc,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,SAE5BE,EAAalI,KAAKgJ,cAAc/C,EAAWkC,EAAWM,EAAaD,GACnExI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJC,OAAQnJ,KAAK0G,cAGjB0C,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,UAGV6B,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBuB,UAAW,CACTxD,KAAM,QACNyD,WAAY,GAEdC,WAAY,CACVC,IAAK,GAEPC,MAAO,GACP1B,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MAAOd,KAAM,OAClBhB,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXS,QAAS,CACPC,QAAS,CACPE,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,8CAA+C3H,KAAKqF,kBAEhF,GAAuB,UAAnBY,EAAUqC,KAAkB,CAKnC,IAJAL,EAAUnE,EAAOmC,EAAUkG,iBAC3BnM,KAAKoM,WAAapM,KAAKqM,mBAAmBpG,GACpCqG,EAAoBtM,KAAK0G,YAAY,GAAGqC,QAAQ9C,EAAU6C,gBAC1DyD,EAAgB,GACb9I,EAAI,EAAGA,EAAIzD,KAAK0G,YAAYzD,OAAQQ,IAC3C8I,EAAcrJ,KAAK,CAAE0G,KAAM5J,KAAK0G,YAAYjD,GAAG6I,KAEjDtM,KAAKqF,YAAc,CACjB+D,MAAM,CACJC,KAAKpD,EAAUmD,MACfE,KAAK,UAEPkB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MAAOd,KAAM,OAClBhB,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXrB,QAAS,CACPC,QAAS,QAEXgD,MAAO,CACLC,UAAWF,EACXG,OAAO,KAEThB,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPE,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,8CAA+C3H,KAAKqF,mBAG9EY,EAAU4B,SAAS5E,OAAS,IAEnCmD,EAAQuG,kBAAkBC,EAAgBC,WACpC/E,EAAkB9H,KAAK+H,mBAAmB9B,EAAU4B,SAAU5B,EAAU+B,SAC1EC,EAAa,GACbC,OAAU,EACRC,EAAY,aAEdnI,KAAKyF,kBAYPzF,KAAK0G,YAAW5C,EAAA,CAAI9D,KAAK0G,YAAY0B,SAAYpI,KAAK0G,YAAY2B,MAalErI,KAAK0G,YAAc1G,KAAK0G,YAAYT,EAAU6G,UAEzB,QAAnB7G,EAAUqC,MAAqC,SAAnBrC,EAAUqC,MACpCE,OAAW,EAAMC,OAAW,EAC5BE,EAAY,GAAQD,EAAY,GAChC1I,KAAKyF,kBACPwC,EAAa,MAEsC,IAA/ChC,EAAU2C,eAAehE,MAAM,KAAK3B,QACtCuF,EAAcvC,EAAU2C,eACxBX,EAAW/E,KAAKsF,GAChBE,EAAY1I,KAAK6I,iBAAiB5C,EAAU2C,kBAE5CJ,EAAcvC,EAAU2C,eAAehE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeO,GAChCE,EAAY,IAEqC,IAA/CzC,EAAU6C,eAAelE,MAAM,KAAK3B,QACtCwF,EAAcxC,EAAU6C,eACxBb,EAAW/E,KAAKuF,GAChBE,EAAY3I,KAAK6I,iBAAiB5C,EAAU6C,kBAE5CL,EAAcxC,EAAU6C,eAAelE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeQ,GAChCE,EAAY,KAEiC,IAA3CV,EAAWc,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,UAG9BE,EAAalI,KAAKgJ,cAAc/C,EAAWkC,EAAWM,EAAaD,GACnExI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJjB,WAAUA,EACVkB,OAAQnJ,KAAK0G,aAEf,CACEwC,GAAI,aACJ6D,cAAe,WACfC,UAAW,CACT,CACE1E,KAAM,8BACNvC,OAAQ,CACNkH,iBACEnF,EACFE,QAAS/B,EAAU+B,SAErBkF,OAAO,MAKf9D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,SAERoB,SAAS,GAEXC,MAAO,CACLC,KAAMjB,EACNkB,aAAc,SACdC,QAAS,GACTC,OAAO,EACPzB,KAAMtI,KAAKgK,aAAa/D,IAE1BgE,MAAO,CACL3B,KAAMtI,KAAKkK,aAAajE,GACxB2D,KAAMlB,GAERyB,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXM,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCC,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,MAAM,GAERC,YAAa,GACbC,QAAS,KAGbC,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,8BAA+B3H,KAAKqF,cAEzC,YAAnBY,EAAUqC,MACbtI,KAAKyF,kBACPwC,EAAa,MAGkC,KAD/CA,EAAajI,KAAKuI,qBAAqBtC,IACxB8C,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,SAG1BW,EAAY,GAAQD,EAAY,GAElCC,EADE1C,EAAU6C,eAAelE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU6C,gBAG5CJ,EADEzC,EAAU2C,eAAehE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU2C,gBAE9CV,EAAalI,KAAKgJ,cAAc/C,EAAWkC,GAC3CnI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJjB,WAAUA,EACVkB,OAAQnJ,KAAK0G,aAEf,CACEwC,GAAI,aACJ6D,cAAe,WACfC,UAAW,CACT,CACE1E,KAAM,8BACNvC,OAAQ,CACNkH,iBAAkBnF,EAClBE,QAAS/B,EAAU+B,SAErBkF,OAAO,MAKf9D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPa,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBZ,MAAO,CACLC,KAAMjB,EACNkB,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKgK,aAAa/D,IAE1BgE,MAAO,CACLL,KAAMlB,EACNmB,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKkK,aAAajE,IAE1BsD,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,UAGVkC,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXM,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCC,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,MAAM,EACNI,WAAY,QAEdF,QAAS,GACTD,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,0BAA2B3H,KAAKqF,cAErC,QAAnBY,EAAUqC,MAEfL,EADEjI,KAAKyF,kBACM,KAEA,CAACQ,EAAU2F,cAAe3F,EAAU4F,eAEnD3D,EAAalI,KAAKgJ,cAAc/C,EAAWkC,GAC3CnI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJjB,WAAUA,EACVkB,OAAQnJ,KAAK0G,aAEf,CACEwC,GAAI,aACJ6D,cAAe,WACfC,UAAW,CACT,CACE1E,KAAM,8BACNvC,OAAQ,CACNkH,iBACEnF,EACFE,QAAS/B,EAAU+B,SAErBkF,OAAO,MAKf9D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTE,SAAS,GAEXS,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACN2C,SAAU,CAAEC,QAAQ,GACpB9E,KAAM,SACNmC,KAAMxE,EAAUuE,OAAOC,KACvBnB,KAAM,OACNc,IAAK,MACLO,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAG7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXS,QAAS,CACPC,QAAS,CACPE,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,sBAAuB3H,KAAKqF,cAEjC,UAAnBY,EAAUqC,OACbE,OAAW,EAAMC,OAAW,EAC5BzI,KAAKyF,kBACPwC,EAAa,MAEsC,IAA/ChC,EAAU2C,eAAehE,MAAM,KAAK3B,QACtCuF,EAAcvC,EAAU2C,eACxBX,EAAW/E,KAAKsF,KAEhBA,EAAcvC,EAAU2C,eAAehE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeO,IAEiB,IAA/CvC,EAAU6C,eAAelE,MAAM,KAAK3B,QACtCwF,EAAcxC,EAAU6C,eACxBb,EAAW/E,KAAKuF,KAEhBA,EAAcxC,EAAU6C,eAAelE,MAAM,KAC7CqD,EAAUnE,EAAOmE,EAAeQ,KAEa,IAA3CR,EAAWc,QAAQ9C,EAAU+B,UAC/BC,EAAW/E,KAAK+C,EAAU+B,UAG9BE,EAAalI,KAAKgJ,cAAc/C,EAAWkC,EAAWM,EAAaD,GACnExI,KAAKqF,YAAc,CACjB4D,QAAS,CACP,CACEC,GAAI,WACJjB,WAAUA,EACVkB,OAAQnJ,KAAK0G,aAEf,CACEwC,GAAI,aACJ6D,cAAe,WACfC,UAAW,CACT,CACE1E,KAAM,8BACNvC,OAAQ,CACNkH,iBACEnF,EACFE,QAAS/B,EAAU+B,SAErBkF,OAAO,MAKf9D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,UAGV6B,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBuB,UAAW,CACTxD,KAAM,QACNyD,WAAY,GAEdC,WAAY,CACVC,IAAK,GAEPC,MAAO,GACP1B,OAAQ,CACN2C,SAAU,CAAEC,QAAQ,GACpB9E,KAAM,SACNmC,KAAMxE,EAAUuE,OAAOC,KACvBnB,KAAM,OACNc,IAAK,MACLO,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXS,QAAS,CACPC,QAAS,CACPE,YAAa,KAGjBE,OAAQxD,GAENT,EAAAA,aAAeC,QAAQC,IAAI,wBAAyB3H,KAAKqF,mBAnoCxC,QAAnBY,EAAUqC,MACZtI,KAAKoM,WAAapM,KAAKqN,sBAAsBpH,GAC7CjG,KAAKqF,YAAc,CACjB+D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPkB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GACrB,GAAGC,QAAQ,WAAY,OAEnCA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEvC,OADAJ,EAAEK,OACKL,IAGXjB,MAAO,CACL4B,MAAM,EACNlD,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU6C,oBAG1BmB,MAAO,CACL3B,KAAM,SAERiB,QAAS,CACPC,QAAS,QAEXkC,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPE,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,oBAAqB3H,KAAKqF,cAG/B,UAAnBY,EAAUqC,MACjBtI,KAAKoM,WAAapM,KAAKwN,wBAAwBvH,GAC/CjG,KAAKqF,YAAc,CACjB+D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPkB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXT,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhB2B,MAAO,GACP3C,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,SAERoB,SAAS,GAEXoC,UAAW,CACTxD,KAAM,QACNyD,WAAY,GAEdC,WAAY,CACVC,IAAK,GAEPP,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPE,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,sBAAuB3H,KAAKqF,cAGjC,YAAnBY,EAAUqC,MACbmF,OAAW,EAAMC,OAAW,EACP,sBAArBzH,EAAU0H,QACZF,EAAc,CACZ7D,KAAM5J,KAAK6I,iBAAiB5C,EAAU6C,gBACtCe,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKgK,aAAa/D,IAE1ByH,EAAc,CACZ9D,KAAM5J,KAAK6I,iBAAiB5C,EAAU2C,gBACtCiB,aAAc,SACdC,QAAS,GACTzB,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU2C,mBAExBN,KAAMtI,KAAKkK,aAAajE,MAG1BwH,EAAc,CACZ7D,KAAM5J,KAAK6I,iBAAiB5C,EAAU6C,gBACtCe,aAAc,SACdC,QAAS,GACTzB,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU6C,mBAExBR,KAAMtI,KAAKgK,aAAa/D,IAE1ByH,EAAc,CACZ9D,KAAM5J,KAAK6I,iBAAiB5C,EAAU2C,gBACtCiB,aAAc,SACdC,QAAS,GACTxB,KAAMtI,KAAKkK,aAAajE,KAG5BjG,KAAKoM,WAAapM,KAAK4N,0BAA0B3H,GACjDjG,KAAKqF,YAAc,CACjB+D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPa,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBZ,MAAO8D,EACPxD,MAAOyD,EACPnE,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,UAGV+C,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,KAAMtF,EAAU4H,QAChBlC,WAAY,QAEdF,QAAS,GACTD,YAAa,KAGjBhB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXM,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCM,OAAQ1L,KAAKoM,YAEX3E,EAAAA,aAAeC,QAAQC,IAAI,wBAAyB3H,KAAKqF,cAEnC,UAAnBY,EAAUqC,MACjBtI,KAAKoM,WAAapM,KAAKqM,mBAAmBpG,GAC1CjG,KAAKqF,YAAc,CACjB+D,MAAM,CACJC,KAAKpD,EAAUmD,MACfE,KAAK,UAEPkB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXrB,QAAS,CACPC,QAAS,OACTE,SAAQ,GAEVS,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBiC,MAAO,CACLC,UAAWzM,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GACnD,MAAO,CAAE3D,KAAM2D,EAAKtH,EAAU6C,oBAEhC4D,OAAO,KAEThB,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPE,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,sBAAuB3H,KAAKqF,cAEhC,SAAnBY,EAAUqC,MAAsC,QAAnBrC,EAAUqC,MACtB,wBAArBrC,EAAU0H,QAAyD,yBAArB1H,EAAU0H,OA0ElC,QAAnB1H,EAAUqC,MAAwC,wBAArBrC,EAAU0H,QAAyD,yBAArB1H,EAAU0H,SACxFhF,OAAS,EAAMD,OAAS,EAE1BC,EADE1C,EAAU6C,eAAelE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU6C,gBAG5CJ,EADEzC,EAAU2C,eAAehE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU2C,gBAE9C5I,KAAKoM,WAAapM,KAAK8N,wBAAwB7H,GAC/CjG,KAAKqF,YACL,CACE+D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAM,SACNyE,UAAW,CACTC,SAAU,aAGd7D,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBC,OAAQ,CACNe,MAAM,EACNd,KAAMxE,EAAUuE,OAAOC,KACvBwD,OAAQ,aACR7D,IAAK,MACLO,UAAS,SAACf,GAMR,OALaA,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,kBAG3C1C,KAAM,UAER4C,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCzB,MAAO,CAELrB,KAAMtI,KAAKgK,aAAa/D,IAE1BgE,MAAO,CAEL3B,KAAMtI,KAAKkK,aAAajE,GACxBoC,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAE9C,OADYtJ,EAAqBgC,EAAU2C,eAAgB2E,OAI/D7B,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,MAAM,EACNI,WAAY,QAEdF,QAAS,GACTD,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,2BAA4B3H,KAAKqF,eA9IhErF,KAAKoM,WAAapM,KAAKkO,cAAcjI,GACjC0C,OAAS,EAAMD,OAAS,EAE1BC,EADE1C,EAAU6C,eAAelE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU6C,gBAG5CJ,EADEzC,EAAU2C,eAAehE,MAAM,KAAK3B,OAAS,EACnC,GAEAjD,KAAK6I,iBAAiB5C,EAAU2C,gBAE9C5I,KAAKqF,YAAc,CACjB+D,MAAO,CACLC,KAAMpD,EAAUmD,MAChBE,KAAK,UAEPkB,OAAQ,CACNC,KAAMxE,EAAUuE,OAAOC,KACvBC,MAAO,IACPN,IAAK,MACL9B,KAAM,SACNqC,UAAS,SAACf,GACR,IACMgB,EADOhB,EAAKhF,MAAM,KAAKiG,OAAO,GAE7B,GAAGC,QAAQ,WAAY,OAEzBA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAEzC,OADAJ,EAAEK,OACKL,IAGXrB,QAAS,CACPC,QAAS,OACTC,YAAa,CACXnB,KAAM,SAERoB,SAAS,GAEXwB,SAAUlL,KAAKmL,gBAAgBlF,EAAUmF,YACzCjB,KAAM,CACJb,KAAM,MACNc,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,cAAc,GAEhBZ,MAAO,CACLtB,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU6C,mBAExBR,KAAMtI,KAAKgK,aAAa/D,IAG1BgE,MAAO,CACL3B,KAAMtI,KAAKkK,aAAajE,IAG1ByF,OAAQ1L,KAAKoM,WACbf,QAAS,CACPC,QAAS,CACPJ,SAAU,CACRK,KAAMtF,EAAU4H,QAChBlC,WAAY,QAEdF,QAAS,GACTD,YAAa,MAIf/D,EAAAA,aAAeC,QAAQC,IAAI,mCAAoC3H,KAAKqF,gCA01BhFJ,EAAAhF,UAAA+J,aAAA,SAAamE,GACX,OAAOA,EAAMxE,OAEf1E,EAAAhF,UAAAiK,aAAA,SAAaiE,GACX,OAAOA,EAAMlE,OAEfhF,EAAAhF,UAAAmO,aAAA,SAAaD,GACX,OAAOA,EAAM7F,MAEfrD,EAAAhF,UAAA4I,iBAAA,SAAiBsF,GAKf,OAJaA,EAAMvJ,MAAM,KAAKiG,OAAO,GACtB,GAAGC,QAAQ,WAAY,OAEnCA,QAAQ,MAAM,SAACC,GAAU,OAAOA,EAAIC,iBAC9BC,QAEXhG,EAAAhF,UAAA+I,cAAA,SAAc/C,EAAWkC,EAAYM,EAAcD,GAAnD,IAAA6F,EAAArO,KACE,GAAuB,UAAnBiG,EAAUqC,KACZ,MAAO,CAAC,CACNgG,iBAAkB,QAClB1E,KAAM3D,EAAU6C,eAChBR,KAAMrC,EAAU0H,OAChBY,YAAY,EACZC,OAAQ,CACN9B,OAAQzG,EAAU2C,eAClB6F,MAAOxI,EAAU6C,eACjBS,QAAS,CAACtD,EAAU2C,eAAgB3C,EAAU6C,iBAEhD5G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRzM,MAAO,CACLqJ,MAAM,MAKT,GAAuB,YAAnBtF,EAAUqC,KAAoB,CACrC,GAAyB,sBAArBrC,EAAU0H,OAAgC,CAC5C,GAAmD,IAA/C1H,EAAU6C,eAAelE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtB1G,UAASA,EACTqG,OAAQ,CACN1M,EAAGmE,EAAU2C,eACbkG,EAAG7I,EAAU6C,eACbS,QAAS,CAACtD,EAAU6C,eAAgB7C,EAAU2C,mBAIlD,IAAMmG,EAAkB9I,EAAU6C,eAAelE,MAAM,KACjDoK,EAAY,GA0BlB,OAzBAD,EAAgBE,SAAQ,SAAAxL,GACtBuL,EAAUvL,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtB1G,UAASA,EACTqG,OAAQ,CACN1M,EAAGmE,EAAU2C,eACbkG,EAAGC,EAAgBtL,GACnB8F,QAAS,CAACwF,EAAgBtL,GAAIwC,EAAU2C,iBAE1C1G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,2BAKdL,EAGT,GAAmD,IAA/C/I,EAAU2C,eAAehE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtB1G,UAASA,EACTqG,OAAQ,CACN1M,EAAGmE,EAAU2C,eACbkG,EAAG7I,EAAU6C,eACbS,QAAS,CAACtD,EAAU6C,eAAgB7C,EAAU2C,iBAEhD1G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,yBAKnB,IAAMC,EAAkBrJ,EAAU2C,eAAehE,MAAM,KACjD2K,EAAY,GA0BlB,OAzBAD,EAAgBL,SAAQ,SAAAxL,GACtB8L,EAAU9L,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtB1G,UAASA,EACTqG,OAAQ,CACN1M,EAAGmE,EAAU2C,eACbkG,EAAGQ,EAAgB7L,GACnB8F,QAAS,CAAC+F,EAAgB7L,GAAIwC,EAAU2C,iBAE1C1G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,2BAKdE,EAIR,GAAuB,UAAnBtJ,EAAUqC,KAAkB,CACnC,IACMkH,EADavJ,EAAUkG,gBAAgBvH,MAAM,KAChB6K,QAAO,SAACC,EAAKC,GAE9C,OADAD,EAAIC,GAAa,GACVD,IACN,IACH1P,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GACxCpK,OAAOwB,KAAK4I,GAAM0B,SAAQ,SAAAW,GACpBJ,EAAgBI,IAClBJ,EAAgBI,GAAK1M,KAAKqK,EAAKqC,UAInBzM,OAAO0M,OAAOL,GAAhC,IACMM,EAAU3M,OAAOwB,KAAK6K,GAAiBlC,KAAI,SAAAsC,GAAO,MAAA,CACtDhG,KAAMgG,EACN1O,MAAOsO,EAAgBI,OAEzB,MAAO,CAAC,CACNhG,KAAM3D,EAAU6G,SAChBxE,KAAM,QACND,KAAMyH,IAGL,GAAuB,QAAnB7J,EAAUqC,OAAwC,cAArBrC,EAAU0H,QAA+C,eAArB1H,EAAU0H,QAA0B,CAC5G,GAAmD,IAA/C1H,EAAU2C,eAAehE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBH,UAASA,EACTyB,KAAMpB,EACNgG,OAAQ,CACNM,EAAGrG,EACH3G,EAAG0G,KAIP,IAAMuH,EAAY,GAalB,OAZAvH,EAAYwH,MAAMf,SAAQ,SAAAxL,GACxBsM,EAAUtM,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBH,UAASA,EACT8H,MAAO5B,EAAK6B,aAAajK,EAAUgK,MAAOzH,EAAY/E,IACtDmG,KAAMpB,EAAY/E,GAClB+K,OAAQ,CACNM,EAAGrG,EACH3G,EAAG0G,EAAY/E,QAIdsM,EAGN,GAAuB,QAAnB9J,EAAUqC,OAAwC,wBAArBrC,EAAU0H,QAAyD,yBAArB1H,EAAU0H,QAAoC,CAChI,GAAmD,IAA/C1H,EAAU6C,eAAelE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBH,UAASA,EACTyB,KAAMnB,EACN+F,OAAQ,CACNM,EAAGrG,EACH3G,EAAG0G,KAIP,IAAM2H,EAAY,GAalB,OAZA1H,EAAY2H,SAAQ,SAAA3M,GAClB0M,EAAU1M,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBH,UAASA,EACT8H,MAAO5B,EAAK6B,aAAajK,EAAUgK,MAAOxH,EAAYhF,IACtDmG,KAAMnB,EAAYhF,GAClB+K,OAAQ,CACNM,EAAGrG,EAAYhF,GACf3B,EAAG0G,OAIF2H,EAGN,GAAuB,SAAnBlK,EAAUqC,KAAiB,CAClC,GAAmD,IAA/CrC,EAAU2C,eAAehE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBH,UAASA,EACTkI,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,KACrB5G,KAAMpB,EACNgG,OAAQ,CACNM,EAAGrG,EACH3G,EAAG0G,KAIP,IAAMiI,EAAY,GAclB,OAbAjI,EAAYyG,SAAQ,SAAAxL,GAClBgN,EAAUhN,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBH,UAASA,EACTkI,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,KACrB5G,KAAMpB,EAAY/E,GAClB+K,OAAQ,CACNM,EAAGrG,EACH3G,EAAG0G,EAAY/E,QAIdgN,EAGN,GAAuB,QAAnBxK,EAAUqC,KAAgB,CACjC,IAAMoI,EAAazK,EAAUyG,OAAO9H,MAAM,KACtC+L,EAAY,GAAQC,OAAU,EAsBlC,MArByB,aAArB3K,EAAU0H,SACZgD,EAAY,QAGZC,OAD+BC,IAA7B5K,EAAU6K,qBAA8DD,IAA9B5K,EAAU8K,gBACzC,GACJ9K,EAAU6K,eAAiB,QAAmCD,IAA9B5K,EAAU8K,gBACtC,CACXC,YAAa,OACbC,YAAahL,EAAU6K,qBAEaD,IAA7B5K,EAAU6K,gBAAgC7K,EAAU8K,gBAAkB,EAClE,CACXG,aAAcjL,EAAU8K,iBAGb,CACXG,aAAcjL,EAAU8K,gBACxBC,YAAa,OACbC,YAAahL,EAAU6K,gBAGpB,CAAC,CACNxI,KAAMrC,EAAUqC,KAChBH,UAASA,EACTuE,OAAQgE,EACRS,SAAUR,EACVS,mBAAmB,EACnBlP,MAAO,CACLqJ,MAAM,EACN8F,SAAU,UAEZC,UAAW,CACT/F,MAAM,GAER4D,UAAWyB,EACXjC,SAAU,CACRQ,UAAW,CACToC,WAAY,GACZnC,cAAe,EACfC,YAAa,uBAGjBzF,KAAM3D,EAAUuL,aAChBhD,OAAQ,CACNiD,SAAU,CAACxL,EAAU2F,eACrB1K,MAAO+E,EAAU4F,mBAMzB5G,EAAAhF,UAAA2N,0BAAA,SAA0B3H,GAA1B,IAAAoI,EAAArO,KACE,GAAyB,sBAArBiG,EAAU0H,OAAgC,CAC5C,GAAmD,IAA/C1H,EAAU6C,eAAelE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtBxG,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU6C,mBAExB5G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,yBAKnB,IAAMqC,EAAkBzL,EAAU6C,eAAelE,MAAM,KACjD+M,EAAY,GAuBlB,OAtBAD,EAAgBzC,SAAQ,SAAAxL,GACtBkO,EAAUlO,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtBxG,KAAMgG,EAAK3H,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKmE,EAAgBjO,OAE9BvB,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,2BAKdsC,EAGT,GAAmD,IAA/C1L,EAAU2C,eAAehE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACNqF,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtBxG,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU2C,mBAExB1G,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,yBAKnB,IAAMuC,EAAkB3L,EAAU2C,eAAehE,MAAM,KACjDiN,EAAY,GAuBlB,OAtBAD,EAAgB3C,SAAQ,SAAAxL,GACtBoO,EAAUpO,GAAK,CACb6E,KAAMrC,EAAUqC,KAChBsG,WAAY3I,EAAU4I,kBACtBxG,KAAMgG,EAAK3H,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKqE,EAAgBnO,OAE9BvB,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,GAER4D,UAAW,CACTC,cAAe,EACfC,YAAa,2BAKdwC,GAKb5M,EAAAhF,UAAAuN,wBAAA,SAAwBvH,GACtB,IAAM1E,EAAS,GAOf,OANAvB,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GACxC,IAAMuE,EAAgB,GACtBA,EAAc5O,KAAKqK,EAAKtH,EAAU6C,iBAClCgJ,EAAc5O,KAAKqK,EAAKtH,EAAU2C,iBAClCrH,EAAO2B,KAAK4O,MAEP,CAAC,CACNxD,iBAAkB,QAClB1E,KAAM3D,EAAU6C,eAChBR,KAAMrC,EAAU0H,OAChBY,YAAY,EACZlG,KAAM9G,EACNW,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRzM,MAAO,CACLqJ,MAAM,OAMdtG,EAAAhF,UAAAoM,mBAAA,SAAmBpG,GAAnB,IAAAoI,EAAArO,KACQiI,EAAahC,EAAUkG,gBAAgBvH,MAAM,KAC7CmN,EAAkB9J,EAAWwH,QAAO,SAACC,EAAKC,GAE9C,OADAD,EAAIC,GAAa,GACVD,IACN,IACH,GAAIzJ,EAAU6G,YAAY9M,KAAK0G,YAC7B1G,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GACxCpK,OAAOwB,KAAK4I,GAAM0B,SAAQ,SAAAW,GACpBmC,EAAgBnC,IAClBmC,EAAgBnC,GAAK1M,KAAKqK,EAAKqC,eASrC,IAJA,IAAMoC,EAAU/J,EAAWqF,KAAI,SAAC1K,EAAGqP,GAEjC,MAAO,CAAErC,IADGhN,EACO1B,MAAOmN,EAAK3H,YAAY,GAAGqC,QAAQnG,kBAE/Ca,GACPuO,EAAQ/C,SAAQ,SAAAiD,GACdH,EAAgBG,EAAQtC,KAAK1M,KAAKmL,EAAK3H,YAAYjD,GAAGyO,EAAQhR,YAFzDuC,EAAI,EAAGA,EAAIzD,KAAK0G,YAAYzD,OAAQQ,MAApCA,GAMX,IAAMqM,EAAU3M,OAAOwB,KAAKoN,GAAiBzE,KAAI,SAAAsC,GAAO,MAAA,CACtDhG,KAAMgG,EACN1O,MAAO6Q,EAAgBnC,OAEzB,OAAI3J,EAAU6G,YAAY9M,KAAK0G,YACtB,CAAC,CACNkD,KAAM3D,EAAU6G,SAChBxE,KAAM,QACND,KAAMyH,IAGD,CAAC,CACNxH,KAAM,QACND,KAAMyH,KAIZ7K,EAAAhF,UAAAkS,aAAA,SAAaC,EAASC,EAAKC,GACzB,IAAMrK,EAAaqK,EAAM1N,MAAM,KACzBmN,EAAkB9J,EAAWwH,QAAO,SAACC,EAAKC,GAE9C,OADAD,EAAIC,GAAa,GACVD,IACN,IACGsC,EAAU/J,EAAWqF,KAAI,SAAC1K,EAAGqP,GAEjC,MAAO,CAAErC,IADGhN,EACO1B,MAAOkR,EAAQrJ,QAAQnG,OAE5CyP,EAAI/E,KAAI,SAACC,EAAM0E,GACbD,EAAQrN,KAAKsK,SAAQ,SAAAiD,GACnBH,EAAgBG,EAAQtC,KAAK1M,KAAKqK,EAAK2E,EAAQhR,eAKrD+D,EAAAhF,UAAAoN,sBAAA,SAAsBpH,GAEpB,IACwB2K,EADlBF,EAAazK,EAAUyG,OAAO9H,MAAM,KACtC+L,EAAY,GAuBhB,MAtByB,aAArB1K,EAAU0H,SACZgD,EAAY,QAGZC,OAD+BC,IAA7B5K,EAAU6K,qBAA8DD,IAA9B5K,EAAU8K,gBACzC,GAEN9K,EAAU6K,eAAiB,QAAmCD,IAA9B5K,EAAU8K,gBACpC,CACXC,YAAa,OACbC,YAAahL,EAAU6K,qBAEaD,IAA7B5K,EAAU6K,gBAAgC7K,EAAU8K,gBAAkB,EAClE,CACXG,aAAcjL,EAAU8K,iBAGb,CACXG,aAAcjL,EAAU8K,gBACxBC,YAAa,OACbC,YAAahL,EAAU6K,gBAGpB,CAAC,CACNlH,KAAM3D,EAAU6G,SAChBxE,KAAM,MACNoE,OAAQgE,EACRS,SAAUR,EACVS,mBAAmB,EACnBlP,MAAO,CACLqJ,MAAM,EACN8F,SAAU,UAEZC,UAAW,CACT/F,MAAM,GAER4D,UAAWyB,EACXjC,SAAU,CACRQ,UAAW,CACToC,WAAY,GACZnC,cAAe,EACfC,YAAa,uBAGjBhH,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAS9C,MAAO,CACLrM,MARUqM,EAAKtH,EAAU4F,eASzBjC,KAPE3D,EAAU4F,gBAAkB5F,EAAU2F,cAClC3F,EAAU2F,cAEV2B,EAAKtH,EAAU2F,sBAW7B3G,EAAAhF,UAAAiO,cAAA,SAAcjI,GAAd,IAAAoI,EAAArO,KACE,GAAmD,IAA/CiG,EAAU2C,eAAehE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACN2G,KAAM5J,KAAK6I,iBAAiB5C,EAAU2C,gBACtCP,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKtH,EAAU2C,mBAExBN,KAAMrC,EAAUqC,KAChB+H,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,OAGvB,IAAM+B,EAAkBtM,EAAU2C,eAAehE,MAAM,KACjD4N,EAAY,GAgBlB,OAfAD,EAAgBtD,SAAQ,SAAAxL,GACtB+O,EAAU/O,GAAK,CACbmG,KAAMyE,EAAKxF,iBAAiB5C,EAAUwM,gBAAgBhP,IACtDwM,MAAO5B,EAAK6B,aAAajK,EAAUgK,MAAOsC,EAAgB9O,IAC1DkL,SAAU,CACRO,MAAO,UAET7G,KAAMgG,EAAK3H,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAC9C,OAAOA,EAAKgF,EAAgB9O,OAE9B6E,KAAMrC,EAAUqC,KAChB+H,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,SAGlBgC,GAIXvN,EAAAhF,UAAAsI,qBAAA,SAAqBtC,GACnB,IAAIuC,EAAiBC,EAAiBiK,EAAe,GAerD,OAdmD,IAA/CzM,EAAU2C,eAAehE,MAAM,KAAK3B,QACtCuF,EAAcvC,EAAU2C,eACxB8J,EAAaxP,KAAKsF,IAGlBkK,EAAY5O,EAAO4O,EADnBlK,EAAcvC,EAAU2C,eAAehE,MAAM,MAGI,IAA/CqB,EAAU6C,eAAelE,MAAM,KAAK3B,QACtCwF,EAAcxC,EAAU6C,eACxB4J,EAAaxP,KAAKuF,IAGlBiK,EAAY5O,EAAO4O,EADnBjK,EAAcxC,EAAU6C,eAAelE,MAAM,MAGxC8N,GAMTzN,EAAAhF,UAAAiQ,aAAA,SAAayC,EAAWC,GAEtBD,EAAU1D,SAAQ,SAAAH,GAChB,IAAMe,EAAS8C,EAAU7D,GAAG+D,YAAYjO,MAAM,KAC9C,IAAK,IAAMnB,KAAKoM,EACd,GAAIA,EAAOpM,KAAOmP,EAEhB,OADSD,EAAU7D,GAAGgE,cAS9B7N,EAAAhF,UAAA8H,mBAAA,SAAmBgL,EAAMC,GACvB,IAAMC,EAAwBF,EAAKzF,KAAI,SAAC9G,GAGlC,MAAA,CACJ0M,KAHmB1M,EAAA2M,cAInB9L,OAHkBb,EAAA4M,eAMpB,OADAH,EAAsB/P,KAAK,CAAEgQ,KAAMF,IAC5BC,GAGThO,EAAAhF,UAAAkL,gBAAA,SAAgBkI,GACd,OAAIA,EACK,CACL,CACE/K,KAAM,SACNgL,WAAY,EACZC,QAAS,GAEX,CACEjL,KAAM,SACNgL,WAAY,EACZC,QAAS,EACThI,MAAM,EACNiI,OAAQ,GACRpJ,IAAK,QAIF,IAIXnF,EAAAhF,UAAA6N,wBAAA,SAAwB7H,GAAxB,IAAAoI,EAAArO,KACE,GAAmD,IAA/CiG,EAAU6C,eAAelE,MAAM,KAAK3B,OACtC,MAAO,CAAC,CACN2G,KAAM5J,KAAK6I,iBAAiB5C,EAAU6C,gBACtCT,KAAMrI,KAAK0G,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAE9C,OADYtJ,EAAqBgC,EAAU6C,eAAgByE,MAG7DrL,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRO,MAAO,SACPhN,MAAO,CACLqJ,MAAM,IAGVjD,KAAMrC,EAAUqC,KAChB+H,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,OAGvB,IAAMiD,EAAkBxN,EAAU6C,eAAelE,MAAM,KACjD8O,EAAY,GAsBlB,OArBAD,EAAgBxE,SAAQ,SAAAxL,GACtBiQ,EAAUjQ,GAAK,CACbmG,KAAMyE,EAAKxF,iBAAiB5C,EAAU0N,gBAAgBlQ,IACtDwM,MAAO5B,EAAK6B,aAAajK,EAAUgK,MAAOwD,EAAgBhQ,IAC1DvB,MAAO,CACLqJ,KAAMtF,EAAUyI,WAElBC,SAAU,CACRzM,MAAO,CACLqJ,MAAM,IAGVlD,KAAMgG,EAAK3H,YAAYT,EAAU6G,UAAUQ,KAAI,SAACC,GAE9C,OADYtJ,EAAqBwP,EAAgBhQ,GAAI8J,MAGvDjF,KAAMrC,EAAUqC,KAChB+H,OAAQpK,EAAUqK,WAClBC,UAAWtK,EAAUuK,SAGlBkD,4BAp4DZE,EAAAA,UAAStT,KAAA,CAAC,CACTuT,SAAU,6BACVC,SAAA,4SACS,qFAXFhU,SAKPiU,EAAAA,gBADAC,EAAAA,kDAUCC,EAAAA,UAAS3T,KAAA,CAAC,WAAY,CAAE4T,QAAQ,oBAChCC,EAAAA,aCoEHC,EAAA,aAKAC,EAAA,aCzFMC,EAAc,CAClBC,UAAW,CAET,CACErL,GAAI,MACJhI,MAAO,aAET,CACEgI,GAAI,OACJhI,MAAO,cAET,CACEgI,GAAI,MACJhI,MAAO,aAET,CACEgI,GAAI,QACJhI,MAAO,eAET,CACEgI,GAAI,QACJhI,MAAO,eAET,CACEgI,GAAI,UACJhI,MAAO,kBAGXsT,YAAa,CACX,CACEtL,GAAI,OACJyE,OAAQ,CACN,CACEzE,GAAI,SACJhI,MAAO,qBAET,CACEgI,GAAI,UACJhI,MAAO,wBAIb,CACEgI,GAAI,QACJyE,OAAQ,CACN,CACEzE,GAAI,OACJhI,MAAO,QAET,CACEgI,GAAI,MACJhI,MAAO,SAIb,CACEgI,GAAI,MACJyE,OAAQ,CACN,CACEzE,GAAI,YACJhI,MAAO,oBAET,CACEgI,GAAI,aACJhI,MAAO,qBAET,CACEgI,GAAI,sBACJhI,MAAO,+BAET,CACEgI,GAAI,uBACJhI,MAAO,kCAIb,CACEgI,GAAI,MACJyE,OAAQ,CACN,CACEzE,GAAI,YACJhI,MAAO,oBAET,CACEgI,GAAI,WACJhI,MAAO,gBAIb,CACEgI,GAAI,UACJyE,OAAQ,CACN,CACEzE,GAAI,gBACJhI,MAAO,wBAET,CACEgI,GAAI,oBACJhI,MAAO,+BAKfuT,UAAW,CACT,CACEvL,GAAI,QACJhI,MAAO,QACPwT,UAAS,GAEX,CACExL,GAAI,WACJhI,MAAO,WACPwT,UAAS,GAGX,CACExL,GAAI,OACJhI,MAAO,OACPwT,UAAS,IASbC,UAAW,CACT,CACEzL,GAAI,QACJhI,MAAO,QACPwT,UAAS,GAEX,CACExL,GAAI,WACJhI,MAAO,WACPwT,UAAS,GAGX,CACExL,GAAI,OACJhI,MAAO,OACPwT,UAAS,IAQbE,WAAY,CACV,CACEnK,KAAM,SACNvJ,MAAO,UAET,CACEuJ,KAAM,OACNvJ,MAAO,aAET,CACEuJ,KAAM,YACNvJ,MAAO,mBAET,CACEuJ,KAAM,WACNvJ,MAAO,YAET,CACEuJ,KAAM,UACNvJ,MAAO,WAET,CACEuJ,KAAM,QACNvJ,MAAO,UAGX2T,gBAAiB,CACf,CACE3L,GAAI,MACJhI,MAAO,OAET,CACEgI,GAAI,QACJhI,MAAO,SAET,CACEgI,GAAI,KACJhI,MAAO,MAET,CACEgI,GAAI,SACJhI,MAAO,eAET,CACEgI,GAAI,KACJhI,MAAO,MAET,CACEgI,GAAI,QACJhI,MAAO,SAET,CACEgI,GAAI,UACJhI,MAAO,WAET,CACEgI,GAAI,MACJhI,MAAO,OAET,CACEgI,GAAI,MACJhI,MAAO,QAGX4L,SAAU,iBAUV,SAAAgI,IACA9U,KAAA+U,MAAO,EACE/U,KAAA+F,OAAsB,CAC7B+G,SAAU,GACV1D,MAAO,GACPwC,cAAe,GACfC,cAAe,GACfvD,KAAM,GACNqF,OAAQ,GACRqH,WAAY,GACZC,gBAAiB,GACjBtL,MAAO,GACPM,MAAO,GACPqG,YAAY,EACZnQ,OAAQ,GACRqQ,MAAM,EACN5H,eAAgB,GAChBuD,gBAAiB,GACjB+I,UAAU,EACV3O,cAAc,EACd0J,MAAO,GACPkF,UAAWf,EAAM,IACjBgB,QAAS,GACTvN,SAAUwM,EAAc,IACxB7J,OAAQ,CACNC,KAAM,GACNC,MAAO,IACPpC,KAAM,UAERoE,OAAQ,IAEV1M,KAAAqV,UAAYf,EAIZtU,KAAAsV,sBAAuB,EACvBtV,KAAAuV,aAAc,EACJvV,KAAAwV,WAAgC,IAAIC,EAAAA,oBAC9CX,EAAA7U,UAAAyF,SAAA,WACE1F,KAAK0V,mBAAqBpB,EAAYO,gBACtC7U,KAAK+F,OAAO8B,SAAW,GACvB7H,KAAK+F,OAAOyE,OAAO,IAOrBsK,EAAA7U,UAAA0V,WAAA,SAAW1F,GACTjQ,KAAK+F,OAAOoP,UAAY,GACpBlF,GACFjQ,KAAK+F,OAAOoP,UAAUjS,KAAK,IAAIkR,GAC/BpU,KAAK+F,OAAOoP,UAAUjS,KAAK,IAAIkR,IAE/BpU,KAAK+F,OAAOoP,UAAUlS,OAAS,GAInC6R,EAAA7U,UAAA2V,iBAAA,SAAiB3F,EAAOgC,GACtBjS,KAAK+F,OAAOoP,UAAUU,OAAO5D,EAAO,IAMtC6C,EAAA7U,UAAA6V,YAAA,WACM9V,KAAK+F,OAAO5F,SACW,QAArBH,KAAK+F,OAAOuC,MACa,eAAvBtI,KAAK+F,OAAO4H,SACuB,IAAjC3N,KAAK+F,OAAOoP,UAAUlS,OACxBjD,KAAK+F,OAAOkK,MAAQ,QACXjQ,KAAK+F,OAAOoP,UAAUlS,OAAS,EACxCjD,KAAK+F,OAAOkK,MAAQjQ,KAAK+F,OAAOoP,UAEhCnV,KAAK+F,OAAOkK,MAAQ,IAID,SAArBjQ,KAAK+F,OAAOuC,MACa,gBAAvBtI,KAAK+F,OAAO4H,SACuB,IAAjC3N,KAAK+F,OAAOoP,UAAUlS,OACxBjD,KAAK+F,OAAOkK,MAAQ,QACXjQ,KAAK+F,OAAOoP,UAAUlS,OAAS,EACxCjD,KAAK+F,OAAOkK,MAAQjQ,KAAK+F,OAAOoP,UAEhCnV,KAAK+F,OAAOkK,MAAQ,MAO9B6E,EAAA7U,UAAA8V,gBAAA,WACE/V,KAAK+F,OAAOoP,UAAUjS,KAAK,IAAIkR,IAEjCU,EAAA7U,UAAA+V,oBAAA,WACEhW,KAAKuV,aAAc,EACnBvV,KAAK+F,OAAO8B,SAAS3E,KAAK,IAAImR,IAGhCS,EAAA7U,UAAAgW,gBAAA,SAAgBC,EAAMjE,GACpBjS,KAAK+F,OAAO8B,SAASgO,OAAO5D,EAAO,GACC,IAAhCjS,KAAK+F,OAAO8B,SAAS5E,SACvBjD,KAAKuV,aAAc,IAGvBT,EAAA7U,UAAAkW,YAAA,SAAYjV,GAAZ,IAAAmN,EAAArO,KACEA,KAAKqV,UAAUb,YAAY4B,QAAO,SAAA/C,GAC5BnS,IAAUmS,EAAInK,KAChBmF,EAAKgI,gBAAkBhD,EAAI1F,WAG/B3N,KAAK+F,OAAOmP,UAAW,GAGzBJ,EAAA7U,UAAAqW,kBAAA,SAAkBpV,uBAChB,GAAW,cAARA,GAA+B,eAARA,GAA+B,WAARA,GAA0B,YAARA,GAA4B,kBAARA,EAAwB,KAC7G,IAAiB,IAAAqV,EAAAlT,EAAArD,KAAKqV,UAAUZ,WAAS+B,EAAAD,EAAAnV,QAAAoV,EAAAhV,KAAAgV,EAAAD,EAAAnV,OAAC,CAC5B,cADJiS,EAAGmD,EAAAtV,OACJgI,KACLmK,EAAIqB,UAAS,yGAGjB,IAAiB,IAAA+B,EAAApT,EAAArD,KAAKqV,UAAUV,WAAS+B,EAAAD,EAAArV,QAAAsV,EAAAlV,KAAAkV,EAAAD,EAAArV,OAAC,CAC5B,cADJiS,EAAGqD,EAAAxV,OACJgI,KACLmK,EAAIqB,UAAS,2GAGb,GAAW,wBAARxT,GAAyC,yBAARA,GAA2C,sBAATA,EAA6B,KACvG,IAAiB,IAAAyV,EAAAtT,EAAArD,KAAKqV,UAAUZ,WAASmC,EAAAD,EAAAvV,QAAAwV,EAAApV,KAAAoV,EAAAD,EAAAvV,OAAC,CAC5B,cADJiS,EAAGuD,EAAA1V,OACJgI,KACLmK,EAAIqB,UAAS,yGAGjB,IAAiB,IAAAmC,EAAAxT,EAAArD,KAAKqV,UAAUV,WAASmC,EAAAD,EAAAzV,QAAA0V,EAAAtV,KAAAsV,EAAAD,EAAAzV,OAAC,CAAtC,IAAMiS,EACI,cADJA,EAAGyD,EAAA5V,OACJgI,KACLmK,EAAIqB,UAAS,wGAMrBI,EAAA7U,UAAA8W,oBAAA,SAAoB7V,GACJ,QAAVA,GACFlB,KAAK+F,OAAOQ,cAAe,EAC3BvG,KAAK+F,OAAOa,kBAAmB,GAEZ,YAAV1F,GACTlB,KAAK+F,OAAOa,kBAAmB,EAC/B5G,KAAK+F,OAAOQ,cAAe,IAG3BvG,KAAK+F,OAAOQ,cAAe,EAC3BvG,KAAK+F,OAAOa,kBAAmB,IAKnCkO,EAAA7U,UAAA+W,WAAA,WAAA,IAAA3I,EAAArO,KACEA,KAAK+F,OAAO8B,SAASuO,QAAO,SAAAlE,GACtBA,EAAQiB,gBAAkB9E,EAAKtI,OAAOiC,QACxCqG,EAAKiH,sBAAuB,EAE5BjH,EAAKiH,sBAAuB,MAGP,IAArBtV,KAAK+F,OAAOyK,KACdxQ,KAAK+F,OAAOyK,KAAO,GAEnBxQ,KAAK+F,OAAOyK,KAAO,KAEhBxQ,KAAKsV,sBACRtV,KAAKwV,WAAWyB,KAAKjX,KAAK+F,kCAnL/B6N,EAAAA,UAAStT,KAAA,CAAC,CACTuT,SAAU,yBACVC,SAAA,y+XAQCK,EAAAA,0BAmCA+C,EAAAA,gBC/Oe,CACNhO,GAAI,eACJhH,MAAO,eACPiV,YAAa,kCACbC,aC7BgB,GD8BhBC,UAAWpS,EACXqS,gBAAiBxC,EACjBzM,KAAO,CACHkP,IAAM,CACFC,QAAS,CAAEC,gBAAgB,EAC3BC,cAAc,EACdC,yBAAyB,EACzBC,kBAAkB,QAStC,iCAnCCC,EAAAA,SAAQvX,KAAA,CAAC,CACRwX,aAAc,CAAC7S,EAA6B6P,GAC5CiD,QAAS,CACPC,EAAAA,WACAC,EAAAA,iBAAiBC,QAAQ,CACvB9R,QAAO+R,KAGXC,QAAS,CAAEC,EAAAA,wBACXC,UAAW,CACTxY,EACA,CACIyY,QAAUC,EAAAA,gBACVC,OAAO,EACPC,SAAQC,IAkBdC,QAAS,CAAC3T,EAA6B6P,GACvC+D,gBAAiB,CAAC5T,EAA6B6P,iIC5CrB","sourcesContent":["/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GpSmartEchartWidgetService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n  public getAPIData(apiUrl): Observable<any>{\r\n    return this.http.get(apiUrl);\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isObject(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n}\r\nexport function extractValueFromJSON(keyArr: Array<string> | string, parent: Record<string, any>) {\r\n    const keysArray = Array.isArray(keyArr) ? keyArr : [keyArr];\r\n    const resultArray = [];\r\n    for (const keyStr of keysArray) {\r\n        const keys = keyStr.split('.');\r\n        let parentRef = parent;\r\n        if (keys.length === 1) {\r\n            resultArray.push(parentRef[keys[0]]);\r\n        } else {\r\n            let result;\r\n            for (let idx = 0; idx < keys.length; idx++) {\r\n                const key = keys[idx];\r\n                result = parentRef[key];\r\n                if (isObject(result)) {\r\n                    parentRef = result;\r\n                } else if (idx < keys.length - 1) {\r\n                }\r\n            }\r\n            resultArray.push(result);\r\n        }\r\n    }\r\n    if (keysArray.length > 1) {\r\n        return resultArray.join(' ');\r\n    }\r\n    return resultArray[0];\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport * as echarts from 'echarts';\r\nimport { EChartsOption } from 'echarts';\r\nimport { ChartConfig } from './model/config.modal';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport { isDevMode } from '@angular/core';\r\nimport * as simpleTransform from 'echarts-simple-transform';\r\nimport {\r\n  FetchClient,\r\n  Realtime,\r\n} from '@c8y/client';\r\nimport { extractValueFromJSON } from './util/extractValueFromJSON.util';\r\n@Component({\r\n  selector: 'lib-gp-smart-echart-widget',\r\n  templateUrl: './gp-smart-echart-widget.component.html',\r\n  styles: ['gp-smart-echart-widget.component.css']\r\n})\r\nexport class GpSmartEchartWidgetComponent implements OnInit {\r\n  @ViewChild('chartBox', { static: true}) protected mapDivRef: ElementRef;\r\n  @Input() config: ChartConfig;\r\n  serviceData;\r\n  seriesData;\r\n  chartData;\r\n  userInput;\r\n  chartOption: EChartsOption = {};\r\n  protected allSubscriptions: any = [];\r\n  realtime = true;\r\n  deviceId = '';\r\n  protected chartDiv: HTMLDivElement;\r\n  isDatahubPostCall = false;\r\n  constructor(private chartService: GpSmartEchartWidgetService,\r\n    private realTimeService: Realtime, private fetchClient: FetchClient) { }\r\n  ngOnInit(): void {\r\n    this.chartDiv = this.mapDivRef.nativeElement;\r\n    this.createChart(this.config);\r\n    \r\n  }\r\n  dataFromUser(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }// end of dataFromUser()\r\n  // create variables for all ChartConfig like value type, apidata from url etc to store the data from user\r\n  // create chart\r\n  reloadData(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }\r\n  // createChart function is used to create chart with the help of echart library\r\n  async createChart(userInput?: ChartConfig) {\r\n    // const chartDom = document.getElementById('chart-container');\r\n    // const myChart = echarts.init(chartDom);\r\n    const myChart = echarts.init(this.chartDiv);\r\n    myChart.showLoading();\r\n    if (userInput.showApiInput) {\r\n      this.serviceData = await this.chartService.getAPIData(userInput.apiUrl).toPromise();\r\n    } else if (userInput.showDatahubInput) {\r\n      const sqlReqObject = {\r\n        sql: userInput.sqlQuery,\r\n        limit: 100,\r\n        format: 'PANDAS'\r\n      };\r\n      const response = await this.fetchClient.fetch(userInput.apiUrl, {\r\n        body: JSON.stringify(sqlReqObject),\r\n        method: 'POST'\r\n      })\r\n      this.serviceData = await response.json();\r\n      this.isDatahubPostCall = true;\r\n    } else {\r\n      if (isDevMode()) { console.log('No Datasource selected'); }\r\n    }\r\n    if (this.serviceData) {\r\n      myChart.hideLoading();\r\n      if (userInput.aggrList.length === 0 && !this.isDatahubPostCall) {\r\n        // calls for API without Aggregation\r\n        if (userInput.type === 'pie') {\r\n          this.seriesData = this.getPieChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a = test[0].replace(/([A-Z])/g, ' $1')\r\n                  // uppercase the first character\r\n                  .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              show: false,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n            },\r\n            yAxis: {\r\n              type: 'value',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Pie Chart For API', this.chartOption); }\r\n        }\r\n        // End of piechart for API\r\n        else if (userInput.type === 'polar') {\r\n          this.seriesData = this.getPolarChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            polar: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Polar Chart For API', this.chartOption); }\r\n        }\r\n        // End of Polar CHart for API\r\n        else if (userInput.type === 'scatter') {\r\n          let xAxisObject; let yAxisObject;\r\n          if (userInput.layout === 'horizontalScatter') {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.yAxisDimension];\r\n              }),\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          } else {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          }\r\n          this.seriesData = this.getScatterChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: xAxisObject,\r\n            yAxis: yAxisObject,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            series: this.seriesData\r\n          }\r\n          if (isDevMode()) { console.log('Scatter chart for API', this.chartOption) }\r\n        } // End of Scatter Chart for API\r\n        else if (userInput.type === 'radar') {\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          this.chartOption = {\r\n            title:{\r\n              text:userInput.title,\r\n              left:'center'\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine:true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            radar: {\r\n              indicator: this.serviceData[userInput.listName].map((item) => {\r\n                return { name: item[userInput.xAxisDimension] };\r\n              }),\r\n              radius:100\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Radar chart for API', this.chartOption) }\r\n        } // End of Radar CHart for API\r\n        else if ((userInput.type === 'line' || userInput.type === 'bar')\r\n          && (userInput.layout !== 'simpleHorizontalBar' && userInput.layout !== 'stackedHorizontalBar')) {\r\n          this.seriesData = this.getSeriesData(userInput);\r\n          let xAxisName; let yAxisName;\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = ''\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = ''\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput),\r\n              // name: xAxisName\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              // name: yAxisName\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          };\r\n          if (isDevMode()) { console.log('Simple bar or line chart for API', this.chartOption); }\r\n        }\r\n        // End of Simple Line,Simple Bar,Stacked Line And Stacked Bar for API\r\n        else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n          let xAxisName; let yAxisName;\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = ''\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = ''\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.seriesData = this.getHorizontalSeriesData(userInput);\r\n          this.chartOption =\r\n          {\r\n            title: {\r\n              text: userInput.title,\r\n              left: 'center',\r\n              textStyle: {\r\n                overflow: 'truncate',\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              show: true,\r\n              icon: userInput.legend.icon,\r\n              orient: 'horizontal',\r\n              top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                return a;\r\n              },\r\n              type: 'scroll',\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            xAxis: {\r\n              // name: xAxisName,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              // name: yAxisName,\r\n              type: this.getYAxisType(userInput),\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                const val = extractValueFromJSON(userInput.yAxisDimension, item);\r\n                return val;\r\n              }),\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n          };\r\n          if (isDevMode()) { console.log('Horizontal chart for API', this.chartOption); }\r\n        }\r\n        // End of Horizontal Bar & Stacked Horizontal Bar\r\n      } // End of API calls with JSON Response without Aggregation\r\n      else if (userInput.aggrList.length === 0 && this.isDatahubPostCall) {\r\n        // calls for Datahub without Aggregation\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = null;\r\n        // Format of Data from datahub is\r\n        // Result:[\r\n        //   \"columns\":['colA','colB',...,'colN'],\r\n        //   \"data\":[\r\n        //     [\"A1\",\"B1\",...,\"N1\"],\r\n        //     [\"A2\",\"B2\",...,\"N2\"],\r\n        //     ...,\r\n        //     [\"AN\",\"BN\",...,\"NN\"]\r\n        //   ]\r\n        // ]\r\n        // source of Dataset should be [[columns],[datarows]]\r\n        this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        // End of Response Data extraction\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions; let xDimensions;\r\n          let yAxisName = ''; let xAxisName = '';\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: userInput.xAxisDimension,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Baror Line chart for Datahub without aggregation', this.chartOption); }\r\n        } // End of Bar,Line Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'scatter') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = '';\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = '';\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          if (isDevMode()) { console.log('Scatter chart without Aggregation for Datahub', this.chartOption); }\r\n        } // End of Scatter Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'pie') {\r\n          dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%', left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Pie chart without Aggregation for Datahub', this.chartOption); }\r\n        } // End of Pie chart without Aggregation for Datahub\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions; let xDimensions;\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%', left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Polar chart without Aggregation for Datahub', this.chartOption); }\r\n        }  // End of Polar Chart Without Aggregation for Datahub\r\n        else if (userInput.type === 'radar') {\r\n          dimensions = [...userInput.radarDimensions];\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          const indexOfXDimension = this.serviceData[0].indexOf(userInput.xAxisDimension);\r\n          const indicatorData = [];\r\n          for (let i = 1; i < this.serviceData.length; i++) {\r\n            indicatorData.push({ name: this.serviceData[i][indexOfXDimension] });\r\n          }\r\n          this.chartOption = {\r\n            title:{\r\n              text:userInput.title,\r\n              left:'center'\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%', left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            radar: {\r\n              indicator: indicatorData,\r\n              radius:100\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Radar Chart without Aggregation for Datahub', this.chartOption); }\r\n        } // End of Radar Chart without Aggregation for Datahub\r\n      } // ENd of Datahub Calls Response without Aggregation\r\n      else if (userInput.aggrList.length > 0) {\r\n        // calls for API & Datahub with Aggregation\r\n        echarts.registerTransform(simpleTransform.aggregate);\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = '_aggregate';\r\n        // Extract the service data based on the response type of wthere call is made to Datahub or Other API\r\n        if (this.isDatahubPostCall) {\r\n          // Format of Data from datahub is\r\n          // Result:[\r\n          //   \"columns\":['colA','colB',...,'colN'],\r\n          //   \"data\":[\r\n          //     [\"A1\",\"B1\",...,\"N1\"],\r\n          //     [\"A2\",\"B2\",...,\"N2\"],\r\n          //     ...,\r\n          //     [\"AN\",\"BN\",...,\"NN\"]\r\n          //   ]\r\n          // ]\r\n          // source of Dataset should be [[columns],[datarows]]\r\n          this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        } else {\r\n          // Format of Data from APi calls is JSON object with key,value\r\n          // Result: [\r\n          //   {\r\n          //     \"key1\": \"val1\",\r\n          //     \"key2\": \"val2\",\r\n          //   },\r\n          //   {\r\n          //     \"key1\": \"val1.1\",\r\n          //     \"key2\": \"val2.1\",\r\n          //   }\r\n          // ]\r\n          this.serviceData = this.serviceData[userInput.listName];\r\n        } // End of Response Data extraction\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          let yDimensions; let xDimensions;\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n              yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n              yAxisName = '';\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n              xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n              xAxisName = '';\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name: yAxisName\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Bar or Line chart', this.chartOption); }\r\n        } // End of Bar,Line Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'scatter') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = this.getDatasetDimensions(userInput);\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = '';\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = '';\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions: resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          if (isDevMode()) { console.log('Aggregate Scatter chart', this.chartOption); }\r\n        } // End of Scatter Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'pie') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Pie chart', this.chartOption); }\r\n        } // End of Pie Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions; let xDimensions;\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title,\r\n              left:'center',\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Polar chart', this.chartOption); }\r\n        }  // End of Polar Chart with Aggregation for datahub and API\r\n      }  // End of calls for API & Datahub with Aggregation\r\n      // End of chartOptions\r\n    } // End of IF condition checking whether variable serviceData has some data or not\r\n  }\r\n  getXAxisType(input) {\r\n    return input.xAxis;\r\n  }\r\n  getYAxisType(input) {\r\n    return input.yAxis;\r\n  }\r\n  getChartType(input) {\r\n    return input.type;\r\n  }\r\n  getFormattedName(input) {\r\n    const test = input.split('.').slice(-1);\r\n    const a = test[0].replace(/([A-Z])/g, ' $1')\r\n      // uppercase the first character\r\n      .replace(/^./, (str) => { return str.toUpperCase(); })\r\n    return a.trim();\r\n  }\r\n  getEncodeData(userInput, datasetId?, xDimensions?, yDimensions?) {\r\n    if (userInput.type === 'polar') {\r\n      return [{\r\n        coordinateSystem: 'polar',\r\n        name: userInput.xAxisDimension,\r\n        type: userInput.layout,\r\n        showSymbol: true,\r\n        encode: {\r\n          radius: userInput.yAxisDimension,\r\n          angle: userInput.xAxisDimension,\r\n          tooltip: [userInput.yAxisDimension, userInput.xAxisDimension]\r\n        },\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n      }]\r\n    }\r\n    else if (userInput.type === 'scatter') {\r\n      if (userInput.layout === 'horizontalScatter') {\r\n        if (userInput.xAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n          }]\r\n        } else {\r\n          const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n          const xAxisData = [];\r\n          xAxisDimensions.forEach(i => {\r\n            xAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: xAxisDimensions[i],\r\n                tooltip: [xAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          });\r\n          return xAxisData;\r\n        }// End of else part of XAxisDimension\r\n      } else {\r\n        if (userInput.yAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }]\r\n        } else {\r\n          const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n          const yAxisData = [];\r\n          yAxisDimensions.forEach(i => {\r\n            yAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: yAxisDimensions[i],\r\n                tooltip: [yAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          });\r\n          return yAxisData;\r\n        }// End of else part of YAxisDimension\r\n      }\r\n    }\r\n    else if (userInput.type === 'radar') {\r\n      const dimensions = userInput.radarDimensions.split(',');\r\n      const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n        acc[dimension] = [];\r\n        return acc;\r\n      }, {});\r\n      this.serviceData[userInput.listName].map((item) => {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n      const resultARR = Object.values(dimensionRecord)\r\n      const result1 = Object.keys(dimensionRecord).map(key => ({\r\n        name: key,\r\n        value: dimensionRecord[key]\r\n      }));\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n    else if (userInput.type === 'bar' && (userInput.layout === 'simpleBar' || userInput.layout === 'stackedBar')) {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          }\r\n        }];\r\n      } else {\r\n        const yAxisData = [];\r\n        yDimensions.array.forEach(i => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            stack: this.getStackName(userInput.stack, yDimensions[i]),\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n            }\r\n          }\r\n        }); // end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          name: xDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          }\r\n        }];\r\n      } else {\r\n        const xAxisData = [];\r\n        xDimensions.foreach(i => {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            stack: this.getStackName(userInput.stack, xDimensions[i]),\r\n            name: xDimensions[i],\r\n            encode: {\r\n              x: xDimensions[i],\r\n              y: yDimensions\r\n            }\r\n          }\r\n        }); // end of for block\r\n        return xAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'line') {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area,\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          }\r\n        }];\r\n      } else {\r\n        const yAxisData = [];\r\n        yDimensions.forEach(i => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            smooth: userInput.smoothLine,\r\n            areaStyle: userInput.area,\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n            }\r\n          }\r\n        }); // end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'pie') {\r\n      const convradius = userInput.radius.split(',');\r\n      let roseValue = ''; let sliceStyle;\r\n      if (userInput.layout === 'roseMode') {\r\n        roseValue = 'rose';\r\n      }\r\n      if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {};\r\n      } else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius\r\n        }\r\n      } else {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius,\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      }\r\n      return [{\r\n        type: userInput.type,\r\n        datasetId,\r\n        radius: convradius,\r\n        roseType: roseValue,\r\n        avoidLabelOverlap: false,\r\n        label: {\r\n          show: false,\r\n          position: 'center',\r\n        },\r\n        labelLine: {\r\n          show: false\r\n        },\r\n        itemStyle: sliceStyle,\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        },\r\n        name: userInput.pieSliceName,\r\n        encode: {\r\n          itemName: [userInput.pieSlicenName],\r\n          value: userInput.pieSliceValue\r\n        }\r\n      }];\r\n    }\r\n  }\r\n  // getScatterChartSeriesData function is used to create series data for scatter chart\r\n  getScatterChartSeriesData(userInput) {\r\n    if (userInput.layout === 'horizontalScatter') {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            return item[userInput.xAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n        const xAxisData = [];\r\n        xAxisDimensions.forEach(i => {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            data: this.serviceData[userInput.listName].map((item) => {\r\n              return item[xAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }); // end of for loop\r\n        return xAxisData;\r\n      }// End of else part of XAxisDimension\r\n    } else {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            return item[userInput.yAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n        const yAxisData = [];\r\n        yAxisDimensions.forEach(i => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            data: this.serviceData[userInput.listName].map((item) => {\r\n              return item[yAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        });\r\n        return yAxisData;\r\n      }// End of else part of YAxisDimension\r\n    }\r\n  }\r\n  // getPolarChartSeriesData function is used to create series data for polar chart\r\n  getPolarChartSeriesData(userInput) {\r\n    const result = [];\r\n    this.serviceData[userInput.listName].map((item) => {\r\n      const currentResult = [];\r\n      currentResult.push(item[userInput.xAxisDimension]);\r\n      currentResult.push(item[userInput.yAxisDimension]);\r\n      result.push(currentResult);\r\n    });\r\n    return [{\r\n      coordinateSystem: 'polar',\r\n      name: userInput.xAxisDimension,\r\n      type: userInput.layout,\r\n      showSymbol: true,\r\n      data: result,\r\n      label: {\r\n        show: userInput.showLabel\r\n      },\r\n      emphasis: {\r\n        label: {\r\n          show: true\r\n        },\r\n      },\r\n    }]\r\n  }\r\n  // getRadarSeriesData function is used to get the data from service and store it in seriesData variable\r\n  getRadarSeriesData(userInput) {\r\n    const dimensions = userInput.radarDimensions.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    if (userInput.listName in this.serviceData) {\r\n      this.serviceData[userInput.listName].map((item) => {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      const indexes = dimensions.map((v, index) => {\r\n        const val = v;\r\n        return { key: val, value: this.serviceData[0].indexOf(v) };\r\n      });\r\n      for (let i = 1; i < this.serviceData.length; i++) {\r\n        indexes.forEach(element => {\r\n          dimensionRecord[element.key].push(this.serviceData[i][element.value]);\r\n        });\r\n      }\r\n    }\r\n    const result1 = Object.keys(dimensionRecord).map(key => ({\r\n      name: key,\r\n      value: dimensionRecord[key]\r\n    }));\r\n    if (userInput.listName in this.serviceData) {\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    } else {\r\n      return [{\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n  }\r\n  createObject(dataDim, arr, dimen) {\r\n    const dimensions = dimen.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    const indexes = dimensions.map((v, index) => {\r\n      const val = v;\r\n      return { key: val, value: dataDim.indexOf(v) };\r\n    });\r\n    arr.map((item, index) => {\r\n      indexes.keys.forEach(element => {\r\n        dimensionRecord[element.key].push(item[element.value]);\r\n      });\r\n    });\r\n  }\r\n  // getPieChartSeriesData function is used to create series data for pie chart\r\n  getPieChartSeriesData(userInput) {\r\n    // convert comma separated string userInput.radius to array\r\n    const convradius = userInput.radius.split(',');\r\n    let roseValue = ''; let sliceStyle;\r\n    if (userInput.layout === 'roseMode') {\r\n      roseValue = 'rose';\r\n    }\r\n    if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {}\r\n    }\r\n    else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius\r\n      }\r\n    } else {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius,\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    }\r\n    return [{\r\n      name: userInput.listName,\r\n      type: 'pie',\r\n      radius: convradius,\r\n      roseType: roseValue,\r\n      avoidLabelOverlap: false,\r\n      label: {\r\n        show: true,\r\n        position: 'center',\r\n      },\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      itemStyle: sliceStyle,\r\n      emphasis: {\r\n        itemStyle: {\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 0,\r\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      },\r\n      data: this.serviceData[userInput.listName].map((item) => {\r\n        // take val from userinput.pieslice value and return it\r\n        const val = item[userInput.pieSliceValue];\r\n        let nam;\r\n        if (userInput.pieSliceValue === userInput.pieSlicenName) {\r\n          nam = userInput.pieSlicenName;\r\n        } else {\r\n          nam = item[userInput.pieSlicenName]\r\n        }\r\n        return {\r\n          value: val,\r\n          name: nam\r\n        }\r\n      }),\r\n    }]\r\n  }\r\n  // getseriesdata recieves userinput and returns seriesdata\r\n  // seriesdata is an array of objects\r\n  getSeriesData(userInput) {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: this.getFormattedName(userInput.yAxisDimension),\r\n        data: this.serviceData[userInput.listName].map((item) => {\r\n          return item[userInput.yAxisDimension];\r\n        }),\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n      const yAxisData = [];\r\n      yAxisDimensions.forEach(i => {\r\n        yAxisData[i] = {\r\n          name: this.getFormattedName(userInput.yAxisDimensions[i]),\r\n          stack: this.getStackName(userInput.stack, yAxisDimensions[i]),\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            return item[yAxisDimensions[i]];\r\n          }),\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      }); // end of for block\r\n      return yAxisData;\r\n    }\r\n  }\r\n  // Gets the dimensions for dataset\r\n  getDatasetDimensions(userInput) {\r\n    let yDimensions; let xDimensions; let dimensionArr = [];\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      yDimensions = userInput.yAxisDimension;\r\n      dimensionArr.push(yDimensions);\r\n    } else {\r\n      yDimensions = userInput.yAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...yDimensions];\r\n    }\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      xDimensions = userInput.xAxisDimension;\r\n      dimensionArr.push(xDimensions);\r\n    } else {\r\n      xDimensions = userInput.xAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...xDimensions];\r\n    }\r\n    return dimensionArr;\r\n  }\r\n  // if stackdata is empty then return dimensionName\r\n  // else if stackdata is not empty then check if dimensionName is present in stackdata\r\n  // if present then return stackname\r\n  // else return dimensionName\r\n  getStackName(stackData, dimensionName) {\r\n    let result = '';\r\n    stackData.forEach(x => {\r\n      const values = stackData[x].stackValues.split(',');\r\n      for (const i in values) {\r\n        if (values[i] === dimensionName) {\r\n          result = stackData[x].stackName;\r\n          return result;\r\n        }\r\n      }\r\n    }); // end of for loop of stackdata\r\n  }\r\n  // Get the dimensions and method array for aggregation\r\n  // List comes from aggregate config and conatins both method and dimension name\r\n  // We also need group by to be included as a dimension but without a method\r\n  getResultDimesions(list, groupby) {\r\n    const changedNamesForResult = list.map(({\r\n      aggrDimesnion: from,\r\n      aggrMethod: method\r\n    }) => ({\r\n      from,\r\n      method\r\n    }));\r\n    changedNamesForResult.push({ from: groupby });\r\n    return changedNamesForResult;\r\n  }\r\n  // Method for showing the Slider/Pinch Zoom\r\n  showZoomFeature(val) {\r\n    if (val) {\r\n      return [\r\n        {\r\n          type: 'inside',\r\n          xAxisIndex: 0,\r\n          minSpan: 5\r\n        },\r\n        {\r\n          type: 'slider',\r\n          xAxisIndex: 0,\r\n          minSpan: 5,\r\n          show: true,\r\n          height: 20,\r\n          top: '90%',\r\n        }\r\n      ]\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n  // Get data for horizontal Bar chart\r\n  getHorizontalSeriesData(userInput) {\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: this.getFormattedName(userInput.xAxisDimension),\r\n        data: this.serviceData[userInput.listName].map((item) => {\r\n          const val = extractValueFromJSON(userInput.xAxisDimension, item);\r\n          return val;\r\n        }),\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          focus: 'series',\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n      const xAxisData = [];\r\n      xAxisDimensions.forEach(i => {\r\n        xAxisData[i] = {\r\n          name: this.getFormattedName(userInput.xAxisDimensions[i]),\r\n          stack: this.getStackName(userInput.stack, xAxisDimensions[i]),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              show: true\r\n            },\r\n          },\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            const val = extractValueFromJSON(xAxisDimensions[i], item);\r\n            return val;\r\n          }),\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      });// end of for block\r\n      return xAxisData;\r\n    }\r\n  }\r\n}","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport interface ChartConfig {\r\n    radius: string[];\r\n    tooltip?: Tooltip;\r\n    legend?: Legend;\r\n    toolbox?: Toolbox;\r\n    title?: string | '',\r\n    type?: string | '',\r\n    layout?: string | '',\r\n    dataSource?: string | '',\r\n    dataSourceValue?: string | '',\r\n    xAxis?: string | '',\r\n    xAxisDimension?: string | '',\r\n    yAxis?: string | '',\r\n    yAxisDimension: string | '',\r\n    apiUrl?: string | '',\r\n    sqlQuery?:string |'',\r\n    smoothLine?: boolean,\r\n    area?: any | '',\r\n    stackList: Stack[],\r\n    aggrList: AggregateData[],\r\n    stack: Stack[] | string,\r\n    aggrArr: AggregateData[],\r\n    roseType?: string | '',\r\n    showLabel?: boolean,\r\n    dateFormat?:string;\r\n    itemStyle?: ItemStyle,\r\n    emphasis?:Emphasis;\r\n    sliderZoom?:boolean|'';\r\n    boxZoom?:boolean;\r\n    pieSlicenName?:string | '';\r\n    pieSliceValue?:string | '';\r\n    radarShape?:string | '';\r\n    radarIndicator?:string | '';\r\n    radarDimensions?:string | '';\r\n    showApiInput?: boolean;\r\n    showDatahubInput?:boolean;\r\n    addStack: boolean,\r\n    listName:string|'';\r\n    groupBy?:string | '';\r\n    xAxisName?:string | '';\r\n    yAxisName?:string | '';\r\n    scatterSymbolSize?:string;\r\n    pieBorderWidth?:number|0;\r\n    pieBorderRadius?:number|0;\r\n}\r\n\r\nexport class Emphasis{\r\n    label?:Label;\r\n}\r\nexport class Label{\r\n    show?:boolean;\r\n}\r\nexport class ItemStyle{\r\n    borderRadius?:number;\r\n}\r\nexport class YAxis{\r\n    ytype?: string;// 'value','category','time','log'\r\n    name?:string;// name of axis\r\n    position?: string;// left or right\r\n}\r\nexport class Tooltip {\r\n    show?: boolean | '';\r\n    trigger?: string | ''; // 'axis' for line or bar chart,'item' for scatter or pie chart\r\n    triggerOn?: string | '';\r\n    borderColor?: string | '';\r\n    borderWidth?: string | '';\r\n    order?: string | '';// values can be 'seriesAsc','seriesDesc','valueAsc','valueDesc'\r\n}\r\n\r\n// To show symbol,color and name of series\r\nexport class Legend {\r\n    show?: boolean | '';\r\n    type?: string | '';// 'plain' is default,'scroll' when many options are in legend\r\n    orient?: string | '';// 'horizontal' or  'vertical'\r\n    icon?: string | '';// shape of legend ; values can be 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'\r\n    selector?: boolean | '';// to show a select all button for legends or not\r\n    top?: string | '';\r\n    width?: number | '';\r\n\r\n}\r\n\r\nexport class Toolbox {\r\n    show?: boolean | '';\r\n    orient?: string | '';// 'horizontal' or  'vertical'\r\n    feature?: Feature;// 'plain' is default,'scroll' when many options are in legend\r\n}\r\n\r\nexport class Stack{\r\n    stackName: string;\r\n    stackValues:string;\r\n}\r\n\r\nexport class AggregateData{\r\n    aggrDimesnion: string;\r\n    aggrMethod:string;\r\n}\r\n\r\nexport class Feature {\r\n    saveAsImage?: any | '';\r\n    magicType?: any | '';\r\n    dataZoom?: any | '';\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, EventEmitter, Input, OnInit, Output, Pipe } from '@angular/core';\r\nimport { config } from 'process';\r\nimport { AggregateData, ChartConfig, Stack } from '../model/config.modal';\r\nconst chartValues = {\r\n  chartType: [\r\n\r\n    {\r\n      id: 'bar',\r\n      value: 'Bar Chart'\r\n    },\r\n    {\r\n      id: 'line',\r\n      value: 'Line Chart',\r\n    },\r\n    {\r\n      id: 'pie',\r\n      value: 'Pie Chart'\r\n    },\r\n    {\r\n      id: 'radar',\r\n      value: 'Radar Chart'\r\n    },\r\n    {\r\n      id: 'polar',\r\n      value: 'Polar chart'\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      value: 'Scatter Chart'\r\n    }\r\n  ],\r\n  chartLayout: [\r\n    {\r\n      id: 'line',\r\n      layout: [\r\n        {\r\n          id: 'simple',\r\n          value: 'Simple Line Chart'\r\n        },\r\n        {\r\n          id: 'stacked',\r\n          value: 'Stacked Line Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'polar',\r\n      layout: [\r\n        {\r\n          id: 'line',\r\n          value: 'Line'\r\n        },\r\n        {\r\n          id: 'bar',\r\n          value: 'Bar'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'bar',\r\n      layout: [\r\n        {\r\n          id: 'simpleBar',\r\n          value: 'Simple Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedBar',\r\n          value: 'Stacked Bar Chart'\r\n        },\r\n        {\r\n          id: 'simpleHorizontalBar',\r\n          value: 'Simple Horizontal Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedHorizontalBar',\r\n          value: 'Stacked Horizontal Bar Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'pie',\r\n      layout: [\r\n        {\r\n          id: 'simplePie',\r\n          value: 'Simple Pie Chart'\r\n        },\r\n        {\r\n          id: 'roseMode',\r\n          value: 'Rose Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      layout: [\r\n        {\r\n          id: 'simpleScatter',\r\n          value: 'Simple Scatter Chart'\r\n        },\r\n        {\r\n          id: 'horizontalScatter',\r\n          value: 'Horizontal Scatter Chart'\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  yAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n\r\n  xAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  legendType: [\r\n    {\r\n      icon: 'circle',\r\n      value: 'Circle'\r\n    },\r\n    {\r\n      icon: 'rect',\r\n      value: 'Rectangle'\r\n    },\r\n    {\r\n      icon: 'roundRect',\r\n      value: 'Round Rectangle'\r\n    },\r\n    {\r\n      icon: 'triangle',\r\n      value: 'Triangle'\r\n    },\r\n    {\r\n      icon: 'diamond',\r\n      value: 'Diamond'\r\n    },\r\n    {\r\n      icon: 'arrow',\r\n      value: 'Arrow'\r\n    }\r\n  ],\r\n  aggregateMethod: [\r\n    {\r\n      id: 'sum',\r\n      value: 'Sum'\r\n    },\r\n    {\r\n      id: 'count',\r\n      value: 'Count'\r\n    },\r\n    {\r\n      id: 'Q1',\r\n      value: 'Q1'\r\n    },\r\n    {\r\n      id: 'median',\r\n      value: 'Q2 / Median'\r\n    },\r\n    {\r\n      id: 'Q3',\r\n      value: 'Q3'\r\n    },\r\n    {\r\n      id: 'first',\r\n      value: 'First'\r\n    },\r\n    {\r\n      id: 'average',\r\n      value: 'Average'\r\n    },\r\n    {\r\n      id: 'min',\r\n      value: 'Min'\r\n    },\r\n    {\r\n      id: 'max',\r\n      value: 'Max'\r\n    },\r\n  ],\r\n  listName: '',\r\n}\r\n@Component({\r\n  selector: 'lib-smart-chart-config',\r\n  templateUrl: './smart-chart-config.component.html',\r\n  styleUrls: ['./smart-chart-config.component.css']\r\n})\r\n\r\n\r\nexport class SmartChartConfigComponent implements OnInit {\r\n  constructor() { }\r\n  flag = false;\r\n  @Input() config: ChartConfig = {\r\n    listName: '',\r\n    title: '',\r\n    pieSlicenName: '',\r\n    pieSliceValue: '',\r\n    type: '',\r\n    layout: '',\r\n    dataSource: '',\r\n    dataSourceValue: '',\r\n    xAxis: '',\r\n    yAxis: '',\r\n    smoothLine: false,\r\n    apiUrl: '',\r\n    area: false,\r\n    yAxisDimension: '',\r\n    radarDimensions: '',\r\n    addStack: false,\r\n    showApiInput: false,\r\n    stack: [],\r\n    stackList: Stack[''],\r\n    aggrArr: [],\r\n    aggrList: AggregateData[''],\r\n    legend: {\r\n      icon: '',\r\n      width: 330,\r\n      type: 'scroll'\r\n    },\r\n    radius: []\r\n  };\r\n  chartData = chartValues;\r\n  chartLayoutData;\r\n  aggregationMethods;\r\n\r\n  isGroupByInAggregate = false;\r\n  isAggrAdded = false;\r\n  @Output() configData: EventEmitter<any> = new EventEmitter();\r\n  ngOnInit(): void {\r\n    this.aggregationMethods = chartValues.aggregateMethod;\r\n    this.config.aggrList = [];\r\n    this.config.legend={};\r\n  }\r\n\r\n\r\n  // add another stack to the stackList\r\n  // if stackList is empty, add total to the stackList\r\n  // if stackList is not empty, add another stack to the stackList\r\n  stackAdded(stack) {\r\n    this.config.stackList = [];\r\n    if (stack) {\r\n      this.config.stackList.push(new Stack());\r\n      this.config.stackList.push(new Stack());\r\n    } else {\r\n      this.config.stackList.length = 0;\r\n    }\r\n  }\r\n\r\n  deleteStackValue(stack, index) {\r\n    this.config.stackList.splice(index, 1);\r\n  }\r\n\r\n  // updateStack is called when the user changes the type of chart\r\n  // updateStack is called when the user changes the layout of the chart\r\n  // updateStack is called when the user changes the data source of the chart\r\n  updateStack() {\r\n    if (this.config.apiUrl) {\r\n      if (this.config.type === 'bar') {\r\n        if (this.config.layout === 'stackedBar') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n      if (this.config.type === 'line') {\r\n        if (this.config.layout === 'stackedLine') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addAnotherStack() {\r\n    this.config.stackList.push(new Stack());\r\n  }\r\n  addAnotherAggregate() {\r\n    this.isAggrAdded = true;\r\n    this.config.aggrList.push(new AggregateData());\r\n  }\r\n\r\n  deleteAggrValue(aggr, index) {\r\n    this.config.aggrList.splice(index, 1);\r\n    if (this.config.aggrList.length === 0) {\r\n      this.isAggrAdded = false;\r\n    }\r\n  }\r\n  onSelection(value) {\r\n    this.chartData.chartLayout.filter(val => {\r\n      if (value === val.id) {\r\n        this.chartLayoutData = val.layout;\r\n      }\r\n    })\r\n    this.config.addStack = false;\r\n\r\n  }\r\n  onLayoutSelection(value) {\r\n    if(value==='simpleBar' || value==='stackedBar'|| value==='simple'||value==='stacked' ||value==='simpleScatter'){\r\n      for(const val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n      for(const val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n    }else if(value==='simpleHorizontalBar' || value==='stackedHorizontalBar' || value ==='horizontalScatter'){\r\n      for(const val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n      for(const val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  dataSourceSelection(value) {\r\n    if (value === 'API') {\r\n      this.config.showApiInput = true;\r\n      this.config.showDatahubInput = false;\r\n\r\n    } else if (value === 'datahub') {\r\n      this.config.showDatahubInput = true;\r\n      this.config.showApiInput = false;\r\n\r\n    } else {\r\n      this.config.showApiInput = false;\r\n      this.config.showDatahubInput = false;\r\n    }\r\n  }\r\n\r\n  // if onSelection, onLayoutSelection, dataSourceSelection is called, then submit data and emit config\r\n  SubmitData() {\r\n    this.config.aggrList.filter(element => {\r\n      if (element.aggrDimesnion === this.config.groupBy) {\r\n        this.isGroupByInAggregate = true;\r\n      } else {\r\n        this.isGroupByInAggregate = false;\r\n      }\r\n    });\r\n    if (this.config.area === true) {\r\n      this.config.area = {};\r\n    }else {\r\n      this.config.area = null;\r\n    }\r\n    if (!this.isGroupByInAggregate) {\r\n      this.configData.emit(this.config);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CUSTOM_ELEMENTS_SCHEMA, InjectionToken, NgModule } from '@angular/core';\r\nimport { BootstrapComponent, CommonModule, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';\r\nimport { GpSmartEchartWidgetComponent } from './gp-smart-echart-widget.component';\r\nimport * as preview from './preview-image';\r\nimport { NgxEchartsModule } from 'ngx-echarts';\r\nimport { SmartChartConfigComponent } from './smart-chart-config/smart-chart-config.component';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport * as echarts from 'echarts';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  imports: [\r\n    CoreModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts\r\n    }),\r\n  ],\r\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\r\n  providers: [\r\n    GpSmartEchartWidgetService,\r\n    {\r\n        provide:  HOOK_COMPONENTS,\r\n        multi: true,\r\n        useValue: {\r\n            id: 'smart.echart',\r\n            label: 'Smart eChart',\r\n            description: 'linechart derived from api data',\r\n            previewImage: preview.previewImage,\r\n            component: GpSmartEchartWidgetComponent,\r\n            configComponent: SmartChartConfigComponent,\r\n            data : {\r\n                ng1 : {\r\n                    options: { noDeviceTarget: false,\r\n                    noNewWidgets: false,\r\n                    deviceTargetNotRequired: true,\r\n                    groupsSelectable: true\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }],\r\n  exports: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  entryComponents: [GpSmartEchartWidgetComponent,SmartChartConfigComponent]\r\n})\r\nexport class GpSmartEchartWidgetModule { }\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const previewImage = '';"]}