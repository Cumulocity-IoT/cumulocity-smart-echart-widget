{"version":3,"sources":["../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../projects/gp-smart-echart-widget/src/lib/util/extractValueFromJSON.util.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/model/config.modal.ts","../../../../projects/gp-smart-echart-widget/src/lib/smart-chart-config/smart-chart-config.component.ts","../../../../projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.module.ts","../../../../projects/gp-smart-echart-widget/src/lib/preview-image.ts"],"names":["GpSmartEchartWidgetService","http","this","prototype","getAPIData","apiUrl","get","Injectable","args","providedIn","HttpClient","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","create","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","extractValueFromJSON","keyArr","parent","obj","keysArray","Array","isArray","resultArray","keysArray_1","keysArray_1_1","keys","split","parentRef","idx","toString","join","GpSmartEchartWidgetComponent","chartService","fetchClient","chartOption","allSubscriptions","realtime","deviceId","isDatahubPostCall","ngOnInit","chartDiv","mapDivRef","nativeElement","createChart","config","dataFromUser","userInput","reloadData","dataChart","echarts","init","showLoading","colors","colorsForChart","isDevMode","console","log","showApiInput","_a","toPromise","serviceData","_c","showDatahubInput","sqlReqObject","sql","sqlQuery","limit","sqlLimit","format","fetch","datahubUrl","JSON","stringify","method","response","_b","json","hideLoading","axisFontSize","fontSize","undefined","area","areaOpacity","opacity","aggrList","resultDimension","getResultDimesions","groupBy","dimensions","encodeData","datasetId","columns","data","type","getDatasetDimensions","yDimensions","xDimensions","yAxisName","xAxisName","yAxisDimension","getFormattedName","xAxisDimension","indexOf","getEncodeData","dataset","id","source","tooltip","trigger","axisPointer","confine","xAxis","name","nameLocation","nameGap","scale","getXAxisType","boundaryGap","axisLabel","interval","rotate","xAxisRotateLabels","yAxis","getYAxisType","yAxisRotateLabels","grid","left","top","right","bottom","containLabel","legend","icon","width","formatter","a","slice","replace","str","toUpperCase","trim","dataZoom","showZoomFeature","sliderZoom","toolbox","feature","show","saveAsImage","restore","series","yAxisIndex","pieSlicenName","pieSliceValue","angleAxis","startAngle","radiusAxis","min","polar","radarDimensions","seriesData","getRadarSeriesData","indexOfXDimension","indicatorData","radar","indicator","radius","radarChartRadius","registerTransform","simpleTransform","aggregate","listName","fromDatasetId","transform","resultDimensions","print","selected","detail","getPieChartSeriesData","map","item","getPolarChartSeriesData","xAxisObject","yAxisObject","layout","getScatterChartSeriesData","boxZoom","getHorizontalSeriesData","orient","getSeriesData","input","getChartType","_this","coordinateSystem","showSymbol","encode","angle","showLabel","color","emphasis","symbolSize","scatterSymbolSize","x","getChartItemColor","xAxisDimensions_1","xAxisData_1","forEach","focus","itemStyle","shadowOffsetX","shadowColor","yAxisDimensions_1","yAxisData_1","dimensionRecord_1","reduce","acc","dimension","key","values","result1","yAxisData_2","array","stack","getStackName","xAxisData_2","smooth","smoothLine","areaStyle","yAxisData_3","convradius","roseValue","sliceStyle","pieBorderWidth","pieBorderRadius","borderColor","borderWidth","borderRadius","roseType","avoidLabelOverlap","position","labelLine","shadowBlur","pieSliceName","itemName","xAxisDimensions_2","xAxisData_3","yAxisDimensions_2","yAxisData_4","currentResult","dimensionRecord","indexes","index","element","createObject","dataDim","arr","dimen","yAxisDimensions_3","yAxisData_5","stackList","dimensionArr","stackData","dimensionName","stackValues","stackName","list","groupby","changedNamesForResult","from","aggrDimesnion","aggrMethod","val","xAxisIndex","minSpan","height","hexToRgb","hex","b","exec","parseInt","xAxisDimensions_3","xAxisData_4","onResized","event","newWidth","newHeight","resize","Component","selector","template","FetchClient","ViewChild","static","Input","Stack","AggregateData","chartValues","chartType","chartLayout","yAxisType","disabled","xAxisType","legendType","aggregateMethod","SmartChartConfigComponent","flag","userSelectedColor","title","dataSource","dataSourceValue","addStack","aggrArr","chartData","isGroupByInAggregate","isAggrAdded","configData","EventEmitter","aggregationMethods","onSelection","stackAdded","yAxisDimensionUpdate","deleteStackValue","splice","updateStack","addAnotherStack","addAnotherAggregate","deleteAggrValue","aggr","colorUpdate","colorSelected","colorUpdateByTyping","colorTyped","joinedArr","Set","filter","chartLayoutData","onLayoutSelection","_e","_f","_g","_h","_j","_k","_l","_m","dataSourceSelection","SubmitData","emit","Output","description","previewImage","component","configComponent","ng1","options","noDeviceTarget","noNewWidgets","deviceTargetNotRequired","groupsSelectable","NgModule","declarations","imports","CoreModule","NgxEchartsModule","forRoot","echarts__namespace","AngularResizedEventModule","schemas","CUSTOM_ELEMENTS_SCHEMA","providers","provide","HOOK_COMPONENTS","multi","useValue","Éµ0","exports","entryComponents"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GpSmartEchartWidgetService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n  public getAPIData(apiUrl): Observable<any>{\r\n    return this.http.get(apiUrl);\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isObject(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n}\r\nexport function extractValueFromJSON(keyArr: Array<string> | string, parent: Record<string, any>) {\r\n    const keysArray = Array.isArray(keyArr) ? keyArr : [keyArr];\r\n    const resultArray = [];\r\n    for (const keyStr of keysArray) {\r\n        const keys = keyStr.split('.');\r\n        let parentRef = parent;\r\n        if (keys.length === 1) {\r\n            resultArray.push(parentRef[keys[0]]);\r\n        } else {\r\n            let result;\r\n            for (let idx = 0; idx < keys.length; idx++) {\r\n                const key = keys[idx];\r\n                result = parentRef[key];\r\n                if (isObject(result)) {\r\n                    parentRef = result;\r\n                } else if (idx < keys.length - 1) {\r\n                }\r\n            }\r\n            resultArray.push(result);\r\n        }\r\n    }\r\n    if (keysArray.length > 1) {\r\n        return resultArray.join(' ');\r\n    }\r\n    return resultArray[0];\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, ElementRef, HostListener, Input, OnInit, ViewChild } from '@angular/core';\r\nimport * as echarts from 'echarts';\r\nimport { EChartsOption } from 'echarts';\r\nimport { ChartConfig } from './model/config.modal';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport { isDevMode } from '@angular/core';\r\nimport * as simpleTransform from 'echarts-simple-transform';\r\nimport {\r\n  FetchClient,\r\n  Realtime,\r\n} from '@c8y/client';\r\nimport { extractValueFromJSON } from './util/extractValueFromJSON.util';\r\nimport { ResizedEvent } from 'angular-resize-event';\r\n@Component({\r\n  selector: 'lib-gp-smart-echart-widget',\r\n  templateUrl: './gp-smart-echart-widget.component.html',\r\n  styles: ['gp-smart-echart-widget.component.css']\r\n})\r\nexport class GpSmartEchartWidgetComponent implements OnInit {\r\n  @ViewChild('chartBox', { static: true }) protected mapDivRef: ElementRef;\r\n  @Input() config: ChartConfig;\r\n  serviceData;\r\n  seriesData;\r\n  chartData;\r\n  userInput;\r\n  width: number;\r\n  height: number;\r\n  chartOption: EChartsOption = {};\r\n  protected allSubscriptions: any = [];\r\n  realtime = true;\r\n  deviceId = '';\r\n  protected chartDiv: HTMLDivElement;\r\n  isDatahubPostCall = false;\r\n  dataChart;\r\n  colorsForChart;\r\n  constructor(private chartService: GpSmartEchartWidgetService,\r\n     private fetchClient: FetchClient) { }\r\n  ngOnInit(): void {\r\n    this.chartDiv = this.mapDivRef.nativeElement;\r\n    this.createChart(this.config);\r\n  }\r\n  dataFromUser(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }// end of dataFromUser()\r\n  // create variables for all ChartConfig like value type, apidata from url etc to store the data from user\r\n  // create chart\r\n  reloadData(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }\r\n  // createChart function is used to create chart with the help of echart library\r\n  async createChart(userInput?: ChartConfig) {\r\n    this.dataChart = echarts.init(this.chartDiv);\r\n    this.dataChart.showLoading();\r\n    if (!userInput.colors) {\r\n      if (isDevMode()) { console.log('No colors Specified'); }\r\n      this.colorsForChart = [];\r\n    } else {\r\n      this.colorsForChart = [...userInput.colors.split(',')]\r\n    }\r\n    if (userInput.showApiInput) {\r\n      this.serviceData = await this.chartService.getAPIData(userInput.apiUrl).toPromise();\r\n    } else if (userInput.showDatahubInput) {\r\n      const sqlReqObject = {\r\n        sql: userInput.sqlQuery,\r\n        limit: userInput.sqlLimit,\r\n        format: 'PANDAS'\r\n      };\r\n      const response = await this.fetchClient.fetch(userInput.datahubUrl, {\r\n        body: JSON.stringify(sqlReqObject),\r\n        method: 'POST'\r\n      })\r\n      this.serviceData = await response.json();\r\n      this.isDatahubPostCall = true;\r\n    } else {\r\n      if (isDevMode()) { console.log('No Datasource selected'); }\r\n    }\r\n    if (this.serviceData) {\r\n      this.dataChart.hideLoading();\r\n      let axisFontSize = 0;\r\n      if(userInput.fontSize === 0 || userInput.fontSize === '' || userInput.fontSize === null || userInput.fontSize === undefined){\r\n        axisFontSize = 12;\r\n      }else {\r\n        axisFontSize = userInput.fontSize;\r\n      }\r\n      if (userInput.area === true) {\r\n        if(userInput.areaOpacity == null){\r\n          userInput.area = {};\r\n        } else {\r\n          userInput.area = {\r\n            'opacity': userInput.areaOpacity\r\n          };\r\n        }\r\n      }else {\r\n        userInput.area = null;\r\n      }\r\n      if (userInput.aggrList.length === 0 && !this.isDatahubPostCall) {\r\n        // calls for API without Aggregation\r\n        if (userInput.type === 'pie') {\r\n          this.seriesData = this.getPieChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a = test[0].replace(/([A-Z])/g, ' $1')\r\n                  // uppercase the first character\r\n                  .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              show: false,\r\n              boundaryGap: false,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n            },\r\n            yAxis: {\r\n              type: 'value',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Pie Chart For API', this.chartOption); }\r\n          console.log('Pie Chart For API', this.chartOption);\r\n        }\r\n        // End of piechart for API\r\n        else if (userInput.type === 'polar') {\r\n          this.seriesData = this.getPolarChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            polar: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Polar Chart For API', this.chartOption); }\r\n        }\r\n        // End of Polar CHart for API\r\n        else if (userInput.type === 'scatter') {\r\n          let xAxisObject; let yAxisObject;\r\n          if (userInput.layout === 'horizontalScatter') {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.yAxisDimension];\r\n              }),\r\n              type: this.getYAxisType(userInput),\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            };\r\n          } else {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput),\r\n              axisLabel:{\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            };\r\n          }\r\n          this.seriesData = this.getScatterChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: xAxisObject,\r\n            yAxis: yAxisObject,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            series: this.seriesData\r\n          }\r\n          if (isDevMode()) { console.log('Scatter chart for API', this.chartOption) }\r\n        } // End of Scatter Chart for API\r\n        else if (userInput.type === 'radar') {\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          this.chartOption = {\r\n            // title:{\r\n            //   text:userInput.title,\r\n            //   left:'center'\r\n            // },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            radar: {\r\n              indicator: this.serviceData[userInput.listName].map((item) => {\r\n                return { name: item[userInput.xAxisDimension] };\r\n              }),\r\n              radius: userInput.radarChartRadius\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Radar chart for API', this.chartOption) }\r\n          console.log('Radar chart for API', this.chartOption);\r\n        } // End of Radar CHart for API\r\n        else if ((userInput.type === 'line' || userInput.type === 'bar')\r\n          && (userInput.layout !== 'simpleHorizontalBar' && userInput.layout !== 'stackedHorizontalBar')) {\r\n          this.seriesData = this.getSeriesData(userInput);\r\n          let xAxisName; let yAxisName;\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = ''\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = ''\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.chartOption = {\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n              // name: xAxisName\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              // name: yAxisName\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          };\r\n          if (isDevMode()) { console.log('Simple bar or line chart for API', this.chartOption); }\r\n        }\r\n        // End of Simple Line,Simple Bar,Stacked Line And Stacked Bar for API\r\n        else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n          let xAxisName; let yAxisName;\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = ''\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = ''\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.seriesData = this.getHorizontalSeriesData(userInput);\r\n          this.chartOption =\r\n          {\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left: 'center',\r\n            //   textStyle: {\r\n            //     overflow: 'truncate',\r\n            //   }\r\n            // },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              show: true,\r\n              icon: userInput.legend.icon,\r\n              orient: 'horizontal',\r\n              // top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                return a;\r\n              },\r\n              type: 'scroll',\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            xAxis: {\r\n              // name: xAxisName,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            },\r\n            yAxis: {\r\n              // name: yAxisName,\r\n              type: this.getYAxisType(userInput),\r\n              data: this.serviceData[userInput.listName].map((item) => {\r\n                const val = extractValueFromJSON(userInput.yAxisDimension, item);\r\n                return val;\r\n              }),\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n          };\r\n          if (isDevMode()) { console.log('Horizontal chart for API', this.chartOption); }\r\n        }\r\n        // End of Horizontal Bar & Stacked Horizontal Bar\r\n      } // End of API calls with JSON Response without Aggregation\r\n      else if (userInput.aggrList.length === 0 && this.isDatahubPostCall) {\r\n        // calls for Datahub without Aggregation\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = null;\r\n        // Format of Data from datahub is\r\n        // Result:[\r\n        //   \"columns\":['colA','colB',...,'colN'],\r\n        //   \"data\":[\r\n        //     [\"A1\",\"B1\",...,\"N1\"],\r\n        //     [\"A2\",\"B2\",...,\"N2\"],\r\n        //     ...,\r\n        //     [\"AN\",\"BN\",...,\"NN\"]\r\n        //   ]\r\n        // ]\r\n        // source of Dataset should be [[columns],[datarows]]\r\n        this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        // End of Response Data extraction\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions; let xDimensions;\r\n          let yAxisName = ''; let xAxisName = '';\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: userInput.xAxisDimension,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Bar or Line chart for Datahub without aggregation', this.chartOption); }\r\n        } // End of Bar,Line Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'scatter') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = '';\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = '';\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput),\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          if (isDevMode()) { console.log('Scatter chart without Aggregation for Datahub', this.chartOption); }\r\n        } // End of Scatter Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'pie') {\r\n          dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%', \r\n              left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Pie chart without Aggregation for Datahub', this.chartOption); }\r\n          console.log('Pie chart without Aggregation for Datahub', this.chartOption);\r\n        } // End of Pie chart without Aggregation for Datahub\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions; let xDimensions;\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Polar chart without Aggregation for Datahub', this.chartOption); }\r\n        }  // End of Polar Chart Without Aggregation for Datahub\r\n        else if (userInput.type === 'radar') {\r\n          dimensions = [...userInput.radarDimensions];\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          const indexOfXDimension = this.serviceData[0].indexOf(userInput.xAxisDimension);\r\n          const indicatorData = [];\r\n          for (let i = 1; i < this.serviceData.length; i++) {\r\n            indicatorData.push({ name: this.serviceData[i][indexOfXDimension] });\r\n          }\r\n          this.chartOption = {\r\n            // title:{\r\n            //   text:userInput.title,\r\n            //   left:'center'\r\n            // },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              left: 'left',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            radar: {\r\n              indicator: indicatorData,\r\n              radius: userInput.radarChartRadius\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          if (isDevMode()) { console.log('Radar Chart without Aggregation for Datahub', this.chartOption); }\r\n          console.log('Radar Chart without Aggregation for Datahub', this.chartOption);\r\n        } // End of Radar Chart without Aggregation for Datahub\r\n      } // ENd of Datahub Calls Response without Aggregation\r\n      else if (userInput.aggrList.length > 0) {\r\n        // calls for API & Datahub with Aggregation\r\n        echarts.registerTransform(simpleTransform.aggregate);\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = '_aggregate';\r\n        // Extract the service data based on the response type of wthere call is made to Datahub or Other API\r\n        if (this.isDatahubPostCall) {\r\n          // Format of Data from datahub is\r\n          // Result:[\r\n          //   \"columns\":['colA','colB',...,'colN'],\r\n          //   \"data\":[\r\n          //     [\"A1\",\"B1\",...,\"N1\"],\r\n          //     [\"A2\",\"B2\",...,\"N2\"],\r\n          //     ...,\r\n          //     [\"AN\",\"BN\",...,\"NN\"]\r\n          //   ]\r\n          // ]\r\n          // source of Dataset should be [[columns],[datarows]]\r\n          this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        } else {\r\n          // Format of Data from APi calls is JSON object with key,value\r\n          // Result: [\r\n          //   {\r\n          //     \"key1\": \"val1\",\r\n          //     \"key2\": \"val2\",\r\n          //   },\r\n          //   {\r\n          //     \"key1\": \"val1.1\",\r\n          //     \"key2\": \"val2.1\",\r\n          //   }\r\n          // ]\r\n          this.serviceData = this.serviceData[userInput.listName];\r\n        } // End of Response Data extraction\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          let yDimensions; let xDimensions;\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n              yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n              yAxisName = '';\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n              xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n              xAxisName = '';\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name: yAxisName,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Bar or Line chart', this.chartOption); }\r\n        } // End of Bar,Line Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'scatter') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = this.getDatasetDimensions(userInput);\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          let xAxisName = ''; let yAxisName = '';\r\n          if (userInput.xAxisDimension.split(',').length > 1) {\r\n            xAxisName = '';\r\n          } else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n          }\r\n          if (userInput.yAxisDimension.split(',').length > 1) {\r\n            yAxisName = '';\r\n          } else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions: resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput),\r\n              boundaryGap: false,\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.xAxisRotateLabels\r\n              }\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput),\r\n              axisLabel:{\r\n                interval:0,\r\n                fontSize:axisFontSize,\r\n                rotate:userInput.yAxisRotateLabels\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              // top: '10%',\r\n              type: 'scroll',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          if (isDevMode()) { console.log('Aggregate Scatter chart', this.chartOption); }\r\n        } // End of Scatter Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'pie') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              // top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Pie chart', this.chartOption); }\r\n          console.log('Aggregate Pie chart', this.chartOption);\r\n        } // End of Pie Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions; let xDimensions;\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            // title: {\r\n            //   text: userInput.title,\r\n            //   left:'center',\r\n            // },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              // top: '10%',\r\n              formatter(name) {\r\n                const test = name.split('.').slice(-1);\r\n                const a =\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, (str) => { return str.toUpperCase(); })\r\n                a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          if (isDevMode()) { console.log('Aggregate Polar chart', this.chartOption); }\r\n        }  // End of Polar Chart with Aggregation for datahub and API\r\n      }  // End of calls for API & Datahub with Aggregation\r\n      // End of chartOptions\r\n    } // End of IF condition checking whether variable serviceData has some data or not\r\n  }\r\n  getXAxisType(input) {\r\n    return input.xAxis;\r\n  }\r\n  getYAxisType(input) {\r\n    return input.yAxis;\r\n  }\r\n  getChartType(input) {\r\n    return input.type;\r\n  }\r\n  getFormattedName(input) {\r\n    const test = input.split('.').slice(-1);\r\n    const a = test[0].replace(/([A-Z])/g, ' $1')\r\n      // uppercase the first character\r\n      .replace(/^./, (str) => { return str.toUpperCase(); })\r\n    return a.trim();\r\n  }\r\n  getEncodeData(userInput, datasetId?, xDimensions?, yDimensions?) {\r\n    if (userInput.type === 'polar') {\r\n      return [{\r\n        coordinateSystem: 'polar',\r\n        name: userInput.xAxisDimension,\r\n        type: userInput.layout,\r\n        showSymbol: true,\r\n        encode: {\r\n          radius: userInput.yAxisDimension,\r\n          angle: userInput.xAxisDimension,\r\n          tooltip: [userInput.yAxisDimension, userInput.xAxisDimension]\r\n        },\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        color: this.colorsForChart,\r\n        emphasis: {\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n      }]\r\n    }\r\n    else if (userInput.type === 'scatter') {\r\n      if (userInput.layout === 'horizontalScatter') {\r\n        if (userInput.xAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n            color: this.getChartItemColor(0),\r\n          }]\r\n        } else {\r\n          const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n          const xAxisData = [];\r\n          xAxisDimensions.forEach((value, i) => {\r\n            xAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: xAxisDimensions[i],\r\n                tooltip: [xAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              color: this.getChartItemColor(i),\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          });\r\n          return xAxisData;\r\n        }// End of else part of XAxisDimension\r\n      } else {\r\n        if (userInput.yAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n            color: this.getChartItemColor(0),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }]\r\n        } else {\r\n          const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n          const yAxisData = [];\r\n          yAxisDimensions.forEach((value, i) => {\r\n            yAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: yAxisDimensions[i],\r\n                tooltip: [yAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              color: this.getChartItemColor(i),\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          });\r\n          return yAxisData;\r\n        }// End of else part of YAxisDimension\r\n      }\r\n    }\r\n    else if (userInput.type === 'radar') {\r\n      const dimensions = userInput.radarDimensions.split(',');\r\n      const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n        acc[dimension] = [];\r\n        return acc;\r\n      }, {});\r\n      this.serviceData[userInput.listName].map((item) => {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n      const resultARR = Object.values(dimensionRecord)\r\n      const result1 = Object.keys(dimensionRecord).map((key, i) => ({\r\n        name: key,\r\n        value: dimensionRecord[key],\r\n        itemStyle: {\r\n          color: this.getChartItemColor(i)\r\n        }\r\n      }));\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n    else if (userInput.type === 'bar' && (userInput.layout === 'simpleBar' || userInput.layout === 'stackedBar')) {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          },\r\n          color: this.getChartItemColor(0)\r\n        }];\r\n      } else {\r\n        const yAxisData = [];\r\n        yDimensions.array.forEach((value, i) => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            stack: this.getStackName(userInput.stack, yDimensions[i]),\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n            },\r\n            color: this.getChartItemColor(i)\r\n          }\r\n        }); // end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          name: xDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          },\r\n          color: this.getChartItemColor(0)\r\n        }];\r\n      } else {\r\n        const xAxisData = [];\r\n        xDimensions.forEach((value, i) => {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            stack: this.getStackName(userInput.stack, xDimensions[i]),\r\n            name: xDimensions[i],\r\n            encode: {\r\n              x: xDimensions[i],\r\n              y: yDimensions\r\n            },\r\n            color: this.getChartItemColor(i)\r\n          }\r\n        }); // end of for block\r\n        return xAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'line') {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area,\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n          },\r\n          color: this.getChartItemColor(0)\r\n        }];\r\n      } else {\r\n        const yAxisData = [];\r\n        yDimensions.forEach((value, i) => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId,\r\n            smooth: userInput.smoothLine,\r\n            areaStyle: userInput.area,\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n            },\r\n            color: this.getChartItemColor(i)\r\n          }\r\n        }); // end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === 'pie') {\r\n      const convradius = userInput.radius.split(',');\r\n      let roseValue = ''; let sliceStyle;\r\n      if (userInput.layout === 'roseMode') {\r\n        roseValue = 'rose';\r\n      }\r\n      if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {};\r\n      } else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius\r\n        }\r\n      } else {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius,\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      }\r\n      return [{\r\n        type: userInput.type,\r\n        datasetId,\r\n        radius: convradius,\r\n        roseType: roseValue,\r\n        avoidLabelOverlap: false,\r\n        label: {\r\n          show: false,\r\n          position: 'center',\r\n        },\r\n        labelLine: {\r\n          show: false\r\n        },\r\n        itemStyle: sliceStyle,\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        },\r\n        name: userInput.pieSliceName,\r\n        encode: {\r\n          itemName: [userInput.pieSlicenName],\r\n          value: userInput.pieSliceValue\r\n        },\r\n        color: this.colorsForChart\r\n      }];\r\n    }\r\n  }\r\n  // getScatterChartSeriesData function is used to create series data for scatter chart\r\n  getScatterChartSeriesData(userInput) {\r\n    if (userInput.layout === 'horizontalScatter') {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            return item[userInput.xAxisDimension];\r\n          }),\r\n          itemStyle: {\r\n            color: this.getChartItemColor(0)\r\n          },\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n        const xAxisData = [];\r\n        xAxisDimensions.forEach((value, i) => {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            data: this.serviceData[userInput.listName].map((item) => {\r\n              return item[xAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            itemStyle: {\r\n              color: this.getChartItemColor(i)\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }); // end of for loop\r\n        return xAxisData;\r\n      }// End of else part of XAxisDimension\r\n    } else {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            return item[userInput.yAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          itemStyle: {\r\n            color: this.getChartItemColor(0)\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n        const yAxisData = [];\r\n        yAxisDimensions.forEach((value, i) => {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            data: this.serviceData[userInput.listName].map((item) => {\r\n              return item[yAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            itemStyle: {\r\n              color: this.getChartItemColor(i)\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        });\r\n        return yAxisData;\r\n      }// End of else part of YAxisDimension\r\n    }\r\n  }\r\n  // getPolarChartSeriesData function is used to create series data for polar chart\r\n  getPolarChartSeriesData(userInput) {\r\n    const result = [];\r\n    this.serviceData[userInput.listName].map((item) => {\r\n      const currentResult = [];\r\n      currentResult.push(item[userInput.xAxisDimension]);\r\n      currentResult.push(item[userInput.yAxisDimension]);\r\n      result.push(currentResult);\r\n    });\r\n    return [{\r\n      coordinateSystem: 'polar',\r\n      name: userInput.xAxisDimension,\r\n      type: userInput.layout,\r\n      showSymbol: true,\r\n      data: result,\r\n      label: {\r\n        show: userInput.showLabel\r\n      },\r\n      itemStyle: {\r\n        color: this.getChartItemColor(0)\r\n      },\r\n      emphasis: {\r\n        label: {\r\n          show: true\r\n        },\r\n      },\r\n    }]\r\n  }\r\n  // getRadarSeriesData function is used to get the data from service and store it in seriesData variable\r\n  getRadarSeriesData(userInput) {\r\n    const dimensions = userInput.radarDimensions.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    if (userInput.listName in this.serviceData) {\r\n      this.serviceData[userInput.listName].map((item) => {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      const indexes = dimensions.map((v, index) => {\r\n        const val = v;\r\n        return { key: val, value: this.serviceData[0].indexOf(v) };\r\n      });\r\n      for (let i = 1; i < this.serviceData.length; i++) {\r\n        indexes.forEach(element => {\r\n          dimensionRecord[element.key].push(this.serviceData[i][element.value]);\r\n        });\r\n      }\r\n    }\r\n    const result1 = Object.keys(dimensionRecord).map((key, i) => ({\r\n      name: key,\r\n      value: dimensionRecord[key],\r\n    }));\r\n    if (userInput.listName in this.serviceData) {\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        color: this.colorsForChart,\r\n        data: result1\r\n      }]\r\n    } else {\r\n      return [{\r\n        type: 'radar',\r\n        color: this.colorsForChart,\r\n        data: result1\r\n      }]\r\n    }\r\n  }\r\n  createObject(dataDim, arr, dimen) {\r\n    const dimensions = dimen.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    const indexes = dimensions.map((v, index) => {\r\n      const val = v;\r\n      return { key: val, value: dataDim.indexOf(v) };\r\n    });\r\n    arr.map((item, index) => {\r\n      indexes.keys.forEach(element => {\r\n        dimensionRecord[element.key].push(item[element.value]);\r\n      });\r\n    });\r\n  }\r\n  // getPieChartSeriesData function is used to create series data for pie chart\r\n  getPieChartSeriesData(userInput) {\r\n    // convert comma separated string userInput.radius to array\r\n    const convradius = userInput.radius.split(',');\r\n    let roseValue = ''; let sliceStyle;\r\n    if (userInput.layout === 'roseMode') {\r\n      roseValue = 'rose';\r\n    }\r\n    if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {}\r\n    }\r\n    else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius\r\n      }\r\n    } else {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius,\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    }\r\n    return [{\r\n      name: userInput.listName,\r\n      type: 'pie',\r\n      radius: convradius,\r\n      roseType: roseValue,\r\n      avoidLabelOverlap: false,\r\n      label: {\r\n        show: true,\r\n        position: 'center',\r\n      },\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      itemStyle: sliceStyle,\r\n      emphasis: {\r\n        itemStyle: {\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 0,\r\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      },\r\n      color: this.colorsForChart,\r\n      data: this.serviceData[userInput.listName].map((item, i) => {\r\n        // take val from userinput.pieslice value and return it\r\n        const val = item[userInput.pieSliceValue];\r\n        let nam;\r\n        if (userInput.pieSliceValue === userInput.pieSlicenName) {\r\n          nam = userInput.pieSlicenName;\r\n        } else {\r\n          nam = item[userInput.pieSlicenName]\r\n        }\r\n        return {\r\n          value: val,\r\n          name: nam,\r\n        }\r\n      }),\r\n    }]\r\n  }\r\n  // getseriesdata recieves userinput and returns seriesdata\r\n  // seriesdata is an array of objects\r\n  getSeriesData(userInput) {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: this.getFormattedName(userInput.yAxisDimension),\r\n        data: this.serviceData[userInput.listName].map((item) => {\r\n          return item[userInput.yAxisDimension];\r\n        }),\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area,\r\n        itemStyle: {\r\n          color: this.getChartItemColor(0)\r\n        }\r\n      }];\r\n    } else {\r\n      const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n      const yAxisData = [];\r\n      yAxisDimensions.forEach((value, i) => {\r\n        let ab = this.getStackName(userInput.stackList, yAxisDimensions[i]);\r\n        yAxisData[i] = {\r\n          name: yAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stackList, yAxisDimensions[i]),\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            // return val;\r\n            return item[yAxisDimensions[i]];\r\n          }),\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area,\r\n          itemStyle: {\r\n            color: this.getChartItemColor(i)\r\n          }\r\n        }\r\n      }); // end of for block\r\n      return yAxisData;\r\n    }\r\n  }\r\n  getChartItemColor(index) {\r\n    if (this.colorsForChart[index] === undefined) {\r\n      return ''\r\n    } else {\r\n      return this.colorsForChart[index];\r\n    }\r\n  }\r\n  // Gets the dimensions for dataset\r\n  getDatasetDimensions(userInput) {\r\n    let yDimensions; let xDimensions; let dimensionArr = [];\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      yDimensions = userInput.yAxisDimension;\r\n      dimensionArr.push(yDimensions);\r\n    } else {\r\n      yDimensions = userInput.yAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...yDimensions];\r\n    }\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      xDimensions = userInput.xAxisDimension;\r\n      dimensionArr.push(xDimensions);\r\n    } else {\r\n      xDimensions = userInput.xAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...xDimensions];\r\n    }\r\n    return dimensionArr;\r\n  }\r\n  // if stackdata is empty then return dimensionName\r\n  // else if stackdata is not empty then check if dimensionName is present in stackdata\r\n  // if present then return stackname\r\n  // else return dimensionName\r\n  getStackName(stackData, dimensionName) {\r\n    let result = '';\r\n    stackData.forEach((value, x) => {\r\n      const values = stackData[x].stackValues.split(',');\r\n      values.forEach((element, i) => {\r\n        if (values[i] === dimensionName) {\r\n          result = stackData[x].stackName;\r\n        }\r\n      });\r\n    }); // end of for loop of stackdata\r\n    return result;\r\n  }\r\n  // Get the dimensions and method array for aggregation\r\n  // List comes from aggregate config and conatins both method and dimension name\r\n  // We also need group by to be included as a dimension but without a method\r\n  getResultDimesions(list, groupby) {\r\n    const changedNamesForResult = list.map(({\r\n      aggrDimesnion: from,\r\n      aggrMethod: method\r\n    }) => ({\r\n      from,\r\n      method\r\n    }));\r\n    changedNamesForResult.push({ from: groupby });\r\n    return changedNamesForResult;\r\n  }\r\n  // Method for showing the Slider/Pinch Zoom\r\n  showZoomFeature(val) {\r\n    if (val) {\r\n      return [\r\n        {\r\n          type: 'inside',\r\n          xAxisIndex: 0,\r\n          minSpan: 5\r\n        },\r\n        {\r\n          type: 'slider',\r\n          xAxisIndex: 0,\r\n          minSpan: 5,\r\n          show: true,\r\n          height: 20,\r\n          top: '90%',\r\n        }\r\n      ]\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n  hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n      return r + r + g + g + b + b;\r\n    });\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \"rgba(\" + parseInt(result[1], 16) + \", \" + parseInt(result[2], 16) + \", \" + parseInt(result[3], 16) + \", \" + 0.8 + \")\" : null;\r\n  }\r\n  // Get data for horizontal Bar chart\r\n  getHorizontalSeriesData(userInput) {\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: this.getFormattedName(userInput.xAxisDimension),\r\n        data: this.serviceData[userInput.listName].map((item) => {\r\n          const val = extractValueFromJSON(userInput.xAxisDimension, item);\r\n          return val;\r\n        }),\r\n        itemStyle: {\r\n          color: this.getChartItemColor(0)\r\n        },\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          focus: 'series',\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n      const xAxisData = [];\r\n      xAxisDimensions.forEach((value, i) => {\r\n        xAxisData[i] = {\r\n          name: xAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stack, xAxisDimensions[i]),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              show: true\r\n            },\r\n          },\r\n          data: this.serviceData[userInput.listName].map((item) => {\r\n            const val = extractValueFromJSON(xAxisDimensions[i], item);\r\n            return val;\r\n          }),\r\n          itemStyle: {\r\n            color: this.getChartItemColor(i)\r\n          },\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      });// end of for block\r\n      return xAxisData;\r\n    }\r\n  }\r\n  //  @HostListener('window:resize')\r\n  //  onResize() {\r\n  //    console.log(this.dataChart)\r\n  //    if (this.dataChart) {\r\n  //      this.dataChart.resize();\r\n  //    }\r\n  //  }\r\n  onResized(event: ResizedEvent) {\r\n    this.width = event.newWidth;\r\n    this.height = event.newHeight;\r\n    this.dataChart.resize({\r\n      width: this.width,\r\n      height:this.height\r\n    });\r\n  }\r\n}","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport interface ChartConfig {\r\n    radius: string[];\r\n    tooltip?: Tooltip;\r\n    legend?: Legend;\r\n    toolbox?: Toolbox;\r\n    title?: string | '',\r\n    type?: string | '',\r\n    layout?: string | '',\r\n    dataSource?: string | '',\r\n    dataSourceValue?: string | '',\r\n    xAxis?: string | '',\r\n    xAxisDimension?: string | '',\r\n    yAxis?: string | '',\r\n    yAxisDimension: string | '',\r\n    apiUrl?: string | '',\r\n    sqlQuery?:string |'',\r\n    smoothLine?: boolean,\r\n    area?: any | '',\r\n    stackList: Stack[],\r\n    aggrList: AggregateData[],\r\n    stack: Stack[] | string,\r\n    aggrArr: AggregateData[],\r\n    roseType?: string | '',\r\n    showLabel?: boolean,\r\n    dateFormat?:string;\r\n    itemStyle?: ItemStyle,\r\n    emphasis?:Emphasis;\r\n    sliderZoom?:boolean|'';\r\n    boxZoom?:boolean;\r\n    pieSlicenName?:string | '';\r\n    pieSliceValue?:string | '';\r\n    radarShape?:string | '';\r\n    radarIndicator?:string | '';\r\n    radarDimensions?:string | '';\r\n    showApiInput?: boolean;\r\n    showDatahubInput?:boolean;\r\n    addStack: boolean,\r\n    listName:string|'';\r\n    groupBy?:string | '';\r\n    xAxisName?:string | '';\r\n    yAxisName?:string | '';\r\n    scatterSymbolSize?:string;\r\n    pieBorderWidth?:number|0;\r\n    pieBorderRadius?:number|0;\r\n    colors?:string | '';\r\n    areaOpacity?: string | '';\r\n    radarChartRadius?:number|'';\r\n    fontSize?:number|'';\r\n    xAxisRotateLabels?:number;\r\n    yAxisRotateLabels?:number;\r\n    sqlLimit?:number;\r\n    datahubUrl?:string;\r\n}\r\n\r\nexport class Emphasis{\r\n    label?:Label;\r\n}\r\nexport class Label{\r\n    show?:boolean;\r\n}\r\nexport class ItemStyle{\r\n    borderRadius?:number;\r\n}\r\nexport class YAxis{\r\n    ytype?: string;// 'value','category','time','log'\r\n    name?:string;// name of axis\r\n    position?: string;// left or right\r\n}\r\nexport class Tooltip {\r\n    show?: boolean | '';\r\n    trigger?: string | ''; // 'axis' for line or bar chart,'item' for scatter or pie chart\r\n    triggerOn?: string | '';\r\n    borderColor?: string | '';\r\n    borderWidth?: string | '';\r\n    order?: string | '';// values can be 'seriesAsc','seriesDesc','valueAsc','valueDesc'\r\n}\r\n\r\n// To show symbol,color and name of series\r\nexport class Legend {\r\n    show?: boolean | '';\r\n    type?: string | '';// 'plain' is default,'scroll' when many options are in legend\r\n    orient?: string | '';// 'horizontal' or  'vertical'\r\n    icon?: string | '';// shape of legend ; values can be 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'\r\n    selector?: boolean | '';// to show a select all button for legends or not\r\n    top?: string | '';\r\n    width?: number | '';\r\n\r\n}\r\n\r\nexport class Toolbox {\r\n    show?: boolean | '';\r\n    orient?: string | '';// 'horizontal' or  'vertical'\r\n    feature?: Feature;// 'plain' is default,'scroll' when many options are in legend\r\n}\r\n\r\nexport class Stack{\r\n    stackName: string;\r\n    stackValues:string;\r\n}\r\n\r\nexport class AggregateData{\r\n    aggrDimesnion: string;\r\n    aggrMethod:string;\r\n}\r\n\r\nexport class Feature {\r\n    saveAsImage?: any | '';\r\n    magicType?: any | '';\r\n    dataZoom?: any | '';\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, EventEmitter, Input, OnInit, Output, Pipe } from '@angular/core';\r\nimport { config } from 'process';\r\nimport { AggregateData, ChartConfig, Stack } from '../model/config.modal';\r\nconst chartValues = {\r\n  chartType: [\r\n\r\n    {\r\n      id: 'bar',\r\n      value: 'Bar Chart'\r\n    },\r\n    {\r\n      id: 'line',\r\n      value: 'Line Chart',\r\n    },\r\n    {\r\n      id: 'pie',\r\n      value: 'Pie Chart'\r\n    },\r\n    {\r\n      id: 'radar',\r\n      value: 'Radar Chart'\r\n    },\r\n    {\r\n      id: 'polar',\r\n      value: 'Polar chart'\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      value: 'Scatter Chart'\r\n    }\r\n  ],\r\n  chartLayout: [\r\n    {\r\n      id: 'line',\r\n      layout: [\r\n        {\r\n          id: 'simple',\r\n          value: 'Simple Line Chart'\r\n        },\r\n        {\r\n          id: 'stacked',\r\n          value: 'Stacked Line Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'polar',\r\n      layout: [\r\n        {\r\n          id: 'line',\r\n          value: 'Line'\r\n        },\r\n        {\r\n          id: 'bar',\r\n          value: 'Bar'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'bar',\r\n      layout: [\r\n        {\r\n          id: 'simpleBar',\r\n          value: 'Simple Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedBar',\r\n          value: 'Stacked Bar Chart'\r\n        },\r\n        {\r\n          id: 'simpleHorizontalBar',\r\n          value: 'Simple Horizontal Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedHorizontalBar',\r\n          value: 'Stacked Horizontal Bar Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'pie',\r\n      layout: [\r\n        {\r\n          id: 'simplePie',\r\n          value: 'Simple Pie Chart'\r\n        },\r\n        {\r\n          id: 'roseMode',\r\n          value: 'Rose Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      layout: [\r\n        {\r\n          id: 'simpleScatter',\r\n          value: 'Simple Scatter Chart'\r\n        },\r\n        {\r\n          id: 'horizontalScatter',\r\n          value: 'Horizontal Scatter Chart'\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  yAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled: false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled: false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled: false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n\r\n  xAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled: false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled: false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled: false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  legendType: [\r\n    {\r\n      icon: 'circle',\r\n      value: 'Circle'\r\n    },\r\n    {\r\n      icon: 'rect',\r\n      value: 'Rectangle'\r\n    },\r\n    {\r\n      icon: 'roundRect',\r\n      value: 'Round Rectangle'\r\n    },\r\n    {\r\n      icon: 'triangle',\r\n      value: 'Triangle'\r\n    },\r\n    {\r\n      icon: 'diamond',\r\n      value: 'Diamond'\r\n    },\r\n    {\r\n      icon: 'arrow',\r\n      value: 'Arrow'\r\n    }\r\n  ],\r\n  aggregateMethod: [\r\n    {\r\n      id: 'sum',\r\n      value: 'Sum'\r\n    },\r\n    {\r\n      id: 'count',\r\n      value: 'Count'\r\n    },\r\n    {\r\n      id: 'Q1',\r\n      value: 'Q1'\r\n    },\r\n    {\r\n      id: 'median',\r\n      value: 'Q2 / Median'\r\n    },\r\n    {\r\n      id: 'Q3',\r\n      value: 'Q3'\r\n    },\r\n    {\r\n      id: 'first',\r\n      value: 'First'\r\n    },\r\n    {\r\n      id: 'average',\r\n      value: 'Average'\r\n    },\r\n    {\r\n      id: 'min',\r\n      value: 'Min'\r\n    },\r\n    {\r\n      id: 'max',\r\n      value: 'Max'\r\n    },\r\n  ],\r\n  listName: '',\r\n}\r\n@Component({\r\n  selector: 'lib-smart-chart-config',\r\n  templateUrl: './smart-chart-config.component.html',\r\n  styleUrls: ['./smart-chart-config.component.css']\r\n})\r\n\r\n\r\nexport class SmartChartConfigComponent implements OnInit {\r\n  constructor() { }\r\n  flag = false;\r\n  userSelectedColor = [];\r\n  @Input() config: ChartConfig = {\r\n    listName: '',\r\n    title: '',\r\n    pieSlicenName: '',\r\n    pieSliceValue: '',\r\n    type: '',\r\n    layout: '',\r\n    dataSource: '',\r\n    dataSourceValue: '',\r\n    xAxis: '',\r\n    yAxis: '',\r\n    smoothLine: false,\r\n    apiUrl: '',\r\n    fontSize: 12,\r\n    xAxisRotateLabels: 0,\r\n    yAxisRotateLabels: 0,\r\n    area: false,\r\n    yAxisDimension: '',\r\n    radarDimensions: '',\r\n    addStack: false,\r\n    showApiInput: false,\r\n    stack: [],\r\n    stackList: Stack[''],\r\n    aggrArr: [],\r\n    aggrList: AggregateData[''],\r\n    legend: {\r\n      icon: '',\r\n      width: 330,\r\n      type: 'scroll'\r\n    },\r\n    radius: []\r\n  };\r\n  chartData = chartValues;\r\n  chartLayoutData;\r\n  aggregationMethods;\r\n\r\n  isGroupByInAggregate = false;\r\n  isAggrAdded = false;\r\n  @Output() configData: EventEmitter<any> = new EventEmitter();\r\n  ngOnInit(): void {\r\n    this.aggregationMethods = chartValues.aggregateMethod;\r\n    this.config.aggrList = [];\r\n    this.config.legend = {};\r\n    // Default value for datahub sql query\r\n    if (this.config.datahubUrl === null || this.config.datahubUrl === undefined) {\r\n      this.config.datahubUrl = \"service/datahub/sql?version=v1\";\r\n    }\r\n    if (this.config.sqlLimit === null || this.config.sqlLimit === undefined) {\r\n      this.config.sqlLimit = 100;\r\n    }\r\n    // To initialize the chart layout dropdown\r\n    this.onSelection(this.config.type);\r\n  }\r\n\r\n\r\n  // add another stack to the stackList\r\n  // if stackList is empty, add total to the stackList\r\n  // if stackList is not empty, add another stack to the stackList\r\n  stackAdded(stack) {\r\n    this.config.stackList = [];\r\n    if (stack) {\r\n      this.config.stackList.push(new Stack());\r\n      this.config.stackList.push(new Stack());\r\n    } else {\r\n      this.config.stackList.length = 0;\r\n    }\r\n  }\r\n  yAxisDimensionUpdate(val) {\r\n    // console.log(val, this.config.yAxisDimension)\r\n  }\r\n  deleteStackValue(stack, index) {\r\n    this.config.stackList.splice(index, 1);\r\n  }\r\n\r\n  // updateStack is called when the user changes the type of chart\r\n  // updateStack is called when the user changes the layout of the chart\r\n  // updateStack is called when the user changes the data source of the chart\r\n  updateStack() {\r\n    if (this.config.apiUrl) {\r\n      if (this.config.type === 'bar') {\r\n        if (this.config.layout === 'stackedBar') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n      if (this.config.type === 'line') {\r\n        if (this.config.layout === 'stackedLine') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addAnotherStack() {\r\n    this.config.stackList.push(new Stack());\r\n  }\r\n  addAnotherAggregate() {\r\n    this.isAggrAdded = true;\r\n    this.config.aggrList.push(new AggregateData());\r\n  }\r\n\r\n  deleteAggrValue(aggr, index) {\r\n    this.config.aggrList.splice(index, 1);\r\n    if (this.config.aggrList.length === 0) {\r\n      this.isAggrAdded = false;\r\n    }\r\n  }\r\n  colorUpdate(colorSelected) {\r\n    this.userSelectedColor = [...this.userSelectedColor, colorSelected];\r\n    this.config.colors = this.userSelectedColor.join(',')\r\n  }\r\n  colorUpdateByTyping(colorTyped) {\r\n    let joinedArr = [...this.userSelectedColor, ...colorTyped.split(',')];\r\n    this.userSelectedColor = [...new Set([...joinedArr])]\r\n\r\n  }\r\n  onSelection(value) {\r\n    this.chartData.chartLayout.filter(val => {\r\n      if (value === val.id) {\r\n        this.chartLayoutData = val.layout;\r\n      }\r\n    })\r\n    this.config.addStack = false;\r\n\r\n  }\r\n  onLayoutSelection(value) {\r\n    if (value === 'simpleBar' || value === 'stackedBar' || value === 'simple' || value === 'stacked' || value === 'simpleScatter') {\r\n      for (const val of this.chartData.yAxisType) {\r\n        if (val.id === 'category') {\r\n          val.disabled = true;\r\n        }\r\n      }\r\n      for (const val of this.chartData.xAxisType) {\r\n        if (val.id === 'category') {\r\n          val.disabled = false;\r\n        }\r\n      }\r\n    } else if (value === 'simpleHorizontalBar' || value === 'stackedHorizontalBar' || value === 'horizontalScatter') {\r\n      for (const val of this.chartData.yAxisType) {\r\n        if (val.id === 'category') {\r\n          val.disabled = false;\r\n        }\r\n      }\r\n      for (const val of this.chartData.xAxisType) {\r\n        if (val.id === 'category') {\r\n          val.disabled = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  dataSourceSelection(value) {\r\n    if (value === 'API') {\r\n      this.config.showApiInput = true;\r\n      this.config.showDatahubInput = false;\r\n\r\n    } else if (value === 'datahub') {\r\n      this.config.showDatahubInput = true;\r\n      this.config.showApiInput = false;\r\n\r\n    } else {\r\n      this.config.showApiInput = false;\r\n      this.config.showDatahubInput = false;\r\n    }\r\n  }\r\n\r\n  // if onSelection, onLayoutSelection, dataSourceSelection is called, then submit data and emit config\r\n  SubmitData() {\r\n    this.config.aggrList.filter(element => {\r\n      if (element.aggrDimesnion === this.config.groupBy) {\r\n        this.isGroupByInAggregate = true;\r\n      } else {\r\n        this.isGroupByInAggregate = false;\r\n      }\r\n    });\r\n    if (this.config.area === true) {\r\n      if (this.config.areaOpacity == null) {\r\n        this.config.area = {};\r\n      } else {\r\n        this.config.area = {\r\n          'opacity': this.config.areaOpacity\r\n        };\r\n      }\r\n\r\n\r\n    } else {\r\n      this.config.area = null;\r\n    }\r\n    if (!this.isGroupByInAggregate) {\r\n      this.configData.emit(this.config);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CUSTOM_ELEMENTS_SCHEMA, InjectionToken, NgModule } from '@angular/core';\r\nimport { BootstrapComponent, CommonModule, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';\r\nimport { GpSmartEchartWidgetComponent } from './gp-smart-echart-widget.component';\r\nimport * as preview from './preview-image';\r\nimport { NgxEchartsModule } from 'ngx-echarts';\r\nimport { SmartChartConfigComponent } from './smart-chart-config/smart-chart-config.component';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport * as echarts from 'echarts';\r\nimport { AngularResizedEventModule } from 'angular-resize-event';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  imports: [\r\n    CoreModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts\r\n    }),\r\n    AngularResizedEventModule\r\n  ],\r\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\r\n  providers: [\r\n    GpSmartEchartWidgetService,\r\n    {\r\n        provide:  HOOK_COMPONENTS,\r\n        multi: true,\r\n        useValue: {\r\n            id: 'smart.echart',\r\n            label: 'Smart eChart',\r\n            description: 'linechart derived from api data',\r\n            previewImage: preview.previewImage,\r\n            component: GpSmartEchartWidgetComponent,\r\n            configComponent: SmartChartConfigComponent,\r\n            data : {\r\n                ng1 : {\r\n                    options: { noDeviceTarget: false,\r\n                    noNewWidgets: false,\r\n                    deviceTargetNotRequired: true,\r\n                    groupsSelectable: true\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }],\r\n  exports: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  entryComponents: [GpSmartEchartWidgetComponent,SmartChartConfigComponent]\r\n})\r\nexport class GpSmartEchartWidgetModule { }\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const previewImage = '';"]}