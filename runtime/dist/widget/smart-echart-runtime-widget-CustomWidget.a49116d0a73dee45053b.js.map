{"version":3,"sources":["webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.service.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/util/extractValueFromJSON.util.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.component.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/preview-image.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/model/config.modal.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/smart-chart-config/smart-chart-config.component.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/lib/gp-smart-echart-widget.module.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/public-api.ts","webpack:///C:/smart_chart_cumulocity/projects/gp-smart-echart-widget/src/custom-widget.ts"],"names":["preview.previewImage"],"mappings":"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","file":"smart-echart-runtime-widget-CustomWidget.a49116d0a73dee45053b.js","sourcesContent":["/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GpSmartEchartWidgetService {\r\n\r\n  private httpHeaders: HttpHeaders = new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    \r\n  });\r\n  \r\n  private options = {\r\n    headers: this.httpHeaders,\r\n    // params: new HttpParams().append('resolveIds', '' + true).append('tenantId', 'RACM')\r\n  }\r\n  token = 'bmVlcnUuYXJvcmFAc29mdHdhcmVhZy5jb206TWFuYWdlQDA5ODc=';\r\n  constructor(private http: HttpClient) { \r\n    this.httpHeaders.append(\"Authorization\", \"Bearer \" + this.token);\r\n  }\r\n  \r\n  public getAPIData(apiUrl): Observable<any>{\r\n    console.log('options',this.options);\r\n    // if(apiUrl.indexOf('smart-equipment.eu-latest.cumulocity.com')!=-1){\r\n    //   return this.http.get(apiUrl,this.options);\r\n    // } else {\r\n    return this.http.get(apiUrl);\r\n    // }\r\n\r\n    // const response = await this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n\r\n    // const data = await response.json();\r\n    // return this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n\r\n  }\r\n\r\n}\r\n","function isObject(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n}\r\nexport function extractValueFromJSON(keyArr: Array<string> | string, parent: Record<string, any>) {\r\n    let keysArray = Array.isArray(keyArr) ? keyArr : [keyArr];\r\n    let resultArray = [];\r\n    \r\n    for (let keyStr of keysArray) {\r\n        const keys = keyStr.split('.');\r\n        let parentRef = parent;\r\n        \r\n        if(keys.length === 1){\r\n            resultArray.push(parentRef[keys[0]]);\r\n        } else {\r\n            let result;\r\n            for (let idx = 0; idx < keys.length; idx++) {\r\n                const key = keys[idx];\r\n                result = parentRef[key];\r\n                if (isObject(result)) {\r\n                    parentRef = result;\r\n                } else if (idx < keys.length - 1) {\r\n                }\r\n            }\r\n            resultArray.push(result);\r\n        }    \r\n        \r\n    }\r\n    if(keysArray.length > 1){\r\n        return resultArray.join(' ');\r\n    } \r\n    return resultArray[0];\r\n}\r\n\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport * as echarts from 'echarts';\r\nimport { EChartsOption } from 'echarts';\r\nimport { ChartConfig } from './model/config.modal';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport { map } from 'rxjs/operators';\r\nimport * as simpleTransform from 'echarts-simple-transform';\r\nimport {\r\n  FetchClient,\r\n  Realtime,\r\n} from '@c8y/client';\r\nimport { extractValueFromJSON } from './util/extractValueFromJSON.util';\r\n@Component({\r\n  selector: 'lib-gp-smart-echart-widget',\r\n  templateUrl: './gp-smart-echart-widget.component.html',\r\n  styles: ['gp-smart-echart-widget.component.css']\r\n})\r\nexport class GpSmartEchartWidgetComponent implements OnInit {\r\n  @Input() config: ChartConfig;\r\n  // @Input() config: ChartConfig = {\r\n  //   xAxisDimension: \"PhoneSales\",\r\n  //   apiUrl: \"https://democenter.gateway.webmethodscloud.com/gateway/ConnectedStoreAPIs/1.0/ConnectedStoreAPIs/getQuarterlySales\",\r\n  //   legend: {\r\n  //     \"icon\": \"diamond\",\r\n  //     \"top\": \"10%\",\r\n  //     \"type\": \"scroll\"\r\n  //   },\r\n  //   listName: \"SalesData\",\r\n  //   title: \"TEST\",\r\n  //   dataSource: \"API\",\r\n  //   type: \"bar\",\r\n  //   layout: \"simpleBar\",\r\n  //   xAxis: \"category\",\r\n  //   yAxis: \"value\",\r\n  //   yAxisDimension: \"QuarterSales\",\r\n  //   radius: [],\r\n  //   stackList: [],\r\n  //   aggrList: [],\r\n  //   stack: '',\r\n  //   aggrArr: [],\r\n  //   addStack: false\r\n  // };\r\n  serviceData;\r\n  seriesData;\r\n  chartData;\r\n  userInput;\r\n  chartOption: EChartsOption = {};\r\n  protected allSubscriptions: any = [];\r\n  realtime = true;\r\n  deviceId = '';\r\n  isDatahubPostCall = false;\r\n  constructor(private chartService: GpSmartEchartWidgetService,\r\n    private realTimeService: Realtime, private fetchClient: FetchClient) { }\r\n  ngOnInit(): void {\r\n    // this.createChart(this.config);\r\n    // this.createChart();\r\n  }\r\n  dataFromUser(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }// end of dataFromUser()\r\n  //create variables for all ChartConfig like value type, apidata from url etc to store the data from user\r\n  // create chart\r\n  reloadData(userInput: ChartConfig) {\r\n    this.createChart(userInput);\r\n  }\r\n  //createChart function is used to create chart with the help of echart library\r\n  async createChart(userInput?: ChartConfig) {\r\n    let chartDom = document.getElementById('chart-container');\r\n    let myChart = echarts.init(chartDom);\r\n    myChart.showLoading();\r\n    // let d = this.realtTimeMeasurements(6889031);\r\n    // const response = await this.fetchClient.fetch('service/datahub/dremio/api/v3/job/1e1826e5-0e7d-f38c-61b7-ce059c715700/results');\r\n    if (userInput.showApiInput) {\r\n      \r\n      this.serviceData = await this.chartService.getAPIData(userInput.apiUrl).toPromise();\r\n    } else if (userInput.showDatahubInput) {\r\n\r\n      const sqlReqObject = {\r\n        \"sql\": userInput.sqlQuery,\r\n        \"limit\": 100,\r\n        \"format\": \"PANDAS\"\r\n      };\r\n      const response = await this.fetchClient.fetch(userInput.apiUrl, {\r\n        body: JSON.stringify(sqlReqObject),\r\n        method: 'POST'\r\n      })\r\n      this.serviceData = await response.json();\r\n      this.isDatahubPostCall = true;\r\n    } else {\r\n      console.log('No Datasource selected')\r\n    }\r\n    if (this.serviceData) {\r\n      console.log('data from API', this.serviceData);\r\n      console.log('datahub post', this.isDatahubPostCall)\r\n      // }\r\n      // this.chartService.getAPIData(userInput.apiUrl).subscribe((response) => {\r\n      myChart.hideLoading();\r\n      // this.serviceData = response;\r\n      // this.serviceData = data;\r\n      console.log('userInput', userInput);\r\n      if (userInput.aggrList.length === 0 && !this.isDatahubPostCall) {\r\n        //calls for API without Aggregation\r\n        if (userInput.type === 'pie') {\r\n          this.seriesData = this.getPieChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              show: false,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n            },\r\n            yAxis: {\r\n              type: 'value',\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log('pie without aggr', this.chartOption)\r\n        }\r\n        // End of piechart for API\r\n        else if (userInput.type === 'polar') {\r\n          this.seriesData = this.getPolarChartSeriesData(userInput);\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            polar: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          // console.log(\"NORMAL POLAR CHart Option \", this.chartOption)\r\n        }\r\n        // End of Polar CHart for API\r\n        else if (userInput.type === 'scatter') {\r\n          let xAxisObject, yAxisObject;\r\n          if (userInput.layout === 'horizontalScatter') {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.yAxisDimension];\r\n              }),\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          } else {\r\n            xAxisObject = {\r\n              name: this.getFormattedName(userInput.xAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput)\r\n            };\r\n            yAxisObject = {\r\n              name: this.getFormattedName(userInput.yAxisDimension),\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            };\r\n          }\r\n          this.seriesData = this.getScatterChartSeriesData(userInput);\r\n\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: xAxisObject,\r\n            yAxis: yAxisObject,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            legend:{\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            series: this.seriesData\r\n          }\r\n          console.log('scatter option', this.chartOption)\r\n        } //End of Scatter Chart for API\r\n        else if (userInput.type === 'radar') {\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          this.chartOption = {\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            radar: {\r\n              indicator: this.serviceData[userInput.listName].map(function (item) {\r\n                return { name: item[userInput.xAxisDimension] };\r\n              }),\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log(this.chartOption)\r\n        } // End of Radar CHart for API\r\n        else if ((userInput.type === 'line' || userInput.type === 'bar') && (userInput.layout != 'simpleHorizontalBar' && userInput.layout != 'stackedHorizontalBar')) {\r\n          this.seriesData = this.getSeriesData(userInput);\r\n          let xAxisName,yAxisName;\r\n          if(userInput.xAxisDimension.split(',').length>1){\r\n            xAxisName = ''\r\n          }else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length>1){\r\n            yAxisName = ''\r\n          }else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.chartOption = {\r\n            title: {\r\n              text: userInput.title,\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                return item[userInput.xAxisDimension];\r\n              }),\r\n              type: this.getXAxisType(userInput),\r\n              name:xAxisName\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name:yAxisName\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: userInput.boxZoom,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          };\r\n          console.log('Simple bar or line', this.chartOption)\r\n        }\r\n        // End of Simple Line,Simple Bar,Stacked Line And Stacked Bar for API\r\n        else if (userInput.type === 'bar' && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n          console.log('horizontal chart chosen!!', userInput.aggrList.length);\r\n          let xAxisName,yAxisName;\r\n          if(userInput.xAxisDimension.split(',').length>1){\r\n            xAxisName = ''\r\n          }else {\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension)\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length>1){\r\n            yAxisName = ''\r\n          }else {\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension)\r\n          }\r\n          this.seriesData = this.getHorizontalSeriesData(userInput);\r\n          this.chartOption =\r\n          {\r\n            title: {\r\n              text: userInput.title,\r\n              left: 'center',\r\n              textStyle: {\r\n                overflow: 'truncate',\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              show: true,\r\n              icon: userInput.legend.icon,\r\n              orient: 'horizontal',\r\n              top: '10%',\r\n              formatter: function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                return a;\r\n              },\r\n              type: 'scroll',\r\n              // userInput.legend.orient,\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            xAxis: {\r\n              name: xAxisName,\r\n              // nameLocation: 'middle',\r\n              // nameGap: 50,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              // nameLocation: 'middle',\r\n              // nameGap: 150,\r\n              type: this.getYAxisType(userInput),\r\n              data: this.serviceData[userInput.listName].map(function (item) {\r\n                const val = extractValueFromJSON(userInput.yAxisDimension, item);\r\n                return val;\r\n              }),\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n          };\r\n          console.log('horizontal chart options', this.chartOption)\r\n        }\r\n        // End of Horizontal Bar & Stacked Horizontal Bar\r\n      } // End of API calls with JSON Response without Aggregation\r\n      else if (userInput.aggrList.length === 0 && this.isDatahubPostCall) {\r\n        // calls for Datahub without Aggregation\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        console.log('resultDeimenions', resultDimension)\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = null;\r\n        // Format of Data from datahub is \r\n        // Result:[\r\n        //   \"columns\":['colA','colB',...,'colN'],\r\n        //   \"data\":[\r\n        //     [\"A1\",\"B1\",...,\"N1\"],\r\n        //     [\"A2\",\"B2\",...,\"N2\"],\r\n        //     ...,\r\n        //     [\"AN\",\"BN\",...,\"NN\"]\r\n        //   ]\r\n        // ]\r\n        // source of Dataset should be [[columns],[datarows]]\r\n        this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        //End of Response Data extraction\r\n        console.log('Extracted Service Data', this.serviceData);\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions, xDimensions;\r\n          let yAxisName='',xAxisName='';\r\n\r\n          // if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: userInput.xAxisDimension,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              //   axisLine: {\r\n              //     onZero: false // This is important, so x axis can start from non-zero number\r\n              // },\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          console.log('encode data', encodeData);\r\n          console.log('datahub bar without aggregation', this.chartOption);\r\n        } // End of Bar,Line Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'scatter') {\r\n          dimensions = this.getDatasetDimensions(userInput);\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          let xAxisName='',yAxisName='';\r\n          if(userInput.xAxisDimension.split(',').length > 1){\r\n            xAxisName = '';\r\n          } else{\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length > 1){\r\n            yAxisName = '';\r\n          \r\n          }else{\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n              // data: this.serviceData[userInput.listName].map(function (item) {\r\n              //   return item[userInput.xAxisDimension];\r\n              // }),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          console.log('scatter option transformation', this.chartOption)\r\n        } //End of Scatter Chart without Aggregation for Datahub\r\n        else if (userInput.type === 'pie') {\r\n          dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: \"item\",\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n        } // End of Pie chart without Aggregation for Datahub\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions, xDimensions;\r\n          if (userInput.yAxisDimension.split(',').length === 1) {\r\n            yDimensions = userInput.yAxisDimension;\r\n            dimensions.push(yDimensions);\r\n          } else {\r\n            yDimensions = userInput.yAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...yDimensions];\r\n          }\r\n          if (userInput.xAxisDimension.split(',').length === 1) {\r\n            xDimensions = userInput.xAxisDimension;\r\n            dimensions.push(xDimensions);\r\n          } else {\r\n            xDimensions = userInput.xAxisDimension.split(',');\r\n            dimensions = [...dimensions, ...xDimensions];\r\n          }\r\n          if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n            dimensions.push(userInput.groupBy)\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                // dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            // legend: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            \r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n\r\n            polar: {},\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          // console.log(\"Aggregate POLAR CHart Option \", this.chartOption)\r\n        }  // End of Polar Chart Without Aggregation for Datahub\r\n        else if (userInput.type === 'radar') {\r\n          dimensions = [...userInput.radarDimensions];\r\n          this.seriesData = this.getRadarSeriesData(userInput);\r\n          let indexOfXDimension = this.serviceData[0].indexOf(userInput.xAxisDimension);\r\n          let indicatorData = [];\r\n          for (let i = 1; i < this.serviceData.length; i++) {\r\n            indicatorData.push({ name: this.serviceData[i][indexOfXDimension] });\r\n          }\r\n          // encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',  left: 'left',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n            },\r\n            radar: {\r\n              indicator: indicatorData\r\n            },\r\n            series: this.seriesData,\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            }\r\n          }\r\n          console.log('datahub radar without aggregation', this.chartOption)\r\n        } // End of Radar Chart without Aggregation for Datahub\r\n      } // ENd of Datahub Calls Response without Aggregation\r\n      else if (userInput.aggrList.length > 0) {\r\n        // calls for API & Datahub with Aggregation\r\n        echarts.registerTransform(simpleTransform.aggregate);\r\n        const resultDimension = this.getResultDimesions(userInput.aggrList, userInput.groupBy);\r\n        console.log('resultDeimenions', resultDimension)\r\n        let dimensions = [];\r\n        let encodeData;\r\n        const datasetId = '_aggregate';\r\n        // Extract the service data based on the response type of wthere call is made to Datahub or Other API\r\n        if (this.isDatahubPostCall) {\r\n          // Format of Data from datahub is \r\n          // Result:[\r\n          //   \"columns\":['colA','colB',...,'colN'],\r\n          //   \"data\":[\r\n          //     [\"A1\",\"B1\",...,\"N1\"],\r\n          //     [\"A2\",\"B2\",...,\"N2\"],\r\n          //     ...,\r\n          //     [\"AN\",\"BN\",...,\"NN\"]\r\n          //   ]\r\n          // ]\r\n          // source of Dataset should be [[columns],[datarows]]\r\n          this.serviceData = [this.serviceData.columns, ...this.serviceData.data]\r\n        } else {\r\n          // Format of Data from APi calls is JSON object with key,value\r\n          // Result: [\r\n          //   {\r\n          //     \"key1\": \"val1\",\r\n          //     \"key2\": \"val2\",\r\n          //   },\r\n          //   {\r\n          //     \"key1\": \"val1.1\",\r\n          //     \"key2\": \"val2.1\",\r\n          //   }\r\n          // ]\r\n          this.serviceData = this.serviceData[userInput.listName];\r\n        } //End of Response Data extraction\r\n        console.log('Extracted Service Data', this.serviceData)\r\n        if (userInput.type === 'bar' || userInput.type === 'line') {\r\n          // dimensions = this.getDatasetDimensions(userInput);\r\n          let yDimensions, xDimensions;\r\n          let xAxisName='',yAxisName='';\r\n\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            yAxisName = '';\r\n\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            xAxisName = '';\r\n\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              },\r\n              confine: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 30,\r\n              scale: true,\r\n              type: this.getXAxisType(userInput),\r\n            },\r\n            yAxis: {\r\n              type: this.getYAxisType(userInput),\r\n              name: yAxisName\r\n              //   axisLine: {\r\n              //     onZero: false // This is important, so x axis can start from non-zero number\r\n              // },import { element } from 'protractor';\r\n\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                },\r\n                saveAsImage: {},\r\n                restore: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          console.log('encode data', encodeData);\r\n          console.log('aggregate bar', this.chartOption);\r\n        } //End of Bar,Line Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'scatter') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = this.getDatasetDimensions(userInput);\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n          let xAxisName='',yAxisName='';\r\n          if(userInput.xAxisDimension.split(',').length > 1){\r\n            xAxisName = '';\r\n          } else{\r\n            xAxisName = this.getFormattedName(userInput.xAxisDimension);\r\n\r\n          }\r\n          if(userInput.yAxisDimension.split(',').length > 1){\r\n            yAxisName = '';\r\n          \r\n          }else{\r\n            yAxisName = this.getFormattedName(userInput.yAxisDimension);\r\n\r\n          }\r\n \r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions: resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              name: xAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 50,\r\n              type: this.getXAxisType(userInput)\r\n              // data: this.serviceData[userInput.listName].map(function (item) {\r\n              //   return item[userInput.xAxisDimension];\r\n              // }),\r\n            },\r\n            yAxis: {\r\n              name: yAxisName,\r\n              nameLocation: 'middle',\r\n              nameGap: 70,\r\n              type: this.getYAxisType(userInput)\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            legend: {\r\n              icon: userInput.legend.icon,\r\n              width: 330,\r\n              top: '10%',\r\n              type: 'scroll',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            dataZoom: this.showZoomFeature(userInput.sliderZoom),\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: {\r\n                  show: true,\r\n                  yAxisIndex: 'none'\r\n                },\r\n                restore: {},\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          }\r\n          console.log('scatter option transformation', this.chartOption)\r\n        } //End of Scatter Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'pie') {\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            dimensions = [userInput.pieSlicenName, userInput.pieSliceValue];\r\n\r\n          }\r\n          encodeData = this.getEncodeData(userInput, datasetId);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            tooltip: {\r\n              trigger: \"item\",\r\n              confine: true\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n           \r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n        } //End of Pie Chart with Aggregation for datahub and API\r\n        else if (userInput.type === 'polar') {\r\n          let yDimensions, xDimensions;\r\n\r\n          if (this.isDatahubPostCall) {\r\n            dimensions = null;\r\n          } else {\r\n            if (userInput.yAxisDimension.split(',').length === 1) {\r\n              yDimensions = userInput.yAxisDimension;\r\n              dimensions.push(yDimensions);\r\n            } else {\r\n              yDimensions = userInput.yAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...yDimensions];\r\n            }\r\n            if (userInput.xAxisDimension.split(',').length === 1) {\r\n              xDimensions = userInput.xAxisDimension;\r\n              dimensions.push(xDimensions);\r\n            } else {\r\n              xDimensions = userInput.xAxisDimension.split(',');\r\n              dimensions = [...dimensions, ...xDimensions];\r\n            }\r\n            if (dimensions.indexOf(userInput.groupBy) === -1) {\r\n              dimensions.push(userInput.groupBy)\r\n            }\r\n          }\r\n\r\n          encodeData = this.getEncodeData(userInput, datasetId, xDimensions, yDimensions);\r\n          this.chartOption = {\r\n            dataset: [\r\n              {\r\n                id: 'raw_data',\r\n                dimensions: dimensions,\r\n                source: this.serviceData\r\n              },\r\n              {\r\n                id: '_aggregate',\r\n                fromDatasetId: 'raw_data',\r\n                transform: [\r\n                  {\r\n                    type: 'ecSimpleTransform:aggregate',\r\n                    config: {\r\n                      resultDimensions:\r\n                        resultDimension,\r\n                      groupBy: userInput.groupBy\r\n                    },\r\n                    print: true\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            title: {\r\n              text: userInput.title\r\n            },\r\n            // legend: {},\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross'\r\n              }\r\n            },\r\n            grid: {\r\n              left: '10%',\r\n              top: '20%',\r\n              right: '10%',\r\n              bottom: '15%',\r\n              containLabel: true\r\n            },\r\n            angleAxis: {\r\n              type: 'value',\r\n              startAngle: 0\r\n            },\r\n            radiusAxis: {\r\n              min: 0\r\n            },\r\n            polar: {},\r\n            legend: {\r\n              selected: { detail: false },\r\n              type: 'scroll',\r\n              icon: userInput.legend.icon,\r\n              left: 'left',\r\n              top: '10%',\r\n              formatter:function (name) {\r\n                let test = name.split('.').slice(-1);\r\n                let a =\r\n                  // name.split(/(?=[A-Z])/).join(' ');\r\n                  test[0].replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) { return str.toUpperCase(); })\r\n                    a.trim();\r\n                return a;\r\n              },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            series: encodeData\r\n          };\r\n          // console.log(\"Aggregate POLAR CHart Option \", this.chartOption)\r\n        }  // End of Polar Chart with Aggregation for datahub and API\r\n        // else if (userInput.type === 'radar') {\r\n        //   // this code will not work as Apache does not support aggregation with radar\r\n        //   if (this.isDatahubPostCall) {\r\n        //     dimensions = null;\r\n        //   } else {\r\n        //     dimensions = [...userInput.radarDimensions];\r\n\r\n        //   }\r\n\r\n        //   encodeData = this.getEncodeData(userInput, datasetId);\r\n        //   this.chartOption = {\r\n        //     dataset: [\r\n        //       {\r\n        //         id: 'raw_data',\r\n        //         dimensions: dimensions,\r\n        //         source: this.serviceData\r\n        //       },\r\n        //       {\r\n        //         id: '_aggregate',\r\n        //         fromDatasetId: 'raw_data',\r\n        //         transform: [\r\n        //           {\r\n        //             type: 'ecSimpleTransform:aggregate',\r\n        //             config: {\r\n        //               resultDimensions:\r\n        //                 resultDimension,\r\n        //               groupBy: userInput.groupBy\r\n        //             },\r\n        //             print: true\r\n        //           }\r\n        //         ]\r\n        //       }\r\n        //     ],\r\n        //     legend: {\r\n        //       icon: userInput.legend.icon,\r\n        //       width: 330,\r\n        //       type: 'scroll'\r\n        //     },\r\n        //     tooltip: {\r\n        //       trigger: 'item',\r\n        //     },\r\n        //     radar: {\r\n        //       indicator: this.serviceData[userInput.listName].map(function (item) {\r\n        //         return { name: item[userInput.xAxisDimension] };\r\n        //       }),\r\n        //     },\r\n        //     series: this.seriesData,\r\n        //     toolbox: {\r\n        //       feature: {\r\n        //         saveAsImage: {}\r\n        //       }\r\n        //     }\r\n        //   }\r\n        // } // End of Radar Chart with Aggregation for datahub and API\r\n      }  // End of calls for API & Datahub with Aggregation\r\n      // End of chartOptions\r\n      // })\r\n    } // End of IF condition checking whether variable serviceData has some data or not\r\n  }\r\n  getXAxisType(input) {\r\n    return input.xAxis;\r\n  }\r\n  getYAxisType(input) {\r\n    return input.yAxis;\r\n  }\r\n  getChartType(input) {\r\n    return input.type;\r\n  }\r\n  getFormattedName(input) {\r\n    let test = input.split('.').slice(-1);\r\n    let a = test[0].replace(/([A-Z])/g, ' $1')\r\n      // uppercase the first character\r\n      .replace(/^./, function (str) { return str.toUpperCase(); })\r\n    return a.trim();\r\n  }\r\n  getEncodeData(userInput, datasetId?, xDimensions?, yDimensions?) {\r\n    if (userInput.type === \"polar\") {\r\n      return [{\r\n        coordinateSystem: 'polar',\r\n        name: userInput.xAxisDimension,\r\n        type: userInput.layout,\r\n        showSymbol: true,\r\n        encode: {\r\n          radius: userInput.yAxisDimension,\r\n          angle: userInput.xAxisDimension,\r\n          tooltip: [userInput.yAxisDimension, userInput.xAxisDimension]\r\n        },\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n      }]\r\n    }\r\n    else if (userInput.type === 'scatter') {\r\n      if (userInput.layout === 'horizontalScatter') {\r\n        if (userInput.xAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            // name: userInput.xAxisDimension,\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId: datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n          }]\r\n        } else {\r\n          const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n          let xAxisData = [];\r\n          for (let i in xAxisDimensions) {\r\n            xAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId: datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: xAxisDimensions[i],\r\n                tooltip: [xAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          }\r\n          return xAxisData;\r\n        }// End of else part of XAxisDimension\r\n      } else {\r\n        if (userInput.yAxisDimension.split(',').length === 1) {\r\n          return [{\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            datasetId: datasetId,\r\n            encode: {\r\n              y: userInput.yAxisDimension,\r\n              x: userInput.xAxisDimension,\r\n              tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n            },\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }]\r\n        } else {\r\n          const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n          let yAxisData = [];\r\n          for (let i in yAxisDimensions) {\r\n            yAxisData[i] = {\r\n              type: userInput.type,\r\n              symbolSize: userInput.scatterSymbolSize,\r\n              datasetId: datasetId,\r\n              encode: {\r\n                y: userInput.yAxisDimension,\r\n                x: yAxisDimensions[i],\r\n                tooltip: [yAxisDimensions[i], userInput.yAxisDimension]\r\n              },\r\n              label: {\r\n                show: userInput.showLabel\r\n              },\r\n              emphasis: {\r\n                focus: 'series',\r\n                label: {\r\n                  show: true\r\n                },\r\n                itemStyle: {\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              },\r\n            }\r\n          }\r\n          return yAxisData;\r\n        }// End of else part of YAxisDimension\r\n      }\r\n\r\n      // return [{\r\n      //   // name: userInput.xAxisDimension,\r\n      //   type: userInput.type,\r\n      //   symbolSize: userInput.scatterSymbolSize,\r\n      //   datasetId: datasetId,\r\n      //   encode: {\r\n      //     y: userInput.yAxisDimension,\r\n      //     x: userInput.xAxisDimension,\r\n      //     tooltip: [userInput.xAxisDimension, userInput.yAxisDimension]\r\n      //   },\r\n      // }]\r\n    }\r\n    else if (userInput.type === 'radar') {\r\n      const dimensions = userInput.radarDimensions.split(',');\r\n      const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n        acc[dimension] = [];\r\n        return acc;\r\n      }, {});\r\n      this.serviceData[userInput.listName].map(function (item) {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n      let resultARR = Object.values(dimensionRecord)\r\n      const result1 = Object.keys(dimensionRecord).map(key => ({\r\n        name: key,\r\n        value: dimensionRecord[key]\r\n      }));\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n    else if (userInput.type === \"bar\" && (userInput.layout === 'simpleBar' || userInput.layout === 'stackedBar')) {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          // stack:'a',\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let yAxisData = [];\r\n        for (let i in yDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            stack: this.getStackName(userInput.stack, yDimensions[i]),\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"bar\" && (userInput.layout === 'simpleHorizontalBar' || userInput.layout === 'stackedHorizontalBar')) {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          // stack:'a',\r\n          name: xDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let xAxisData = [];\r\n        for (let i in xDimensions) {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            stack: this.getStackName(userInput.stack, xDimensions[i]),\r\n            name: xDimensions[i],\r\n            encode: {\r\n              x: xDimensions[i],\r\n              y: yDimensions\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return xAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"line\") {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          datasetId: datasetId,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area,\r\n          // stack:'a',\r\n          name: yDimensions,\r\n          encode: {\r\n            x: xDimensions,\r\n            y: yDimensions\r\n            // itemName: ['productName']\r\n          }\r\n        }];\r\n      } else {\r\n        let yAxisData = [];\r\n        for (let i in yDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            datasetId: datasetId,\r\n            smooth: userInput.smoothLine,\r\n            areaStyle: userInput.area,\r\n            name: yDimensions[i],\r\n            encode: {\r\n              x: xDimensions,\r\n              y: yDimensions[i]\r\n              // itemName: ['productName']\r\n            }\r\n          }\r\n        } //end of for block\r\n        return yAxisData;\r\n      }\r\n    }\r\n    else if (userInput.type === \"pie\") {\r\n      let convradius = userInput.radius.split(',');\r\n      let roseValue = ''; let sliceStyle;\r\n      if (userInput.layout === 'roseMode') {\r\n        roseValue = 'rose';\r\n      }\r\n      if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {};\r\n      } else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n        sliceStyle = {\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius\r\n        }\r\n      } else {\r\n        sliceStyle = {\r\n          borderRadius: userInput.pieBorderRadius,\r\n          borderColor: '#fff',\r\n          borderWidth: userInput.pieBorderWidth\r\n        }\r\n      }\r\n      return [{\r\n        type: userInput.type,\r\n        datasetId: datasetId,\r\n        radius: convradius,\r\n        roseType: roseValue,\r\n        avoidLabelOverlap: false,\r\n        label: {\r\n          show: false,\r\n          position: 'center',\r\n        },\r\n        labelLine: {\r\n          show: false\r\n        },\r\n        itemStyle: sliceStyle,\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        },\r\n        name: userInput.pieSliceName,\r\n        encode: {\r\n          itemName: [userInput.pieSlicenName],\r\n          value: userInput.pieSliceValue\r\n        }\r\n      }];\r\n    }\r\n  }\r\n  // getScatterChartSeriesData function is used to create series data for scatter chart\r\n  getScatterChartSeriesData(userInput) {\r\n    // const result = [];\r\n    // this.serviceData[userInput.listName].map(function (item) {\r\n    //   const currentResult = [];\r\n    //   currentResult.push(item[userInput.xAxisDimension]);\r\n    //   currentResult.push(item[userInput.yAxisDimension]);\r\n    //   result.push(currentResult);\r\n    // });\r\n    if (userInput.layout === 'horizontalScatter') {\r\n      if (userInput.xAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          // data: result,\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[userInput.xAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n        let xAxisData = [];\r\n        for (let i in xAxisDimensions) {\r\n          xAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            // data: result,\r\n            data: this.serviceData[userInput.listName].map(function (item) {\r\n              return item[xAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }\r\n        return xAxisData;\r\n      }// End of else part of XAxisDimension\r\n    } else {\r\n      if (userInput.yAxisDimension.split(',').length === 1) {\r\n        return [{\r\n          type: userInput.type,\r\n          symbolSize: userInput.scatterSymbolSize,\r\n          // data: result,\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[userInput.yAxisDimension];\r\n          }),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              show: true\r\n            },\r\n            itemStyle: {\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          },\r\n        }]\r\n      } else {\r\n        const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n        let yAxisData = [];\r\n        for (let i in yAxisDimensions) {\r\n          yAxisData[i] = {\r\n            type: userInput.type,\r\n            symbolSize: userInput.scatterSymbolSize,\r\n            // data: result,\r\n            data: this.serviceData[userInput.listName].map(function (item) {\r\n              return item[yAxisDimensions[i]];\r\n            }),\r\n            label: {\r\n              show: userInput.showLabel\r\n            },\r\n            emphasis: {\r\n              focus: 'series',\r\n              label: {\r\n                show: true\r\n              },\r\n              itemStyle: {\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n          }\r\n        }\r\n        return yAxisData;\r\n      }// End of else part of YAxisDimension\r\n    }\r\n\r\n  }\r\n  // getPolarChartSeriesData function is used to create series data for polar chart\r\n  getPolarChartSeriesData(userInput) {\r\n    const result = [];\r\n    this.serviceData[userInput.listName].map(function (item) {\r\n      const currentResult = [];\r\n      currentResult.push(item[userInput.xAxisDimension]);\r\n      currentResult.push(item[userInput.yAxisDimension]);\r\n      result.push(currentResult);\r\n    });\r\n    return [{\r\n      coordinateSystem: 'polar',\r\n      name: userInput.xAxisDimension,\r\n      type: userInput.layout,\r\n      showSymbol: true,\r\n      data: result,\r\n      label: {\r\n        show: userInput.showLabel\r\n      },\r\n      emphasis: {\r\n        label: {\r\n          show: true\r\n        },\r\n      },\r\n    }]\r\n  }\r\n  // getRadarSeriesData function is used to get the data from service and store it in seriesData variable\r\n  getRadarSeriesData(userInput) {\r\n    const dimensions = userInput.radarDimensions.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    console.log('dimensions', dimensions);\r\n\r\n    if (userInput.listName in this.serviceData) {\r\n      this.serviceData[userInput.listName].map(function (item) {\r\n        Object.keys(item).forEach(key => {\r\n          if (dimensionRecord[key]) {\r\n            dimensionRecord[key].push(item[key])\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      let indexes = dimensions.map((v, index) => {\r\n        let val = v;\r\n        return { key: val, value: this.serviceData[0].indexOf(v) };\r\n      });\r\n      for (let i = 1; i < this.serviceData.length; i++) {\r\n        indexes.forEach(element => {\r\n          dimensionRecord[element.key].push(this.serviceData[i][element.value]);\r\n        });\r\n      }\r\n    }\r\n\r\n    // let resultARR = Object.values(dimensionRecord)\r\n    const result1 = Object.keys(dimensionRecord).map(key => ({\r\n      name: key,\r\n      value: dimensionRecord[key]\r\n    }));\r\n    if (userInput.listName in this.serviceData) {\r\n      return [{\r\n        name: userInput.listName,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    } else {\r\n      return [{\r\n        // name: userInput.,\r\n        type: 'radar',\r\n        data: result1\r\n      }]\r\n    }\r\n\r\n  }\r\n\r\n\r\n  createObject(dataDim, arr, dimen) {\r\n    const dimensions = dimen.split(',');\r\n    const dimensionRecord = dimensions.reduce((acc, dimension) => {\r\n      acc[dimension] = [];\r\n      return acc;\r\n    }, {});\r\n    let indexes = dimensions.map((v, index) => {\r\n      let val = v;\r\n      return { key: val, value: dataDim.indexOf(v) };\r\n    });\r\n\r\n    arr.map(function (item, index) {\r\n      console.log('item ', item, '   index ', index);\r\n      indexes.keys.forEach(element => {\r\n        dimensionRecord[element.key].push(item[element.value]);\r\n      });\r\n    });\r\n  }\r\n\r\n  //getPieChartSeriesData function is used to create series data for pie chart\r\n  getPieChartSeriesData(userInput) {\r\n    //convert comma separated string userInput.radius to array\r\n    let convradius = userInput.radius.split(',');\r\n    let roseValue = ''; let sliceStyle;\r\n    if (userInput.layout === 'roseMode') {\r\n      roseValue = 'rose';\r\n    }\r\n    if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {}\r\n    }\r\n    else if (userInput.pieBorderWidth > 0 && userInput.pieBorderRadius === undefined) {\r\n      sliceStyle = {\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    } else if (userInput.pieBorderWidth === undefined && userInput.pieBorderRadius > 0) {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius\r\n      }\r\n    } else {\r\n      sliceStyle = {\r\n        borderRadius: userInput.pieBorderRadius,\r\n        borderColor: '#fff',\r\n        borderWidth: userInput.pieBorderWidth\r\n      }\r\n    }\r\n    return [{\r\n      name: userInput.listName,\r\n      type: 'pie',\r\n      radius: convradius,\r\n      roseType: roseValue,\r\n      avoidLabelOverlap: false,\r\n      label: {\r\n        show: true,\r\n        position: 'center',\r\n      },\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      itemStyle:sliceStyle,\r\n      emphasis: {\r\n        // label: {\r\n        //   show: true,\r\n        //   fontSize: '30',\r\n        //   fontWeight: 'bold'\r\n        // }\r\n        itemStyle: {\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 0,\r\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      },\r\n      data: this.serviceData[userInput.listName].map(function (item) {\r\n        //take val from userinput.pieslice value and return it\r\n        const val = item[userInput.pieSliceValue];\r\n        let nam;\r\n        if (userInput.pieSliceValue === userInput.pieSlicenName) {\r\n          nam = userInput.pieSlicenName;\r\n        } else {\r\n          nam = item[userInput.pieSlicenName]\r\n        }\r\n        return {\r\n          value: val,\r\n          name: nam\r\n        }\r\n      }),\r\n    }]\r\n  }\r\n  //getseriesdata recieves userinput and returns seriesdata\r\n  //seriesdata is an array of objects\r\n  getSeriesData(userInput) {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: userInput.listName,\r\n        // data as servicedata's userInput.listName from userinput yaxis dimension without using map function\r\n        data: this.serviceData[userInput.listName].map(function (item) {\r\n          return item[userInput.yAxisDimension];\r\n        }),\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const yAxisDimensions = userInput.yAxisDimension.split(',');\r\n      let yAxisData = [];\r\n      for (let i in yAxisDimensions) {\r\n        yAxisData[i] = {\r\n          name: yAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stack, yAxisDimensions[i]),\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            return item[yAxisDimensions[i]];\r\n          }),\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      } //end of for block\r\n      return yAxisData;\r\n    }\r\n  }\r\n  // Gets the dimensions for dataset\r\n  getDatasetDimensions(userInput) {\r\n    let yDimensions, xDimensions, dimensionArr = [];\r\n    // if (userInput.type === 'bar' || userInput.type === 'line') {\r\n    if (userInput.yAxisDimension.split(',').length === 1) {\r\n      yDimensions = userInput.yAxisDimension;\r\n      dimensionArr.push(yDimensions);\r\n    } else {\r\n      yDimensions = userInput.yAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...yDimensions];\r\n    }\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      xDimensions = userInput.xAxisDimension;\r\n      dimensionArr.push(xDimensions);\r\n    } else {\r\n      xDimensions = userInput.xAxisDimension.split(',');\r\n      dimensionArr = [...dimensionArr, ...xDimensions];\r\n    }\r\n    return dimensionArr;\r\n  }\r\n  // if stackdata is empty then return dimensionName\r\n  // else if stackdata is not empty then check if dimensionName is present in stackdata\r\n  // if present then return stackname\r\n  // else return dimensionName\r\n  getStackName(stackData, dimensionName) {\r\n    let result = '';\r\n    for (let x in stackData) {\r\n      let values = stackData[x].stackValues.split(',');\r\n      for (let i in values) {\r\n        if (values[i] === dimensionName) {\r\n          result = stackData[x].stackName;\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //Get the dimensions and method array for aggregation\r\n  // List comes from aggregate config and conatins both method and dimension name\r\n  //We also need group by to be included as a dimension but without a method\r\n  getResultDimesions(list, groupby) {\r\n    const changedNamesForResult = list.map(({\r\n      aggrDimesnion: from,\r\n      aggrMethod: method\r\n    }) => ({\r\n      from,\r\n      method\r\n    }));\r\n    changedNamesForResult.push({ from: groupby });\r\n    return changedNamesForResult;\r\n  }\r\n  // Method for showing the Slider/Pinch Zoom\r\n  showZoomFeature(val) {\r\n    if (val) {\r\n      return [\r\n        {\r\n          type: 'inside',\r\n          xAxisIndex: 0,\r\n          minSpan: 5\r\n        },\r\n        {\r\n          type: 'slider',\r\n          xAxisIndex: 0,\r\n          minSpan: 5,\r\n          show: true,\r\n          height: 20,\r\n          top: '90%',\r\n        }\r\n      ]\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n  // Get data for horizontal Bar chart\r\n  getHorizontalSeriesData(userInput) {\r\n    if (userInput.xAxisDimension.split(',').length === 1) {\r\n      return [{\r\n        name: userInput.listName,\r\n        data: this.serviceData[userInput.listName].map(function (item) {\r\n          const val = extractValueFromJSON(userInput.xAxisDimension, item);\r\n          return val;\r\n        }),\r\n        label: {\r\n          show: userInput.showLabel\r\n        },\r\n        emphasis: {\r\n          focus: 'series',\r\n          label: {\r\n            show: true\r\n          },\r\n        },\r\n        type: userInput.type,\r\n        smooth: userInput.smoothLine,\r\n        areaStyle: userInput.area\r\n      }];\r\n    } else {\r\n      const xAxisDimensions = userInput.xAxisDimension.split(',');\r\n      let xAxisData = [];\r\n      for (let i in xAxisDimensions) {\r\n        xAxisData[i] = {\r\n          name: xAxisDimensions[i],\r\n          stack: this.getStackName(userInput.stack, xAxisDimensions[i]),\r\n          label: {\r\n            show: userInput.showLabel\r\n          },\r\n          emphasis: {\r\n            // focus:'series',\r\n            label: {\r\n              show: true\r\n            },\r\n          },\r\n          data: this.serviceData[userInput.listName].map(function (item) {\r\n            // return item[yAxisDimensions[i]];\r\n            const val = extractValueFromJSON(xAxisDimensions[i], item);\r\n            return val;\r\n          }),\r\n          // markPoint: {\r\n          //   data: [\r\n          //     { type: 'max', name: 'Max' },\r\n          //     { type: 'min', name: 'Min' }\r\n          //   ]\r\n          // },\r\n          // markLine: {\r\n          //   data: [{ type: 'average', name: 'Avg' }]\r\n          // }\r\n          // ,\r\n          type: userInput.type,\r\n          smooth: userInput.smoothLine,\r\n          areaStyle: userInput.area\r\n        }\r\n      } //end of for block\r\n      return xAxisData;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const previewImage = '';","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport interface ChartConfig {\r\n    radius: string[];\r\n    tooltip?: Tooltip;\r\n    legend?: Legend;\r\n    toolbox?: Toolbox;\r\n    title?: string | '',\r\n    type?: string | '',\r\n    layout?: string | '',\r\n    dataSource?: string | '',\r\n    dataSourceValue?: string | '',\r\n    xAxis?: string | '',\r\n    xAxisDimension?: string | '',\r\n    yAxis?: string | '',\r\n    yAxisDimension: string | '',\r\n    apiUrl?: string | '',\r\n    sqlQuery?:string |'',\r\n    smoothLine?: boolean,\r\n    area?: any | '',\r\n    stackList: Stack[],\r\n    aggrList: AggregateData[],\r\n    stack: Stack[] | string,\r\n    aggrArr: AggregateData[],\r\n    roseType?: string | '',\r\n    showLabel?: boolean,\r\n    dateFormat?:string;\r\n    itemStyle?: ItemStyle,\r\n    emphasis?:Emphasis;\r\n    sliderZoom?:boolean|'';\r\n    boxZoom?:boolean;\r\n    pieSlicenName?:string | '';\r\n    pieSliceValue?:string | '';\r\n    radarShape?:string | '';\r\n    radarIndicator?:string | '';\r\n    radarDimensions?:string | '';\r\n    showApiInput?: boolean;\r\n    showDatahubInput?:boolean;\r\n    addStack: boolean,\r\n    listName:string|'';\r\n    groupBy?:string | '';\r\n    xAxisName?:string | '';\r\n    yAxisName?:string | '';\r\n    scatterSymbolSize?:string;\r\n    pieBorderWidth?:number|0;\r\n    pieBorderRadius?:number|0;\r\n}\r\n\r\nexport class Emphasis{\r\n    label?:Label;\r\n}\r\nexport class Label{\r\n    show?:boolean;\r\n}\r\nexport class ItemStyle{\r\n    borderRadius?:number;\r\n}\r\nexport class YAxis{\r\n    ytype?: string;//'value','category','time','log'\r\n    name?:string;//name of axis\r\n    position?: string;//left or right\r\n}\r\nexport class Tooltip {\r\n    show?: boolean | '';\r\n    trigger?: string | ''; //'axis' for line or bar chart,'item' for scatter or pie chart\r\n    triggerOn?: string | '';\r\n    borderColor?: string | '';\r\n    borderWidth?: string | '';\r\n    order?: string | '';//values can be 'seriesAsc','seriesDesc','valueAsc','valueDesc'\r\n}\r\n\r\n// To show symbol,color and name of series\r\nexport class Legend {\r\n    show?: boolean | '';\r\n    type?: string | '';//'plain' is default,'scroll' when many options are in legend\r\n    orient?: string | '';//'horizontal' or  'vertical'\r\n    icon?: string | '';//shape of legend ; values can be 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'\r\n    selector?: boolean | '';//to show a select all button for legends or not\r\n    top?: string | '';\r\n    width?: Number | '';\r\n\r\n}\r\n\r\nexport class Toolbox {\r\n    show?: boolean | '';\r\n    orient?: string | '';//'horizontal' or  'vertical'\r\n    feature?: Feature;//'plain' is default,'scroll' when many options are in legend\r\n}\r\n\r\nexport class Stack{\r\n    stackName: string;\r\n    stackValues:string;\r\n}\r\n\r\nexport class AggregateData{\r\n    aggrDimesnion: string;\r\n    aggrMethod:string;\r\n}\r\n\r\nexport class Feature {\r\n    saveAsImage?: any | '';\r\n    magicType?: any | '';\r\n    dataZoom?: any | '';\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, Pipe } from '@angular/core';\r\nimport { config } from 'process';\r\nimport { AggregateData, ChartConfig, Stack } from '../model/config.modal';\r\nconst chartValues = {\r\n  chartType: [\r\n\r\n    {\r\n      id: 'bar',\r\n      value: 'Bar Chart'\r\n    },\r\n    {\r\n      id: 'line',\r\n      value: 'Line Chart',\r\n    },\r\n    {\r\n      id: 'pie',\r\n      value: 'Pie Chart'\r\n    },\r\n    {\r\n      id: 'radar',\r\n      value: 'Radar Chart'\r\n    },\r\n    {\r\n      id: 'polar',\r\n      value: 'Polar chart'\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      value: 'Scatter Chart'\r\n    }\r\n  ],\r\n  chartLayout: [\r\n    {\r\n      id: 'line',\r\n      layout: [\r\n        {\r\n          id: 'simple',\r\n          value: 'Simple Line Chart'\r\n        },\r\n        {\r\n          id: 'stacked',\r\n          value: 'Stacked Line Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'polar',\r\n      layout: [\r\n        {\r\n          id: 'line',\r\n          value: 'Line'\r\n        },\r\n        {\r\n          id: 'bar',\r\n          value: 'Bar'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'bar',\r\n      layout: [\r\n        {\r\n          id: 'simpleBar',\r\n          value: 'Simple Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedBar',\r\n          value: 'Stacked Bar Chart'\r\n        },\r\n        {\r\n          id: 'simpleHorizontalBar',\r\n          value: 'Simple Horizontal Bar Chart'\r\n        },\r\n        {\r\n          id: 'stackedHorizontalBar',\r\n          value: 'Stacked Horizontal Bar Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'pie',\r\n      layout: [\r\n        {\r\n          id: 'simplePie',\r\n          value: 'Simple Pie Chart'\r\n        },\r\n        {\r\n          id: 'roseMode',\r\n          value: 'Rose Chart'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 'scatter',\r\n      layout: [\r\n        {\r\n          id: 'simpleScatter',\r\n          value: 'Simple Scatter Chart'\r\n        },\r\n        {\r\n          id: 'horizontalScatter',\r\n          value: 'Horizontal Scatter Chart'\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  yAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  \r\n  xAxisType: [\r\n    {\r\n      id: 'value',\r\n      value: 'Value',\r\n      disabled:false\r\n    },\r\n    {\r\n      id: 'category',\r\n      value: 'Category',\r\n      disabled:false\r\n\r\n    },\r\n    {\r\n      id: 'time',\r\n      value: 'Time',\r\n      disabled:false\r\n    },\r\n    // {\r\n    //   id: 'log',\r\n    //   value: 'Log',\r\n    //   disabled:false\r\n    // },\r\n  ],\r\n  legendType: [\r\n    {\r\n      icon: 'circle',\r\n      value: 'Circle'\r\n    },\r\n    {\r\n      icon: 'rect',\r\n      value: 'Rectangle'\r\n    },\r\n    {\r\n      icon: 'roundRect',\r\n      value: 'Round Rectangle'\r\n    },\r\n    {\r\n      icon: 'triangle',\r\n      value: 'Triangle'\r\n    },\r\n    {\r\n      icon: 'diamond',\r\n      value: 'Diamond'\r\n    },\r\n    {\r\n      icon: 'arrow',\r\n      value: 'Arrow'\r\n    }\r\n  ],\r\n  aggregateMethod: [\r\n    {\r\n      id: 'sum',\r\n      value: 'Sum'\r\n    },\r\n    {\r\n      id: 'count',\r\n      value: 'Count'\r\n    },\r\n    {\r\n      id: 'Q1',\r\n      value: 'Q1'\r\n    },\r\n    {\r\n      id: 'median',\r\n      value: 'Q2 / Median'\r\n    },\r\n    {\r\n      id: 'Q3',\r\n      value: 'Q3'\r\n    },\r\n    {\r\n      id: 'first',\r\n      value: 'First'\r\n    },\r\n    {\r\n      id: 'average',\r\n      value: 'Average'\r\n    },\r\n    {\r\n      id: 'min',\r\n      value: 'Min'\r\n    },\r\n    {\r\n      id: 'max',\r\n      value: 'Max'\r\n    },\r\n  ],\r\n  listName: '',\r\n}\r\n@Component({\r\n  selector: 'app-smart-chart-config',\r\n  templateUrl: './smart-chart-config.component.html',\r\n  styleUrls: ['./smart-chart-config.component.css']\r\n})\r\n\r\n\r\nexport class SmartChartConfigComponent implements OnInit {\r\n  flag = false;\r\n  @Input() config: ChartConfig = {\r\n    listName: '',\r\n    title: 'DATA CHART',\r\n    pieSlicenName: 'Date',\r\n    pieSliceValue: 'PhoneSales',\r\n    type: '',\r\n    layout: '',\r\n    dataSource: '',\r\n    dataSourceValue: '',\r\n    xAxis: '',\r\n    yAxis: '',\r\n    smoothLine: false,\r\n    apiUrl: '',\r\n    area: false,\r\n    yAxisDimension: 'QuarterSales',\r\n    radarDimensions: 'count,costOfRepair',\r\n    addStack: false,\r\n    showApiInput: false,\r\n    stack: [],\r\n    stackList: Stack[''],\r\n    aggrArr: [],\r\n    aggrList: AggregateData[''],\r\n    // groupBy: '',\r\n    legend: {\r\n      icon: '',\r\n      width: 330,\r\n      type: 'scroll'\r\n    },\r\n    radius: []\r\n  };\r\n\r\n  // @Input() config: ChartConfig = {\r\n  //   listName: '',\r\n  //   title: 'DATA CHART',\r\n  //   pieSlicenName: '',\r\n  //   pieSliceValue: '',\r\n  //   type: '',\r\n  //   layout: '',\r\n  //   dataSource: '',\r\n  //   dataSourceValue: '',\r\n  //   xAxis: '',\r\n  //   yAxis: '',\r\n  //   smoothLine: false,\r\n  //   apiUrl: '',\r\n  //   area: false,\r\n  //   yAxisDimension: 'Temperature',\r\n  //   radarDimensions: '',\r\n  //   addStack: false,\r\n  //   showApiInput: false,\r\n  //   showDatahubInput: false,\r\n  //   stack: [],\r\n  //   stackList: Stack[''],\r\n  //   aggrArr:[],\r\n  //   aggrList: AggregateData[''],\r\n  //   // groupBy: '',\r\n  //   legend: {\r\n  //     icon: '',\r\n  //     width: 330,\r\n  //     type: 'scroll'\r\n  //   },\r\n  //   radius: []\r\n  // };\r\n\r\n\r\n  //create output decorator to emit data\r\n\r\n  chartData = chartValues;\r\n  chartLayoutData;\r\n  aggregationMethods;\r\n\r\n  isGroupByInAggregate = false;\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.aggregationMethods = chartValues.aggregateMethod;\r\n\r\n    this.config.xAxis = 'Date';\r\n    this.config.xAxis = 'value';\r\n\r\n    this.config.xAxisDimension = 'PhoneSales';\r\n    this.config.yAxisDimension = 'QuarterSales';\r\n\r\n    this.config.apiUrl = 'https://democenter.gateway.webmethodscloud.com/gateway/ConnectedStoreAPIs/1.0/ConnectedStoreAPIs/getQuarterlySales';\r\n    this.config.legend = {\r\n      icon: 'diamond',\r\n      top: '10%',\r\n      type: 'scroll'\r\n    }\r\n    this.config.listName = 'SalesData';\r\n    this.config.aggrList = [];\r\n    // this.config.xAxisDimension = 'time';\r\n    // this.config.yAxisDimension = 'c8y_Temperature.T.value';\r\n    // this.config.sqlQuery = 'select * from t664142085Space.temperature';\r\n    // this.config.apiUrl = 'service/datahub/sql?version=v1';\r\n    // this.config.legend = {\r\n    //   icon: 'diamond',\r\n    //   top: '10%',\r\n    //   type: 'scroll'\r\n    // }\r\n    // this.config.listName = 'rows';\r\n    // this.config.aggrList = [];\r\n\r\n  }\r\n\r\n\r\n  //add another stack to the stackList\r\n  //if stackList is empty, add total to the stackList\r\n  //if stackList is not empty, add another stack to the stackList\r\n  stackAdded(stack) {\r\n    this.config.stackList = [];\r\n    if (stack) {\r\n      this.config.stackList.push(new Stack());\r\n      this.config.stackList.push(new Stack());\r\n    } else {\r\n      this.config.stackList.length = 0;\r\n    }\r\n  }\r\n\r\n  deleteStackValue(stack, index) {\r\n    this.config.stackList.splice(index, 1);\r\n  }\r\n  \r\n  //updateStack is called when the user changes the type of chart\r\n  //updateStack is called when the user changes the layout of the chart\r\n  //updateStack is called when the user changes the data source of the chart\r\n  updateStack() {\r\n    if (this.config.apiUrl) {\r\n      if (this.config.type === 'bar') {\r\n        if (this.config.layout === 'stackedBar') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n      if (this.config.type === 'line') {\r\n        if (this.config.layout === 'stackedLine') {\r\n          if (this.config.stackList.length === 0) {\r\n            this.config.stack = 'total';\r\n          } else if (this.config.stackList.length > 0) {\r\n            this.config.stack = this.config.stackList;\r\n          } else {\r\n            this.config.stack = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addAnotherStack() {\r\n    this.config.stackList.push(new Stack());\r\n  }\r\n  isAggrAdded = false;\r\n  addAnotherAggregate() {\r\n    this.isAggrAdded = true;\r\n    this.config.aggrList.push(new AggregateData());\r\n  }\r\n\r\n  deleteAggrValue(aggr, index) {\r\n    this.config.aggrList.splice(index, 1);\r\n    if (this.config.aggrList.length === 0) {\r\n      this.isAggrAdded = false;\r\n    }\r\n  }\r\n  onSelection(value) {\r\n    this.chartData.chartLayout.filter(val => {\r\n      if (value === val.id) {\r\n        this.chartLayoutData = val.layout;\r\n      }\r\n    })\r\n    this.config.addStack = false;\r\n    \r\n  }\r\n  onLayoutSelection(value) {\r\n    if(value==='simpleBar' || value==='stackedBar'|| value==='simple'||value===\"stacked\" ||value==='simpleScatter'){\r\n      for(let val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n      for(let val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n    }else if(value==='simpleHorizontalBar' || value==='stackedHorizontalBar' || value ==='horizontalScatter'){\r\n      for(let val of this.chartData.yAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=false;\r\n        }\r\n      }\r\n      for(let val of this.chartData.xAxisType){\r\n        if(val.id==='category'){\r\n          val.disabled=true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  dataSourceSelection(value) {\r\n    if (value === 'API') {\r\n      this.config.showApiInput = true;\r\n      this.config.showDatahubInput = false;\r\n\r\n    } else if (value === 'datahub') {\r\n      this.config.showDatahubInput = true;\r\n      this.config.showApiInput = false;\r\n\r\n    } else {\r\n      this.config.showApiInput = false;\r\n      this.config.showDatahubInput = false;\r\n    }\r\n  }\r\n  @Output() configData: EventEmitter<any> = new EventEmitter();\r\n\r\n  // if onSelection, onLayoutSelection, dataSourceSelection is called, then submit data and emit config\r\n  SubmitData() {\r\n    // console.log('config', this.config);\r\n\r\n    this.config.aggrList.filter(element => {\r\n      if (element.aggrDimesnion === this.config.groupBy) {\r\n        this.isGroupByInAggregate = true;\r\n      } else {\r\n        this.isGroupByInAggregate = false;\r\n      }\r\n    });\r\n    if (this.config.area === true) {\r\n      this.config.area = {};\r\n    }else {\r\n      this.config.area = null;\r\n    }\r\n    if (!this.isGroupByInAggregate) {\r\n      this.configData.emit(this.config);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CUSTOM_ELEMENTS_SCHEMA, InjectionToken, NgModule } from '@angular/core';\r\nimport { BootstrapComponent, CommonModule, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';\r\nimport { GpSmartEchartWidgetComponent } from './gp-smart-echart-widget.component';\r\nimport * as preview from './preview-image';\r\nimport { NgxEchartsModule } from 'ngx-echarts';\r\nimport { SmartChartConfigComponent } from './smart-chart-config/smart-chart-config.component';\r\nimport { GpSmartEchartWidgetService } from './gp-smart-echart-widget.service';\r\nimport * as echarts from 'echarts';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  imports: [\r\n    CoreModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts\r\n    }),\r\n  ],\r\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\r\n  providers: [\r\n    GpSmartEchartWidgetService,\r\n    {\r\n        provide:  HOOK_COMPONENTS,\r\n        multi: true,\r\n        useValue: {\r\n            id: 'smart.echart',\r\n            label: 'Smart eChart',\r\n            description: 'linechart derived from api data',\r\n            previewImage: preview.previewImage,\r\n            component: GpSmartEchartWidgetComponent,\r\n            configComponent: SmartChartConfigComponent,\r\n            data : {\r\n                ng1 : {\r\n                    options: { noDeviceTarget: false,\r\n                    noNewWidgets: false,\r\n                    deviceTargetNotRequired: true,\r\n                    groupsSelectable: true\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }],\r\n  exports: [GpSmartEchartWidgetComponent,SmartChartConfigComponent],\r\n  entryComponents: [GpSmartEchartWidgetComponent,SmartChartConfigComponent]\r\n})\r\nexport class GpSmartEchartWidgetModule { }\r\n","/**\r\n * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Public API Surface of gp-smart-echart-widget\r\n */\r\nexport * from './lib/gp-smart-echart-widget.service';\r\nexport * from './lib/gp-smart-echart-widget.component';\r\nexport * from './lib/gp-smart-echart-widget.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {previewImage as ɵb} from './lib/preview-image';\nexport {SmartChartConfigComponent as ɵa} from './lib/smart-chart-config/smart-chart-config.component';"],"sourceRoot":""}